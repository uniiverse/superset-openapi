/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AdvancedDataTypeApi", () => {
  let instance: api.AdvancedDataTypeApi
  beforeEach(function() {
    instance = new api.AdvancedDataTypeApi(config)
  });

  test("apiV1AdvancedDataTypeConvertGet", () => {
    const q: AdvancedDataTypeConvertSchema = undefined
    return expect(instance.apiV1AdvancedDataTypeConvertGet(q, {})).resolves.toBe(null)
  })
  test("apiV1AdvancedDataTypeTypesGet", () => {
    return expect(instance.apiV1AdvancedDataTypeTypesGet({})).resolves.toBe(null)
  })
})

describe("AnnotationLayersApi", () => {
  let instance: api.AnnotationLayersApi
  beforeEach(function() {
    instance = new api.AnnotationLayersApi(config)
  });

  test("apiV1AnnotationLayerDelete", () => {
    const q: GetDeleteIdsSchema = undefined
    return expect(instance.apiV1AnnotationLayerDelete(q, {})).resolves.toBe(null)
  })
  test("apiV1AnnotationLayerGet", () => {
    const q: GetListSchema = undefined
    return expect(instance.apiV1AnnotationLayerGet(q, {})).resolves.toBe(null)
  })
  test("apiV1AnnotationLayerInfoGet", () => {
    const q: GetInfoSchema = undefined
    return expect(instance.apiV1AnnotationLayerInfoGet(q, {})).resolves.toBe(null)
  })
  test("apiV1AnnotationLayerPkAnnotationAnnotationIdDelete", () => {
    const pk: number = 56
    const annotationId: number = 56
    return expect(instance.apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, {})).resolves.toBe(null)
  })
  test("apiV1AnnotationLayerPkAnnotationAnnotationIdGet", () => {
    const pk: number = 56
    const annotationId: number = 56
    const q: GetItemSchema = undefined
    return expect(instance.apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, q, {})).resolves.toBe(null)
  })
  test("apiV1AnnotationLayerPkAnnotationAnnotationIdPut", () => {
    const body: api.AnnotationRestApiPut = undefined
    const pk: number = 56
    const annotationId: number = 56
    return expect(instance.apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId, {})).resolves.toBe(null)
  })
  test("apiV1AnnotationLayerPkAnnotationDelete", () => {
    const pk: number = 56
    const q: GetDeleteIdsSchema = undefined
    return expect(instance.apiV1AnnotationLayerPkAnnotationDelete(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1AnnotationLayerPkAnnotationGet", () => {
    const pk: number = 56
    const q: GetListSchema = undefined
    return expect(instance.apiV1AnnotationLayerPkAnnotationGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1AnnotationLayerPkAnnotationPost", () => {
    const body: api.AnnotationRestApiPost = undefined
    const pk: number = 56
    return expect(instance.apiV1AnnotationLayerPkAnnotationPost(body, pk, {})).resolves.toBe(null)
  })
  test("apiV1AnnotationLayerPkDelete", () => {
    const pk: number = 56
    return expect(instance.apiV1AnnotationLayerPkDelete(pk, {})).resolves.toBe(null)
  })
  test("apiV1AnnotationLayerPkGet", () => {
    const pk: number = 56
    const q: GetItemSchema = undefined
    return expect(instance.apiV1AnnotationLayerPkGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1AnnotationLayerPkPut", () => {
    const body: api.AnnotationLayerRestApiPut = undefined
    const pk: number = 56
    return expect(instance.apiV1AnnotationLayerPkPut(body, pk, {})).resolves.toBe(null)
  })
  test("apiV1AnnotationLayerPost", () => {
    const body: api.AnnotationLayerRestApiPost = undefined
    return expect(instance.apiV1AnnotationLayerPost(body, {})).resolves.toBe(null)
  })
  test("apiV1AnnotationLayerRelatedColumnNameGet", () => {
    const columnName: string = "columnName_example"
    const q: GetRelatedSchema = undefined
    return expect(instance.apiV1AnnotationLayerRelatedColumnNameGet(columnName, q, {})).resolves.toBe(null)
  })
})

describe("AsyncEventsRestApiApi", () => {
  let instance: api.AsyncEventsRestApiApi
  beforeEach(function() {
    instance = new api.AsyncEventsRestApiApi(config)
  });

  test("apiV1AsyncEventGet", () => {
    const lastId: string = "lastId_example"
    return expect(instance.apiV1AsyncEventGet(lastId, {})).resolves.toBe(null)
  })
})

describe("AvailableDomainsApi", () => {
  let instance: api.AvailableDomainsApi
  beforeEach(function() {
    instance = new api.AvailableDomainsApi(config)
  });

  test("apiV1AvailableDomainsGet", () => {
    return expect(instance.apiV1AvailableDomainsGet({})).resolves.toBe(null)
  })
})

describe("CSSTemplatesApi", () => {
  let instance: api.CSSTemplatesApi
  beforeEach(function() {
    instance = new api.CSSTemplatesApi(config)
  });

  test("apiV1CssTemplateDelete", () => {
    const q: GetDeleteIdsSchema = undefined
    return expect(instance.apiV1CssTemplateDelete(q, {})).resolves.toBe(null)
  })
  test("apiV1CssTemplateGet", () => {
    const q: GetListSchema = undefined
    return expect(instance.apiV1CssTemplateGet(q, {})).resolves.toBe(null)
  })
  test("apiV1CssTemplateInfoGet", () => {
    const q: GetInfoSchema = undefined
    return expect(instance.apiV1CssTemplateInfoGet(q, {})).resolves.toBe(null)
  })
  test("apiV1CssTemplatePkDelete", () => {
    const pk: number = 56
    return expect(instance.apiV1CssTemplatePkDelete(pk, {})).resolves.toBe(null)
  })
  test("apiV1CssTemplatePkGet", () => {
    const pk: number = 56
    const q: GetItemSchema = undefined
    return expect(instance.apiV1CssTemplatePkGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1CssTemplatePkPut", () => {
    const body: api.CssTemplateRestApiPut = undefined
    const pk: number = 56
    return expect(instance.apiV1CssTemplatePkPut(body, pk, {})).resolves.toBe(null)
  })
  test("apiV1CssTemplatePost", () => {
    const body: api.CssTemplateRestApiPost = undefined
    return expect(instance.apiV1CssTemplatePost(body, {})).resolves.toBe(null)
  })
  test("apiV1CssTemplateRelatedColumnNameGet", () => {
    const columnName: string = "columnName_example"
    const q: GetRelatedSchema = undefined
    return expect(instance.apiV1CssTemplateRelatedColumnNameGet(columnName, q, {})).resolves.toBe(null)
  })
})

describe("CacheRestApiApi", () => {
  let instance: api.CacheRestApiApi
  beforeEach(function() {
    instance = new api.CacheRestApiApi(config)
  });

  test("apiV1CachekeyInvalidatePost", () => {
    const body: api.CacheInvalidationRequestSchema = undefined
    return expect(instance.apiV1CachekeyInvalidatePost(body, {})).resolves.toBe(null)
  })
})

describe("ChartsApi", () => {
  let instance: api.ChartsApi
  beforeEach(function() {
    instance = new api.ChartsApi(config)
  });

  test("apiV1ChartDataCacheKeyGet", () => {
    const cacheKey: string = "cacheKey_example"
    return expect(instance.apiV1ChartDataCacheKeyGet(cacheKey, {})).resolves.toBe(null)
  })
  test("apiV1ChartDataPost", () => {
    const body: api.ChartDataQueryContextSchema = undefined
    return expect(instance.apiV1ChartDataPost(body, {})).resolves.toBe(null)
  })
  test("apiV1ChartDelete", () => {
    const q: GetDeleteIdsSchema = undefined
    return expect(instance.apiV1ChartDelete(q, {})).resolves.toBe(null)
  })
  test("apiV1ChartExportGet", () => {
    const q: GetExportIdsSchema = undefined
    return expect(instance.apiV1ChartExportGet(q, {})).resolves.toBe(null)
  })
  test("apiV1ChartFavoriteStatusGet", () => {
    const q: GetFavStarIdsSchema = undefined
    return expect(instance.apiV1ChartFavoriteStatusGet(q, {})).resolves.toBe(null)
  })
  test("apiV1ChartGet", () => {
    const q: GetListSchema = undefined
    return expect(instance.apiV1ChartGet(q, {})).resolves.toBe(null)
  })
  test("apiV1ChartImportPost", () => {
    const formData: Blob = "formData_example"
    const overwrite: boolean = true
    const passwords: string = "passwords_example"
    const sshTunnelPasswords: string = "sshTunnelPasswords_example"
    const sshTunnelPrivateKeyPasswords: string = "sshTunnelPrivateKeyPasswords_example"
    const sshTunnelPrivateKeys: string = "sshTunnelPrivateKeys_example"
    return expect(instance.apiV1ChartImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, {})).resolves.toBe(null)
  })
  test("apiV1ChartInfoGet", () => {
    const q: GetInfoSchema = undefined
    return expect(instance.apiV1ChartInfoGet(q, {})).resolves.toBe(null)
  })
  test("apiV1ChartPkCacheScreenshotGet", () => {
    const pk: number = 56
    const q: ScreenshotQuerySchema = undefined
    return expect(instance.apiV1ChartPkCacheScreenshotGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1ChartPkDataGet", () => {
    const pk: number = 56
    const format: string = "format_example"
    const type: string = "type_example"
    const force: boolean = true
    return expect(instance.apiV1ChartPkDataGet(pk, format, type, force, {})).resolves.toBe(null)
  })
  test("apiV1ChartPkDelete", () => {
    const pk: number = 56
    return expect(instance.apiV1ChartPkDelete(pk, {})).resolves.toBe(null)
  })
  test("apiV1ChartPkFavoritesDelete", () => {
    const pk: number = 56
    return expect(instance.apiV1ChartPkFavoritesDelete(pk, {})).resolves.toBe(null)
  })
  test("apiV1ChartPkFavoritesPost", () => {
    const pk: number = 56
    return expect(instance.apiV1ChartPkFavoritesPost(pk, {})).resolves.toBe(null)
  })
  test("apiV1ChartPkGet", () => {
    const pk: number = 56
    const q: GetItemSchema = undefined
    return expect(instance.apiV1ChartPkGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1ChartPkPut", () => {
    const body: api.ChartRestApiPut = undefined
    const pk: number = 56
    return expect(instance.apiV1ChartPkPut(body, pk, {})).resolves.toBe(null)
  })
  test("apiV1ChartPkScreenshotDigestGet", () => {
    const pk: number = 56
    const digest: string = "digest_example"
    return expect(instance.apiV1ChartPkScreenshotDigestGet(pk, digest, {})).resolves.toBe(null)
  })
  test("apiV1ChartPkThumbnailDigestGet", () => {
    const pk: number = 56
    const digest: string = "digest_example"
    return expect(instance.apiV1ChartPkThumbnailDigestGet(pk, digest, {})).resolves.toBe(null)
  })
  test("apiV1ChartPost", () => {
    const body: api.ChartRestApiPost = undefined
    return expect(instance.apiV1ChartPost(body, {})).resolves.toBe(null)
  })
  test("apiV1ChartRelatedColumnNameGet", () => {
    const columnName: string = "columnName_example"
    const q: GetRelatedSchema = undefined
    return expect(instance.apiV1ChartRelatedColumnNameGet(columnName, q, {})).resolves.toBe(null)
  })
})

describe("CurrentUserApi", () => {
  let instance: api.CurrentUserApi
  beforeEach(function() {
    instance = new api.CurrentUserApi(config)
  });

  test("apiV1MeGet", () => {
    return expect(instance.apiV1MeGet({})).resolves.toBe(null)
  })
  test("apiV1MeRolesGet", () => {
    return expect(instance.apiV1MeRolesGet({})).resolves.toBe(null)
  })
})

describe("DashboardFilterStateApi", () => {
  let instance: api.DashboardFilterStateApi
  beforeEach(function() {
    instance = new api.DashboardFilterStateApi(config)
  });

  test("apiV1DashboardPkFilterStateKeyDelete", () => {
    const pk: number = 56
    const key: string = "key_example"
    return expect(instance.apiV1DashboardPkFilterStateKeyDelete(pk, key, {})).resolves.toBe(null)
  })
  test("apiV1DashboardPkFilterStateKeyGet", () => {
    const pk: number = 56
    const key: string = "key_example"
    return expect(instance.apiV1DashboardPkFilterStateKeyGet(pk, key, {})).resolves.toBe(null)
  })
  test("apiV1DashboardPkFilterStateKeyPut", () => {
    const body: api.TemporaryCachePutSchema = undefined
    const pk: number = 56
    const key: string = "key_example"
    const tabId: number = 56
    return expect(instance.apiV1DashboardPkFilterStateKeyPut(body, pk, key, tabId, {})).resolves.toBe(null)
  })
  test("apiV1DashboardPkFilterStatePost", () => {
    const body: api.TemporaryCachePostSchema = undefined
    const pk: number = 56
    const tabId: number = 56
    return expect(instance.apiV1DashboardPkFilterStatePost(body, pk, tabId, {})).resolves.toBe(null)
  })
})

describe("DashboardPermanentLinkApi", () => {
  let instance: api.DashboardPermanentLinkApi
  beforeEach(function() {
    instance = new api.DashboardPermanentLinkApi(config)
  });

  test("apiV1DashboardPermalinkKeyGet", () => {
    const key: string = "key_example"
    return expect(instance.apiV1DashboardPermalinkKeyGet(key, {})).resolves.toBe(null)
  })
  test("apiV1DashboardPkPermalinkPost", () => {
    const pk: string = "pk_example"
    return expect(instance.apiV1DashboardPkPermalinkPost(pk, {})).resolves.toBe(null)
  })
})

describe("DashboardsApi", () => {
  let instance: api.DashboardsApi
  beforeEach(function() {
    instance = new api.DashboardsApi(config)
  });

  test("apiV1DashboardDelete", () => {
    const q: GetDeleteIdsSchema = undefined
    return expect(instance.apiV1DashboardDelete(q, {})).resolves.toBe(null)
  })
  test("apiV1DashboardExportGet", () => {
    const q: GetExportIdsSchema = undefined
    return expect(instance.apiV1DashboardExportGet(q, {})).resolves.toBe(null)
  })
  test("apiV1DashboardFavoriteStatusGet", () => {
    const q: GetFavStarIdsSchema = undefined
    return expect(instance.apiV1DashboardFavoriteStatusGet(q, {})).resolves.toBe(null)
  })
  test("apiV1DashboardGet", () => {
    const q: GetListSchema = undefined
    return expect(instance.apiV1DashboardGet(q, {})).resolves.toBe(null)
  })
  test("apiV1DashboardIdOrSlugChartsGet", () => {
    const idOrSlug: string = "idOrSlug_example"
    return expect(instance.apiV1DashboardIdOrSlugChartsGet(idOrSlug, {})).resolves.toBe(null)
  })
  test("apiV1DashboardIdOrSlugCopyPost", () => {
    const body: api.DashboardCopySchema = undefined
    const idOrSlug: string = "idOrSlug_example"
    return expect(instance.apiV1DashboardIdOrSlugCopyPost(body, idOrSlug, {})).resolves.toBe(null)
  })
  test("apiV1DashboardIdOrSlugDatasetsGet", () => {
    const idOrSlug: string = "idOrSlug_example"
    return expect(instance.apiV1DashboardIdOrSlugDatasetsGet(idOrSlug, {})).resolves.toBe(null)
  })
  test("apiV1DashboardIdOrSlugEmbeddedDelete", () => {
    const idOrSlug: string = "idOrSlug_example"
    return expect(instance.apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug, {})).resolves.toBe(null)
  })
  test("apiV1DashboardIdOrSlugEmbeddedGet", () => {
    const idOrSlug: string = "idOrSlug_example"
    return expect(instance.apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug, {})).resolves.toBe(null)
  })
  test("apiV1DashboardIdOrSlugEmbeddedPost", () => {
    const body: api.EmbeddedDashboardConfig = undefined
    const idOrSlug: string = "idOrSlug_example"
    return expect(instance.apiV1DashboardIdOrSlugEmbeddedPost(body, idOrSlug, {})).resolves.toBe(null)
  })
  test("apiV1DashboardIdOrSlugEmbeddedPut", () => {
    const body: api.EmbeddedDashboardConfig = undefined
    const idOrSlug: string = "idOrSlug_example"
    return expect(instance.apiV1DashboardIdOrSlugEmbeddedPut(body, idOrSlug, {})).resolves.toBe(null)
  })
  test("apiV1DashboardIdOrSlugGet", () => {
    const idOrSlug: string = "idOrSlug_example"
    return expect(instance.apiV1DashboardIdOrSlugGet(idOrSlug, {})).resolves.toBe(null)
  })
  test("apiV1DashboardImportPost", () => {
    const formData: Blob = "formData_example"
    const overwrite: boolean = true
    const passwords: string = "passwords_example"
    const sshTunnelPasswords: string = "sshTunnelPasswords_example"
    const sshTunnelPrivateKeyPasswords: string = "sshTunnelPrivateKeyPasswords_example"
    const sshTunnelPrivateKeys: string = "sshTunnelPrivateKeys_example"
    return expect(instance.apiV1DashboardImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, {})).resolves.toBe(null)
  })
  test("apiV1DashboardInfoGet", () => {
    const q: GetInfoSchema = undefined
    return expect(instance.apiV1DashboardInfoGet(q, {})).resolves.toBe(null)
  })
  test("apiV1DashboardPkDelete", () => {
    const pk: number = 56
    return expect(instance.apiV1DashboardPkDelete(pk, {})).resolves.toBe(null)
  })
  test("apiV1DashboardPkFavoritesDelete", () => {
    const pk: number = 56
    return expect(instance.apiV1DashboardPkFavoritesDelete(pk, {})).resolves.toBe(null)
  })
  test("apiV1DashboardPkFavoritesPost", () => {
    const pk: number = 56
    return expect(instance.apiV1DashboardPkFavoritesPost(pk, {})).resolves.toBe(null)
  })
  test("apiV1DashboardPkPut", () => {
    const body: api.DashboardRestApiPut = undefined
    const pk: number = 56
    return expect(instance.apiV1DashboardPkPut(body, pk, {})).resolves.toBe(null)
  })
  test("apiV1DashboardPkThumbnailDigestGet", () => {
    const pk: number = 56
    const digest: string = "digest_example"
    const q: ThumbnailQuerySchema = undefined
    return expect(instance.apiV1DashboardPkThumbnailDigestGet(pk, digest, q, {})).resolves.toBe(null)
  })
  test("apiV1DashboardPost", () => {
    const body: api.DashboardRestApiPost = undefined
    return expect(instance.apiV1DashboardPost(body, {})).resolves.toBe(null)
  })
  test("apiV1DashboardRelatedColumnNameGet", () => {
    const columnName: string = "columnName_example"
    const q: GetRelatedSchema = undefined
    return expect(instance.apiV1DashboardRelatedColumnNameGet(columnName, q, {})).resolves.toBe(null)
  })
})

describe("DatabaseApi", () => {
  let instance: api.DatabaseApi
  beforeEach(function() {
    instance = new api.DatabaseApi(config)
  });

  test("apiV1DatabaseAvailableGet", () => {
    return expect(instance.apiV1DatabaseAvailableGet({})).resolves.toBe(null)
  })
  test("apiV1DatabaseExportGet", () => {
    const q: GetExportIdsSchema = undefined
    return expect(instance.apiV1DatabaseExportGet(q, {})).resolves.toBe(null)
  })
  test("apiV1DatabaseGet", () => {
    const q: GetListSchema = undefined
    return expect(instance.apiV1DatabaseGet(q, {})).resolves.toBe(null)
  })
  test("apiV1DatabaseImportPost", () => {
    const formData: Blob = "formData_example"
    const overwrite: boolean = true
    const passwords: string = "passwords_example"
    const sshTunnelPasswords: string = "sshTunnelPasswords_example"
    const sshTunnelPrivateKeyPasswords: string = "sshTunnelPrivateKeyPasswords_example"
    const sshTunnelPrivateKeys: string = "sshTunnelPrivateKeys_example"
    return expect(instance.apiV1DatabaseImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, {})).resolves.toBe(null)
  })
  test("apiV1DatabaseInfoGet", () => {
    const q: GetInfoSchema = undefined
    return expect(instance.apiV1DatabaseInfoGet(q, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkConnectionGet", () => {
    const pk: number = 56
    return expect(instance.apiV1DatabasePkConnectionGet(pk, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkDelete", () => {
    const pk: number = 56
    return expect(instance.apiV1DatabasePkDelete(pk, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkFunctionNamesGet", () => {
    const pk: number = 56
    return expect(instance.apiV1DatabasePkFunctionNamesGet(pk, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkGet", () => {
    const pk: number = 56
    return expect(instance.apiV1DatabasePkGet(pk, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkPut", () => {
    const body: api.DatabaseRestApiPut = undefined
    const pk: number = 56
    return expect(instance.apiV1DatabasePkPut(body, pk, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkRelatedObjectsGet", () => {
    const pk: number = 56
    return expect(instance.apiV1DatabasePkRelatedObjectsGet(pk, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkSchemasAccessForFileUploadGet", () => {
    const pk: number = 56
    return expect(instance.apiV1DatabasePkSchemasAccessForFileUploadGet(pk, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkSchemasGet", () => {
    const pk: number = 56
    const q: DatabaseSchemasQuerySchema = undefined
    return expect(instance.apiV1DatabasePkSchemasGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkSelectStarTableNameGet", () => {
    const pk: number = 56
    const tableName: string = "tableName_example"
    const schemaName: string = "schemaName_example"
    return expect(instance.apiV1DatabasePkSelectStarTableNameGet(pk, tableName, schemaName, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkSelectStarTableNameSchemaNameGet", () => {
    const pk: number = 56
    const tableName: string = "tableName_example"
    const schemaName: string = "schemaName_example"
    return expect(instance.apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkSshTunnelDelete", () => {
    const pk: number = 56
    return expect(instance.apiV1DatabasePkSshTunnelDelete(pk, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkTableExtraTableNameSchemaNameGet", () => {
    const pk: number = 56
    const tableName: string = "tableName_example"
    const schemaName: string = "schemaName_example"
    return expect(instance.apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk, tableName, schemaName, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkTableTableNameSchemaNameGet", () => {
    const pk: number = 56
    const tableName: string = "tableName_example"
    const schemaName: string = "schemaName_example"
    return expect(instance.apiV1DatabasePkTableTableNameSchemaNameGet(pk, tableName, schemaName, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkTablesGet", () => {
    const pk: number = 56
    const q: DatabaseTablesQuerySchema = undefined
    return expect(instance.apiV1DatabasePkTablesGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePkValidateSqlPost", () => {
    const body: api.ValidateSQLRequest = undefined
    const pk: number = 56
    return expect(instance.apiV1DatabasePkValidateSqlPost(body, pk, {})).resolves.toBe(null)
  })
  test("apiV1DatabasePost", () => {
    const body: api.DatabaseRestApiPost = undefined
    return expect(instance.apiV1DatabasePost(body, {})).resolves.toBe(null)
  })
  test("apiV1DatabaseTestConnectionPost", () => {
    const body: api.DatabaseTestConnectionSchema = undefined
    return expect(instance.apiV1DatabaseTestConnectionPost(body, {})).resolves.toBe(null)
  })
  test("apiV1DatabaseValidateParametersPost", () => {
    const body: api.DatabaseValidateParametersSchema = undefined
    return expect(instance.apiV1DatabaseValidateParametersPost(body, {})).resolves.toBe(null)
  })
})

describe("DatasetsApi", () => {
  let instance: api.DatasetsApi
  beforeEach(function() {
    instance = new api.DatasetsApi(config)
  });

  test("apiV1DatasetDelete", () => {
    const q: GetDeleteIdsSchema = undefined
    return expect(instance.apiV1DatasetDelete(q, {})).resolves.toBe(null)
  })
  test("apiV1DatasetDistinctColumnNameGet", () => {
    const columnName: string = "columnName_example"
    const q: GetRelatedSchema = undefined
    return expect(instance.apiV1DatasetDistinctColumnNameGet(columnName, q, {})).resolves.toBe(null)
  })
  test("apiV1DatasetDuplicatePost", () => {
    const body: api.DatasetDuplicateSchema = undefined
    return expect(instance.apiV1DatasetDuplicatePost(body, {})).resolves.toBe(null)
  })
  test("apiV1DatasetExportGet", () => {
    const q: GetExportIdsSchema = undefined
    return expect(instance.apiV1DatasetExportGet(q, {})).resolves.toBe(null)
  })
  test("apiV1DatasetGet", () => {
    const q: GetListSchema = undefined
    return expect(instance.apiV1DatasetGet(q, {})).resolves.toBe(null)
  })
  test("apiV1DatasetGetOrCreatePost", () => {
    const body: api.GetOrCreateDatasetSchema = undefined
    return expect(instance.apiV1DatasetGetOrCreatePost(body, {})).resolves.toBe(null)
  })
  test("apiV1DatasetImportPost", () => {
    const formData: Blob = "formData_example"
    const overwrite: boolean = true
    const passwords: string = "passwords_example"
    const sshTunnelPasswords: string = "sshTunnelPasswords_example"
    const sshTunnelPrivateKeyPasswords: string = "sshTunnelPrivateKeyPasswords_example"
    const sshTunnelPrivateKeys: string = "sshTunnelPrivateKeys_example"
    const syncColumns: boolean = true
    const syncMetrics: boolean = true
    return expect(instance.apiV1DatasetImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, syncColumns, syncMetrics, {})).resolves.toBe(null)
  })
  test("apiV1DatasetInfoGet", () => {
    const q: GetInfoSchema = undefined
    return expect(instance.apiV1DatasetInfoGet(q, {})).resolves.toBe(null)
  })
  test("apiV1DatasetPkColumnColumnIdDelete", () => {
    const pk: number = 56
    const columnId: number = 56
    return expect(instance.apiV1DatasetPkColumnColumnIdDelete(pk, columnId, {})).resolves.toBe(null)
  })
  test("apiV1DatasetPkDelete", () => {
    const pk: number = 56
    return expect(instance.apiV1DatasetPkDelete(pk, {})).resolves.toBe(null)
  })
  test("apiV1DatasetPkGet", () => {
    const pk: number = 56
    const q: GetItemSchema = undefined
    return expect(instance.apiV1DatasetPkGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1DatasetPkMetricMetricIdDelete", () => {
    const pk: number = 56
    const metricId: number = 56
    return expect(instance.apiV1DatasetPkMetricMetricIdDelete(pk, metricId, {})).resolves.toBe(null)
  })
  test("apiV1DatasetPkPut", () => {
    const body: api.DatasetRestApiPut = undefined
    const pk: number = 56
    const overrideColumns: boolean = true
    return expect(instance.apiV1DatasetPkPut(body, pk, overrideColumns, {})).resolves.toBe(null)
  })
  test("apiV1DatasetPkRefreshPut", () => {
    const pk: number = 56
    return expect(instance.apiV1DatasetPkRefreshPut(pk, {})).resolves.toBe(null)
  })
  test("apiV1DatasetPkRelatedObjectsGet", () => {
    const pk: number = 56
    return expect(instance.apiV1DatasetPkRelatedObjectsGet(pk, {})).resolves.toBe(null)
  })
  test("apiV1DatasetPost", () => {
    const body: api.DatasetRestApiPost = undefined
    return expect(instance.apiV1DatasetPost(body, {})).resolves.toBe(null)
  })
  test("apiV1DatasetRelatedColumnNameGet", () => {
    const columnName: string = "columnName_example"
    const q: GetRelatedSchema = undefined
    return expect(instance.apiV1DatasetRelatedColumnNameGet(columnName, q, {})).resolves.toBe(null)
  })
})

describe("DatasourcesApi", () => {
  let instance: api.DatasourcesApi
  beforeEach(function() {
    instance = new api.DatasourcesApi(config)
  });

  test("apiV1DatasourceDatasourceTypeDatasourceIdColumnColumnNameValuesGet", () => {
    const datasourceType: string = "datasourceType_example"
    const datasourceId: number = 56
    const columnName: string = "columnName_example"
    return expect(instance.apiV1DatasourceDatasourceTypeDatasourceIdColumnColumnNameValuesGet(datasourceType, datasourceId, columnName, {})).resolves.toBe(null)
  })
})

describe("EmbeddedDashboardApi", () => {
  let instance: api.EmbeddedDashboardApi
  beforeEach(function() {
    instance = new api.EmbeddedDashboardApi(config)
  });

  test("apiV1EmbeddedDashboardUuidGet", () => {
    const uuid: string = "uuid_example"
    return expect(instance.apiV1EmbeddedDashboardUuidGet(uuid, {})).resolves.toBe(null)
  })
})

describe("ExploreApi", () => {
  let instance: api.ExploreApi
  beforeEach(function() {
    instance = new api.ExploreApi(config)
  });

  test("apiV1ExploreGet", () => {
    const formDataKey: string = "formDataKey_example"
    const permalinkKey: string = "permalinkKey_example"
    const sliceId: number = 56
    const datasourceId: number = 56
    const datasourceType: string = "datasourceType_example"
    return expect(instance.apiV1ExploreGet(formDataKey, permalinkKey, sliceId, datasourceId, datasourceType, {})).resolves.toBe(null)
  })
})

describe("ExploreFormDataApi", () => {
  let instance: api.ExploreFormDataApi
  beforeEach(function() {
    instance = new api.ExploreFormDataApi(config)
  });

  test("apiV1ExploreFormDataKeyDelete", () => {
    const key: string = "key_example"
    return expect(instance.apiV1ExploreFormDataKeyDelete(key, {})).resolves.toBe(null)
  })
  test("apiV1ExploreFormDataKeyGet", () => {
    const key: string = "key_example"
    return expect(instance.apiV1ExploreFormDataKeyGet(key, {})).resolves.toBe(null)
  })
  test("apiV1ExploreFormDataKeyPut", () => {
    const body: api.FormDataPutSchema = undefined
    const key: string = "key_example"
    const tabId: number = 56
    return expect(instance.apiV1ExploreFormDataKeyPut(body, key, tabId, {})).resolves.toBe(null)
  })
  test("apiV1ExploreFormDataPost", () => {
    const body: api.FormDataPostSchema = undefined
    const tabId: number = 56
    return expect(instance.apiV1ExploreFormDataPost(body, tabId, {})).resolves.toBe(null)
  })
})

describe("ExplorePermanentLinkApi", () => {
  let instance: api.ExplorePermanentLinkApi
  beforeEach(function() {
    instance = new api.ExplorePermanentLinkApi(config)
  });

  test("apiV1ExplorePermalinkKeyGet", () => {
    const key: string = "key_example"
    return expect(instance.apiV1ExplorePermalinkKeyGet(key, {})).resolves.toBe(null)
  })
  test("apiV1ExplorePermalinkPost", () => {
    return expect(instance.apiV1ExplorePermalinkPost({})).resolves.toBe(null)
  })
})

describe("FilterSetRestApiApi", () => {
  let instance: api.FilterSetRestApiApi
  beforeEach(function() {
    instance = new api.FilterSetRestApiApi(config)
  });

  test("apiV1DashboardDashboardIdFiltersetsGet", () => {
    const dashboardId: number = 56
    return expect(instance.apiV1DashboardDashboardIdFiltersetsGet(dashboardId, {})).resolves.toBe(null)
  })
  test("apiV1DashboardDashboardIdFiltersetsPkDelete", () => {
    const dashboardId: number = 56
    const pk: number = 56
    return expect(instance.apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId, pk, {})).resolves.toBe(null)
  })
  test("apiV1DashboardDashboardIdFiltersetsPkPut", () => {
    const body: api.FilterSetRestApiPut = undefined
    const dashboardId: number = 56
    const pk: number = 56
    return expect(instance.apiV1DashboardDashboardIdFiltersetsPkPut(body, dashboardId, pk, {})).resolves.toBe(null)
  })
  test("apiV1DashboardDashboardIdFiltersetsPost", () => {
    const body: api.FilterSetRestApiPost = undefined
    const dashboardId: number = 56
    return expect(instance.apiV1DashboardDashboardIdFiltersetsPost(body, dashboardId, {})).resolves.toBe(null)
  })
})

describe("ImportexportApi", () => {
  let instance: api.ImportexportApi
  beforeEach(function() {
    instance = new api.ImportexportApi(config)
  });

  test("apiV1AssetsExportGet", () => {
    return expect(instance.apiV1AssetsExportGet({})).resolves.toBe(null)
  })
  test("apiV1AssetsImportPost", () => {
    const bundle: Blob = "bundle_example"
    const passwords: string = "passwords_example"
    const sshTunnelPasswords: string = "sshTunnelPasswords_example"
    const sshTunnelPrivateKeyPasswords: string = "sshTunnelPrivateKeyPasswords_example"
    const sshTunnelPrivateKeys: string = "sshTunnelPrivateKeys_example"
    return expect(instance.apiV1AssetsImportPost(bundle, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, {})).resolves.toBe(null)
  })
})

describe("LogRestApiApi", () => {
  let instance: api.LogRestApiApi
  beforeEach(function() {
    instance = new api.LogRestApiApi(config)
  });

  test("apiV1LogGet", () => {
    const q: GetListSchema = undefined
    return expect(instance.apiV1LogGet(q, {})).resolves.toBe(null)
  })
  test("apiV1LogPkGet", () => {
    const pk: number = 56
    const q: GetItemSchema = undefined
    return expect(instance.apiV1LogPkGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1LogPost", () => {
    const body: api.LogRestApiPost = undefined
    return expect(instance.apiV1LogPost(body, {})).resolves.toBe(null)
  })
  test("apiV1LogRecentActivityUserIdGet", () => {
    const userId: number = 56
    const q: GetRecentActivitySchema = undefined
    return expect(instance.apiV1LogRecentActivityUserIdGet(userId, q, {})).resolves.toBe(null)
  })
})

describe("MenuApi", () => {
  let instance: api.MenuApi
  beforeEach(function() {
    instance = new api.MenuApi(config)
  });

  test("apiV1MenuGet", () => {
    return expect(instance.apiV1MenuGet({})).resolves.toBe(null)
  })
})

describe("OpenApiApi", () => {
  let instance: api.OpenApiApi
  beforeEach(function() {
    instance = new api.OpenApiApi(config)
  });

  test("apiVersionOpenapiGet", () => {
    const version: string = "version_example"
    return expect(instance.apiVersionOpenapiGet(version, {})).resolves.toBe(null)
  })
})

describe("QueriesApi", () => {
  let instance: api.QueriesApi
  beforeEach(function() {
    instance = new api.QueriesApi(config)
  });

  test("apiV1QueryDistinctColumnNameGet", () => {
    const columnName: string = "columnName_example"
    const q: GetRelatedSchema = undefined
    return expect(instance.apiV1QueryDistinctColumnNameGet(columnName, q, {})).resolves.toBe(null)
  })
  test("apiV1QueryGet", () => {
    const q: GetListSchema = undefined
    return expect(instance.apiV1QueryGet(q, {})).resolves.toBe(null)
  })
  test("apiV1QueryPkGet", () => {
    const pk: number = 56
    const q: GetItemSchema = undefined
    return expect(instance.apiV1QueryPkGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1QueryRelatedColumnNameGet", () => {
    const columnName: string = "columnName_example"
    const q: GetRelatedSchema = undefined
    return expect(instance.apiV1QueryRelatedColumnNameGet(columnName, q, {})).resolves.toBe(null)
  })
  test("apiV1QueryStopPost", () => {
    const body: api.StopQuerySchema = undefined
    return expect(instance.apiV1QueryStopPost(body, {})).resolves.toBe(null)
  })
  test("apiV1QueryUpdatedSinceGet", () => {
    const q: QueriesGetUpdatedSinceSchema = undefined
    return expect(instance.apiV1QueryUpdatedSinceGet(q, {})).resolves.toBe(null)
  })
  test("apiV1SavedQueryDelete", () => {
    const q: GetDeleteIdsSchema = undefined
    return expect(instance.apiV1SavedQueryDelete(q, {})).resolves.toBe(null)
  })
  test("apiV1SavedQueryDistinctColumnNameGet", () => {
    const columnName: string = "columnName_example"
    const q: GetRelatedSchema = undefined
    return expect(instance.apiV1SavedQueryDistinctColumnNameGet(columnName, q, {})).resolves.toBe(null)
  })
  test("apiV1SavedQueryExportGet", () => {
    const q: GetExportIdsSchema = undefined
    return expect(instance.apiV1SavedQueryExportGet(q, {})).resolves.toBe(null)
  })
  test("apiV1SavedQueryGet", () => {
    const q: GetListSchema = undefined
    return expect(instance.apiV1SavedQueryGet(q, {})).resolves.toBe(null)
  })
  test("apiV1SavedQueryImportPost", () => {
    const formData: Blob = "formData_example"
    const overwrite: boolean = true
    const passwords: string = "passwords_example"
    const sshTunnelPasswords: string = "sshTunnelPasswords_example"
    const sshTunnelPrivateKeyPasswords: string = "sshTunnelPrivateKeyPasswords_example"
    const sshTunnelPrivateKeys: string = "sshTunnelPrivateKeys_example"
    return expect(instance.apiV1SavedQueryImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, {})).resolves.toBe(null)
  })
  test("apiV1SavedQueryInfoGet", () => {
    const q: GetInfoSchema = undefined
    return expect(instance.apiV1SavedQueryInfoGet(q, {})).resolves.toBe(null)
  })
  test("apiV1SavedQueryPkDelete", () => {
    const pk: number = 56
    return expect(instance.apiV1SavedQueryPkDelete(pk, {})).resolves.toBe(null)
  })
  test("apiV1SavedQueryPkGet", () => {
    const pk: number = 56
    const q: GetItemSchema = undefined
    return expect(instance.apiV1SavedQueryPkGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1SavedQueryPkPut", () => {
    const body: api.SavedQueryRestApiPut = undefined
    const pk: number = 56
    return expect(instance.apiV1SavedQueryPkPut(body, pk, {})).resolves.toBe(null)
  })
  test("apiV1SavedQueryPost", () => {
    const body: api.SavedQueryRestApiPost = undefined
    return expect(instance.apiV1SavedQueryPost(body, {})).resolves.toBe(null)
  })
  test("apiV1SavedQueryRelatedColumnNameGet", () => {
    const columnName: string = "columnName_example"
    const q: GetRelatedSchema = undefined
    return expect(instance.apiV1SavedQueryRelatedColumnNameGet(columnName, q, {})).resolves.toBe(null)
  })
})

describe("ReportSchedulesApi", () => {
  let instance: api.ReportSchedulesApi
  beforeEach(function() {
    instance = new api.ReportSchedulesApi(config)
  });

  test("apiV1ReportDelete", () => {
    const q: GetDeleteIdsSchema = undefined
    return expect(instance.apiV1ReportDelete(q, {})).resolves.toBe(null)
  })
  test("apiV1ReportGet", () => {
    const q: GetListSchema = undefined
    return expect(instance.apiV1ReportGet(q, {})).resolves.toBe(null)
  })
  test("apiV1ReportInfoGet", () => {
    const q: GetInfoSchema = undefined
    return expect(instance.apiV1ReportInfoGet(q, {})).resolves.toBe(null)
  })
  test("apiV1ReportPkDelete", () => {
    const pk: number = 56
    return expect(instance.apiV1ReportPkDelete(pk, {})).resolves.toBe(null)
  })
  test("apiV1ReportPkGet", () => {
    const pk: number = 56
    const q: GetItemSchema = undefined
    return expect(instance.apiV1ReportPkGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1ReportPkLogGet", () => {
    const pk: number = 56
    const q: GetListSchema = undefined
    return expect(instance.apiV1ReportPkLogGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1ReportPkLogLogIdGet", () => {
    const pk: number = 56
    const logId: number = 56
    const q: GetItemSchema = undefined
    return expect(instance.apiV1ReportPkLogLogIdGet(pk, logId, q, {})).resolves.toBe(null)
  })
  test("apiV1ReportPkPut", () => {
    const body: api.ReportScheduleRestApiPut = undefined
    const pk: number = 56
    return expect(instance.apiV1ReportPkPut(body, pk, {})).resolves.toBe(null)
  })
  test("apiV1ReportPost", () => {
    const body: api.ReportScheduleRestApiPost = undefined
    return expect(instance.apiV1ReportPost(body, {})).resolves.toBe(null)
  })
  test("apiV1ReportRelatedColumnNameGet", () => {
    const columnName: string = "columnName_example"
    const q: GetRelatedSchema = undefined
    return expect(instance.apiV1ReportRelatedColumnNameGet(columnName, q, {})).resolves.toBe(null)
  })
})

describe("RowLevelSecurityApi", () => {
  let instance: api.RowLevelSecurityApi
  beforeEach(function() {
    instance = new api.RowLevelSecurityApi(config)
  });

  test("apiV1RowlevelsecurityDelete", () => {
    const q: GetDeleteIdsSchema = undefined
    return expect(instance.apiV1RowlevelsecurityDelete(q, {})).resolves.toBe(null)
  })
  test("apiV1RowlevelsecurityGet", () => {
    const q: GetListSchema = undefined
    return expect(instance.apiV1RowlevelsecurityGet(q, {})).resolves.toBe(null)
  })
  test("apiV1RowlevelsecurityInfoGet", () => {
    const q: GetInfoSchema = undefined
    return expect(instance.apiV1RowlevelsecurityInfoGet(q, {})).resolves.toBe(null)
  })
  test("apiV1RowlevelsecurityPkDelete", () => {
    const pk: number = 56
    return expect(instance.apiV1RowlevelsecurityPkDelete(pk, {})).resolves.toBe(null)
  })
  test("apiV1RowlevelsecurityPkGet", () => {
    const pk: number = 56
    const q: GetItemSchema = undefined
    return expect(instance.apiV1RowlevelsecurityPkGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1RowlevelsecurityPkPut", () => {
    const body: api.RLSRestApiPut = undefined
    const pk: number = 56
    return expect(instance.apiV1RowlevelsecurityPkPut(body, pk, {})).resolves.toBe(null)
  })
  test("apiV1RowlevelsecurityPost", () => {
    const body: api.RLSRestApiPost = undefined
    return expect(instance.apiV1RowlevelsecurityPost(body, {})).resolves.toBe(null)
  })
  test("apiV1RowlevelsecurityRelatedColumnNameGet", () => {
    const columnName: string = "columnName_example"
    const q: GetRelatedSchema = undefined
    return expect(instance.apiV1RowlevelsecurityRelatedColumnNameGet(columnName, q, {})).resolves.toBe(null)
  })
})

describe("SQLLabApi", () => {
  let instance: api.SQLLabApi
  beforeEach(function() {
    instance = new api.SQLLabApi(config)
  });

  test("apiV1SqllabEstimatePost", () => {
    const body: api.EstimateQueryCostSchema = undefined
    return expect(instance.apiV1SqllabEstimatePost(body, {})).resolves.toBe(null)
  })
  test("apiV1SqllabExecutePost", () => {
    const body: api.ExecutePayloadSchema = undefined
    return expect(instance.apiV1SqllabExecutePost(body, {})).resolves.toBe(null)
  })
  test("apiV1SqllabExportClientIdGet", () => {
    const clientId: number = 56
    return expect(instance.apiV1SqllabExportClientIdGet(clientId, {})).resolves.toBe(null)
  })
  test("apiV1SqllabResultsGet", () => {
    const q: SqlLabGetResultsSchema = undefined
    return expect(instance.apiV1SqllabResultsGet(q, {})).resolves.toBe(null)
  })
})

describe("SecurityApi", () => {
  let instance: api.SecurityApi
  beforeEach(function() {
    instance = new api.SecurityApi(config)
  });

  test("apiV1SecurityCsrfTokenGet", () => {
    return expect(instance.apiV1SecurityCsrfTokenGet({})).resolves.toBe(null)
  })
  test("apiV1SecurityGuestTokenPost", () => {
    const body: api.GuestTokenCreate = undefined
    return expect(instance.apiV1SecurityGuestTokenPost(body, {})).resolves.toBe(null)
  })
  test("apiV1SecurityLoginPost", () => {
    const body: api.SecurityLoginBody = undefined
    return expect(instance.apiV1SecurityLoginPost(body, {})).resolves.toBe(null)
  })
  test("apiV1SecurityRefreshPost", () => {
    return expect(instance.apiV1SecurityRefreshPost({})).resolves.toBe(null)
  })
})

describe("TagsApi", () => {
  let instance: api.TagsApi
  beforeEach(function() {
    instance = new api.TagsApi(config)
  });

  test("apiV1TagDelete", () => {
    const q: DeleteTagsSchema = undefined
    return expect(instance.apiV1TagDelete(q, {})).resolves.toBe(null)
  })
  test("apiV1TagGet", () => {
    const q: GetListSchema = undefined
    return expect(instance.apiV1TagGet(q, {})).resolves.toBe(null)
  })
  test("apiV1TagGetObjectsGet", () => {
    const tagId: number = 56
    return expect(instance.apiV1TagGetObjectsGet(tagId, {})).resolves.toBe(null)
  })
  test("apiV1TagInfoGet", () => {
    const q: GetInfoSchema = undefined
    return expect(instance.apiV1TagInfoGet(q, {})).resolves.toBe(null)
  })
  test("apiV1TagObjectTypeObjectIdPost", () => {
    const body: api.ObjectTypeObjectIdBody = undefined
    const objectType: number = 56
    const objectId: number = 56
    return expect(instance.apiV1TagObjectTypeObjectIdPost(body, objectType, objectId, {})).resolves.toBe(null)
  })
  test("apiV1TagObjectTypeObjectIdTagDelete", () => {
    const tag: string = "tag_example"
    const objectType: number = 56
    const objectId: number = 56
    return expect(instance.apiV1TagObjectTypeObjectIdTagDelete(tag, objectType, objectId, {})).resolves.toBe(null)
  })
  test("apiV1TagPkDelete", () => {
    const pk: number = 56
    return expect(instance.apiV1TagPkDelete(pk, {})).resolves.toBe(null)
  })
  test("apiV1TagPkGet", () => {
    const pk: number = 56
    const q: GetItemSchema = undefined
    return expect(instance.apiV1TagPkGet(pk, q, {})).resolves.toBe(null)
  })
  test("apiV1TagPkPut", () => {
    const body: api.TagRestApiPut = undefined
    const pk: number = 56
    return expect(instance.apiV1TagPkPut(body, pk, {})).resolves.toBe(null)
  })
  test("apiV1TagPost", () => {
    const body: api.TagRestApiPost = undefined
    return expect(instance.apiV1TagPost(body, {})).resolves.toBe(null)
  })
  test("apiV1TagRelatedColumnNameGet", () => {
    const columnName: string = "columnName_example"
    const q: GetRelatedSchema = undefined
    return expect(instance.apiV1TagRelatedColumnNameGet(columnName, q, {})).resolves.toBe(null)
  })
})

