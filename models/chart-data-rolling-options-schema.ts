/* tslint:disable */
/* eslint-disable */
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/**
 * 
 * @export
 * @interface ChartDataRollingOptionsSchema
 */
export interface ChartDataRollingOptionsSchema {
    /**
     * Should the label be at the center of the window. Default: `false`
     * @type {boolean}
     * @memberof ChartDataRollingOptionsSchema
     */
    center?: boolean;
    /**
     * The minimum amount of periods required for a row to be included in the result set.
     * @type {number}
     * @memberof ChartDataRollingOptionsSchema
     */
    minPeriods?: number;
    /**
     * Type of rolling window. Any numpy function will work.
     * @type {string}
     * @memberof ChartDataRollingOptionsSchema
     */
    rollingType: ChartDataRollingOptionsSchemaRollingTypeEnum;
    /**
     * Optional options to pass to rolling method. Needed for e.g. quantile operation.
     * @type {any}
     * @memberof ChartDataRollingOptionsSchema
     */
    rollingTypeOptions?: any;
    /**
     * Type of window function. See [SciPy window functions](https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows) for more details. Some window functions require passing additional parameters to `rolling_type_options`. For instance, to use `gaussian`, the parameter `std` needs to be provided.
     * @type {string}
     * @memberof ChartDataRollingOptionsSchema
     */
    winType?: ChartDataRollingOptionsSchemaWinTypeEnum;
    /**
     * Size of the rolling window in days.
     * @type {number}
     * @memberof ChartDataRollingOptionsSchema
     */
    window: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ChartDataRollingOptionsSchemaRollingTypeEnum {
    Average = 'average',
    Argmin = 'argmin',
    Argmax = 'argmax',
    Cumsum = 'cumsum',
    Cumprod = 'cumprod',
    Max = 'max',
    Mean = 'mean',
    Median = 'median',
    Nansum = 'nansum',
    Nanmin = 'nanmin',
    Nanmax = 'nanmax',
    Nanmean = 'nanmean',
    Nanmedian = 'nanmedian',
    Nanpercentile = 'nanpercentile',
    Min = 'min',
    Percentile = 'percentile',
    Prod = 'prod',
    Product = 'product',
    Std = 'std',
    Sum = 'sum',
    Var = 'var'
}
/**
    * @export
    * @enum {string}
    */
export enum ChartDataRollingOptionsSchemaWinTypeEnum {
    Boxcar = 'boxcar',
    Triang = 'triang',
    Blackman = 'blackman',
    Hamming = 'hamming',
    Bartlett = 'bartlett',
    Parzen = 'parzen',
    Bohman = 'bohman',
    Blackmanharris = 'blackmanharris',
    Nuttall = 'nuttall',
    Barthann = 'barthann',
    Kaiser = 'kaiser',
    Gaussian = 'gaussian',
    GeneralGaussian = 'general_gaussian',
    Slepian = 'slepian',
    Exponential = 'exponential'
}

