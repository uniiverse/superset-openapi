/* tslint:disable */
/* eslint-disable */
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AnnotationLayer } from './annotation-layer';
import { ChartDataDatasource } from './chart-data-datasource';
import { ChartDataExtras } from './chart-data-extras';
import { ChartDataFilter } from './chart-data-filter';
import { ChartDataPostProcessingOperation } from './chart-data-post-processing-operation';
/**
 * 
 * @export
 * @interface ChartDataQueryObject
 */
export interface ChartDataQueryObject {
    /**
     * Annotation layers to apply to chart
     * @type {Array<AnnotationLayer>}
     * @memberof ChartDataQueryObject
     */
    annotationLayers?: Array<AnnotationLayer> | null;
    /**
     * A mapping of temporal extras that have been applied to the query
     * @type {any}
     * @memberof ChartDataQueryObject
     */
    appliedTimeExtras?: any | null;
    /**
     * Add fetch values predicate (where clause) to query if defined in datasource
     * @type {boolean}
     * @memberof ChartDataQueryObject
     */
    applyFetchValuesPredicate?: boolean | null;
    /**
     * Columns which to select in the query.
     * @type {Array<any>}
     * @memberof ChartDataQueryObject
     */
    columns?: Array<any> | null;
    /**
     * 
     * @type {ChartDataDatasource}
     * @memberof ChartDataQueryObject
     */
    datasource?: ChartDataDatasource | null;
    /**
     * Starting point for time grain counting on legacy Druid datasources. Used to change e.g. Monday/Sunday first-day-of-week. This field is deprecated and should be passed to `extras` as `druid_time_origin`.
     * @type {string}
     * @memberof ChartDataQueryObject
     */
    druidTimeOrigin?: string | null;
    /**
     * Extra parameters to add to the query.
     * @type {ChartDataExtras}
     * @memberof ChartDataQueryObject
     */
    extras?: ChartDataExtras | null;
    /**
     * 
     * @type {Array<ChartDataFilter>}
     * @memberof ChartDataQueryObject
     */
    filters?: Array<ChartDataFilter> | null;
    /**
     * Name of temporal column used for time filtering. For legacy Druid datasources this defines the time grain.
     * @type {string}
     * @memberof ChartDataQueryObject
     */
    granularity?: string | null;
    /**
     * Name of temporal column used for time filtering for SQL datasources. This field is deprecated, use `granularity` instead.
     * @type {string}
     * @memberof ChartDataQueryObject
     */
    granularitySqla?: string | null;
    /**
     * Columns by which to group the query. This field is deprecated, use `columns` instead.
     * @type {Array<any>}
     * @memberof ChartDataQueryObject
     */
    groupby?: Array<any> | null;
    /**
     * HAVING clause to be added to aggregate queries using AND operator. This field is deprecated and should be passed to `extras`.
     * @type {string}
     * @memberof ChartDataQueryObject
     */
    having?: string | null;
    /**
     * HAVING filters to be added to legacy Druid datasource queries. This field is deprecated and should be passed to `extras` as `having_druid`.
     * @type {Array<ChartDataFilter>}
     * @memberof ChartDataQueryObject
     */
    havingFilters?: Array<ChartDataFilter> | null;
    /**
     * Should the rowcount of the actual query be returned
     * @type {boolean}
     * @memberof ChartDataQueryObject
     */
    isRowcount?: boolean | null;
    /**
     * Is the `query_object` a timeseries.
     * @type {boolean}
     * @memberof ChartDataQueryObject
     */
    isTimeseries?: boolean | null;
    /**
     * Aggregate expressions. Metrics can be passed as both references to datasource metrics (strings), or ad-hoc metricswhich are defined only within the query object. See `ChartDataAdhocMetricSchema` for the structure of ad-hoc metrics.
     * @type {Array<any>}
     * @memberof ChartDataQueryObject
     */
    metrics?: Array<any> | null;
    /**
     * Reverse order. Default: `false`
     * @type {boolean}
     * @memberof ChartDataQueryObject
     */
    orderDesc?: boolean | null;
    /**
     * Expects a list of lists where the first element is the column name which to sort by, and the second element is a boolean.
     * @type {Array<any>}
     * @memberof ChartDataQueryObject
     */
    orderby?: Array<any> | null;
    /**
     * Post processing operations to be applied to the result set. Operations are applied to the result set in sequential order.
     * @type {Array<ChartDataPostProcessingOperation>}
     * @memberof ChartDataQueryObject
     */
    postProcessing?: Array<ChartDataPostProcessingOperation> | null;
    /**
     * 
     * @type {any}
     * @memberof ChartDataQueryObject
     */
    resultType?: any | null;
    /**
     * Maximum row count (0=disabled). Default: `config[\"ROW_LIMIT\"]`
     * @type {number}
     * @memberof ChartDataQueryObject
     */
    rowLimit?: number | null;
    /**
     * Number of rows to skip. Default: `0`
     * @type {number}
     * @memberof ChartDataQueryObject
     */
    rowOffset?: number | null;
    /**
     * Columns to use when limiting series count. All columns must be present in the `columns` property. Requires `series_limit` and `series_limit_metric` to be set.
     * @type {Array<any>}
     * @memberof ChartDataQueryObject
     */
    seriesColumns?: Array<any> | null;
    /**
     * Maximum number of series. Requires `series` and `series_limit_metric` to be set.
     * @type {number}
     * @memberof ChartDataQueryObject
     */
    seriesLimit?: number | null;
    /**
     * Metric used to limit timeseries queries by. Requires `series` and `series_limit` to be set.
     * @type {any}
     * @memberof ChartDataQueryObject
     */
    seriesLimitMetric?: any | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChartDataQueryObject
     */
    timeOffsets?: Array<string> | null;
    /**
     * A time rage, either expressed as a colon separated string `since : until` or human readable freeform. Valid formats for `since` and `until` are:  - ISO 8601 - X days/years/hours/day/year/weeks - X days/years/hours/day/year/weeks ago - X days/years/hours/day/year/weeks from now  Additionally, the following freeform can be used:  - Last day - Last week - Last month - Last quarter - Last year - No filter - Last X seconds/minutes/hours/days/weeks/months/years - Next X seconds/minutes/hours/days/weeks/months/years 
     * @type {string}
     * @memberof ChartDataQueryObject
     */
    timeRange?: string | null;
    /**
     * A human-readable date/time string. Please refer to [parsdatetime](https://github.com/bear/parsedatetime) documentation for details on valid values.
     * @type {string}
     * @memberof ChartDataQueryObject
     */
    timeShift?: string | null;
    /**
     * Maximum row count for timeseries queries. This field is deprecated, use `series_limit` instead.Default: `0`
     * @type {number}
     * @memberof ChartDataQueryObject
     */
    timeseriesLimit?: number | null;
    /**
     * Metric used to limit timeseries queries by. This field is deprecated, use `series_limit_metric` instead.
     * @type {any}
     * @memberof ChartDataQueryObject
     */
    timeseriesLimitMetric?: any | null;
    /**
     * Optional query parameters passed to a dashboard or Explore view
     * @type {{ [key: string]: string; }}
     * @memberof ChartDataQueryObject
     */
    urlParams?: { [key: string]: string; } | null;
    /**
     * WHERE clause to be added to queries using AND operator.This field is deprecated and should be passed to `extras`.
     * @type {string}
     * @memberof ChartDataQueryObject
     */
    where?: string | null;
}
