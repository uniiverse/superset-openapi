"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChartsApi = exports.ChartsApiFactory = exports.ChartsApiFp = exports.ChartsApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * ChartsApi - axios parameter creator
 * @export
 */
var ChartsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Takes a query context cache key and returns payload data response for the given query.
         * @param {string} cacheKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataCacheKeyGet: function (cacheKey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'cacheKey' is not null or undefined
                    if (cacheKey === null || cacheKey === undefined) {
                        throw new base_1.RequiredError('cacheKey', 'Required parameter cacheKey was null or undefined when calling apiV1ChartDataCacheKeyGet.');
                    }
                    localVarPath = "/api/v1/chart/data/{cache_key}"
                        .replace("{".concat("cache_key", "}"), encodeURIComponent(String(cacheKey)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Takes a query context constructed in the client and returns payload data response for the given query.
         * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataPost: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling apiV1ChartDataPost.');
                    }
                    localVarPath = "/api/v1/chart/data";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication jwt required
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes multiple Charts in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDelete: function (q, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/chart/";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication jwt required
                    if (q !== undefined) {
                        localVarQueryParameter['q'] = q;
                    }
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Exports multiple charts and downloads them as YAML files
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartExportGet: function (q, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/chart/export/";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication jwt required
                    if (q !== undefined) {
                        localVarQueryParameter['q'] = q;
                    }
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartFavoriteStatusGet: function (q, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/chart/favorite_status/";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication jwt required
                    if (q !== undefined) {
                        localVarQueryParameter['q'] = q;
                    }
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartGet: function (q, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/chart/";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication jwt required
                    if (q !== undefined) {
                        localVarQueryParameter['q'] = q;
                    }
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartImportPostForm: function (formData, overwrite, passwords, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'formData' is not null or undefined
                    if (formData === null || formData === undefined) {
                        throw new base_1.RequiredError('formData', 'Required parameter formData was null or undefined when calling apiV1ChartImportPostForm.');
                    }
                    // verify required parameter 'overwrite' is not null or undefined
                    if (overwrite === null || overwrite === undefined) {
                        throw new base_1.RequiredError('overwrite', 'Required parameter overwrite was null or undefined when calling apiV1ChartImportPostForm.');
                    }
                    // verify required parameter 'passwords' is not null or undefined
                    if (passwords === null || passwords === undefined) {
                        throw new base_1.RequiredError('passwords', 'Required parameter passwords was null or undefined when calling apiV1ChartImportPostForm.');
                    }
                    localVarPath = "/api/v1/chart/import/";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarFormParams = new FormData();
                    // authentication jwt required
                    if (formData !== undefined) {
                        localVarFormParams.append('formData', formData);
                    }
                    if (overwrite !== undefined) {
                        localVarFormParams.append('overwrite', overwrite);
                    }
                    if (passwords !== undefined) {
                        localVarFormParams.append('passwords', passwords);
                    }
                    localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = localVarFormParams;
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Several metadata information about chart API endpoints.
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartInfoGet: function (q, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/chart/_info";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication jwt required
                    if (q !== undefined) {
                        localVarQueryParameter['q'] = q;
                    }
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Compute and cache a screenshot.
         * @param {number} pk
         * @param {ScreenshotQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkCacheScreenshotGet: function (pk, q, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'pk' is not null or undefined
                    if (pk === null || pk === undefined) {
                        throw new base_1.RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkCacheScreenshotGet.');
                    }
                    localVarPath = "/api/v1/chart/{pk}/cache_screenshot/"
                        .replace("{".concat("pk", "}"), encodeURIComponent(String(pk)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication jwt required
                    if (q !== undefined) {
                        localVarQueryParameter['q'] = q;
                    }
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
         * @param {number} pk The chart ID
         * @param {string} [format] The format in which the data should be returned
         * @param {string} [type] The type in which the data should be returned
         * @param {boolean} [force] Should the queries be forced to load from the source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDataGet: function (pk, format, type, force, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'pk' is not null or undefined
                    if (pk === null || pk === undefined) {
                        throw new base_1.RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkDataGet.');
                    }
                    localVarPath = "/api/v1/chart/{pk}/data/"
                        .replace("{".concat("pk", "}"), encodeURIComponent(String(pk)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication jwt required
                    if (format !== undefined) {
                        localVarQueryParameter['format'] = format;
                    }
                    if (type !== undefined) {
                        localVarQueryParameter['type'] = type;
                    }
                    if (force !== undefined) {
                        localVarQueryParameter['force'] = force;
                    }
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Deletes a Chart.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDelete: function (pk, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'pk' is not null or undefined
                    if (pk === null || pk === undefined) {
                        throw new base_1.RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkDelete.');
                    }
                    localVarPath = "/api/v1/chart/{pk}"
                        .replace("{".concat("pk", "}"), encodeURIComponent(String(pk)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get a chart detail information.
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkGet: function (pk, q, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'pk' is not null or undefined
                    if (pk === null || pk === undefined) {
                        throw new base_1.RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkGet.');
                    }
                    localVarPath = "/api/v1/chart/{pk}"
                        .replace("{".concat("pk", "}"), encodeURIComponent(String(pk)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication jwt required
                    if (q !== undefined) {
                        localVarQueryParameter['q'] = q;
                    }
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Changes a Chart.
         * @param {ChartRestApiPut} body Chart schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkPut: function (body, pk, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling apiV1ChartPkPut.');
                    }
                    // verify required parameter 'pk' is not null or undefined
                    if (pk === null || pk === undefined) {
                        throw new base_1.RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkPut.');
                    }
                    localVarPath = "/api/v1/chart/{pk}"
                        .replace("{".concat("pk", "}"), encodeURIComponent(String(pk)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication jwt required
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get a computed screenshot from cache.
         * @param {number} pk
         * @param {string} digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkScreenshotDigestGet: function (pk, digest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'pk' is not null or undefined
                    if (pk === null || pk === undefined) {
                        throw new base_1.RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkScreenshotDigestGet.');
                    }
                    // verify required parameter 'digest' is not null or undefined
                    if (digest === null || digest === undefined) {
                        throw new base_1.RequiredError('digest', 'Required parameter digest was null or undefined when calling apiV1ChartPkScreenshotDigestGet.');
                    }
                    localVarPath = "/api/v1/chart/{pk}/screenshot/{digest}/"
                        .replace("{".concat("pk", "}"), encodeURIComponent(String(pk)))
                        .replace("{".concat("digest", "}"), encodeURIComponent(String(digest)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Compute or get already computed chart thumbnail from cache.
         * @param {number} pk
         * @param {string} digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkThumbnailDigestGet: function (pk, digest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'pk' is not null or undefined
                    if (pk === null || pk === undefined) {
                        throw new base_1.RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkThumbnailDigestGet.');
                    }
                    // verify required parameter 'digest' is not null or undefined
                    if (digest === null || digest === undefined) {
                        throw new base_1.RequiredError('digest', 'Required parameter digest was null or undefined when calling apiV1ChartPkThumbnailDigestGet.');
                    }
                    localVarPath = "/api/v1/chart/{pk}/thumbnail/{digest}/"
                        .replace("{".concat("pk", "}"), encodeURIComponent(String(pk)))
                        .replace("{".concat("digest", "}"), encodeURIComponent(String(digest)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Create a new Chart.
         * @param {ChartRestApiPost} body Chart schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPost: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling apiV1ChartPost.');
                    }
                    localVarPath = "/api/v1/chart/";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication jwt required
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartRelatedColumnNameGet: function (columnName, q, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'columnName' is not null or undefined
                    if (columnName === null || columnName === undefined) {
                        throw new base_1.RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1ChartRelatedColumnNameGet.');
                    }
                    localVarPath = "/api/v1/chart/related/{column_name}"
                        .replace("{".concat("column_name", "}"), encodeURIComponent(String(columnName)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication jwt required
                    if (q !== undefined) {
                        localVarQueryParameter['q'] = q;
                    }
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ChartsApiAxiosParamCreator = ChartsApiAxiosParamCreator;
/**
 * ChartsApi - functional programming interface
 * @export
 */
var ChartsApiFp = function (configuration) {
    return {
        /**
         * Takes a query context cache key and returns payload data response for the given query.
         * @param {string} cacheKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataCacheKeyGet: function (cacheKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartDataCacheKeyGet(cacheKey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Takes a query context constructed in the client and returns payload data response for the given query.
         * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartDataPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes multiple Charts in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDelete: function (q, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartDelete(q, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Exports multiple charts and downloads them as YAML files
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartExportGet: function (q, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartExportGet(q, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartFavoriteStatusGet: function (q, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartFavoriteStatusGet(q, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartGet: function (q, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartGet(q, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartImportPostForm: function (formData, overwrite, passwords, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartImportPostForm(formData, overwrite, passwords, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Several metadata information about chart API endpoints.
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartInfoGet: function (q, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartInfoGet(q, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Compute and cache a screenshot.
         * @param {number} pk
         * @param {ScreenshotQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkCacheScreenshotGet: function (pk, q, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartPkCacheScreenshotGet(pk, q, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
         * @param {number} pk The chart ID
         * @param {string} [format] The format in which the data should be returned
         * @param {string} [type] The type in which the data should be returned
         * @param {boolean} [force] Should the queries be forced to load from the source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDataGet: function (pk, format, type, force, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartPkDataGet(pk, format, type, force, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a Chart.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDelete: function (pk, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartPkDelete(pk, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Get a chart detail information.
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkGet: function (pk, q, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartPkGet(pk, q, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Changes a Chart.
         * @param {ChartRestApiPut} body Chart schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkPut: function (body, pk, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartPkPut(body, pk, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Get a computed screenshot from cache.
         * @param {number} pk
         * @param {string} digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkScreenshotDigestGet: function (pk, digest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartPkScreenshotDigestGet(pk, digest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Compute or get already computed chart thumbnail from cache.
         * @param {number} pk
         * @param {string} digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkThumbnailDigestGet: function (pk, digest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartPkThumbnailDigestGet(pk, digest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Create a new Chart.
         * @param {ChartRestApiPost} body Chart schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartRelatedColumnNameGet: function (columnName, q, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ChartsApiAxiosParamCreator)(configuration).apiV1ChartRelatedColumnNameGet(columnName, q, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ChartsApiFp = ChartsApiFp;
/**
 * ChartsApi - factory interface
 * @export
 */
var ChartsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Takes a query context cache key and returns payload data response for the given query.
         * @param {string} cacheKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataCacheKeyGet: function (cacheKey, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartDataCacheKeyGet(cacheKey, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Takes a query context constructed in the client and returns payload data response for the given query.
         * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartDataPost(body, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Deletes multiple Charts in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDelete: function (q, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartDelete(q, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Exports multiple charts and downloads them as YAML files
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartExportGet: function (q, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartExportGet(q, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartFavoriteStatusGet: function (q, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartFavoriteStatusGet(q, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartGet: function (q, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartGet(q, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartImportPostForm: function (formData, overwrite, passwords, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartImportPostForm(formData, overwrite, passwords, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Several metadata information about chart API endpoints.
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartInfoGet: function (q, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartInfoGet(q, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Compute and cache a screenshot.
         * @param {number} pk
         * @param {ScreenshotQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkCacheScreenshotGet: function (pk, q, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartPkCacheScreenshotGet(pk, q, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
         * @param {number} pk The chart ID
         * @param {string} [format] The format in which the data should be returned
         * @param {string} [type] The type in which the data should be returned
         * @param {boolean} [force] Should the queries be forced to load from the source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDataGet: function (pk, format, type, force, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartPkDataGet(pk, format, type, force, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Deletes a Chart.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDelete: function (pk, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartPkDelete(pk, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Get a chart detail information.
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkGet: function (pk, q, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartPkGet(pk, q, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Changes a Chart.
         * @param {ChartRestApiPut} body Chart schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkPut: function (body, pk, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartPkPut(body, pk, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Get a computed screenshot from cache.
         * @param {number} pk
         * @param {string} digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkScreenshotDigestGet: function (pk, digest, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartPkScreenshotDigestGet(pk, digest, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Compute or get already computed chart thumbnail from cache.
         * @param {number} pk
         * @param {string} digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkThumbnailDigestGet: function (pk, digest, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartPkThumbnailDigestGet(pk, digest, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Create a new Chart.
         * @param {ChartRestApiPost} body Chart schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartPost(body, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartRelatedColumnNameGet: function (columnName, q, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.ChartsApiFp)(configuration).apiV1ChartRelatedColumnNameGet(columnName, q, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
    };
};
exports.ChartsApiFactory = ChartsApiFactory;
/**
 * ChartsApi - object-oriented interface
 * @export
 * @class ChartsApi
 * @extends {BaseAPI}
 */
var ChartsApi = /** @class */ (function (_super) {
    __extends(ChartsApi, _super);
    function ChartsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Takes a query context cache key and returns payload data response for the given query.
     * @param {string} cacheKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartDataCacheKeyGet = function (cacheKey, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartDataCacheKeyGet(cacheKey, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Takes a query context constructed in the client and returns payload data response for the given query.
     * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartDataPost = function (body, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartDataPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Deletes multiple Charts in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartDelete = function (q, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartDelete(q, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Exports multiple charts and downloads them as YAML files
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartExportGet = function (q, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartExportGet(q, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Check favorited dashboards for current user
     * @param {GetFavStarIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartFavoriteStatusGet = function (q, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartFavoriteStatusGet(q, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartGet = function (q, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartGet(q, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartImportPostForm = function (formData, overwrite, passwords, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartImportPostForm(formData, overwrite, passwords, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Several metadata information about chart API endpoints.
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartInfoGet = function (q, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartInfoGet(q, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Compute and cache a screenshot.
     * @param {number} pk
     * @param {ScreenshotQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartPkCacheScreenshotGet = function (pk, q, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkCacheScreenshotGet(pk, q, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
     * @param {number} pk The chart ID
     * @param {string} [format] The format in which the data should be returned
     * @param {string} [type] The type in which the data should be returned
     * @param {boolean} [force] Should the queries be forced to load from the source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartPkDataGet = function (pk, format, type, force, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkDataGet(pk, format, type, force, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Deletes a Chart.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartPkDelete = function (pk, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkDelete(pk, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Get a chart detail information.
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartPkGet = function (pk, q, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkGet(pk, q, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Changes a Chart.
     * @param {ChartRestApiPut} body Chart schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartPkPut = function (body, pk, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkPut(body, pk, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Get a computed screenshot from cache.
     * @param {number} pk
     * @param {string} digest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartPkScreenshotDigestGet = function (pk, digest, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkScreenshotDigestGet(pk, digest, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Compute or get already computed chart thumbnail from cache.
     * @param {number} pk
     * @param {string} digest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartPkThumbnailDigestGet = function (pk, digest, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkThumbnailDigestGet(pk, digest, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Create a new Chart.
     * @param {ChartRestApiPost} body Chart schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartPost = function (body, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    ChartsApi.prototype.apiV1ChartRelatedColumnNameGet = function (columnName, q, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.ChartsApiFp)(this.configuration).apiV1ChartRelatedColumnNameGet(columnName, q, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    return ChartsApi;
}(base_1.BaseAPI));
exports.ChartsApi = ChartsApi;
