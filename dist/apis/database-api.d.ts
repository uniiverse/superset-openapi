/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { DatabaseFunctionNamesResponse } from '../models';
import { DatabaseRelatedObjectsResponse } from '../models';
import { DatabaseRestApiPost } from '../models';
import { DatabaseRestApiPut } from '../models';
import { DatabaseSchemasQuerySchema } from '../models';
import { DatabaseTablesQuerySchema } from '../models';
import { DatabaseTestConnectionSchema } from '../models';
import { DatabaseValidateParametersSchema } from '../models';
import { GetExportIdsSchema } from '../models';
import { GetInfoSchema } from '../models';
import { GetListSchema } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse20027 } from '../models';
import { InlineResponse20028 } from '../models';
import { InlineResponse20029 } from '../models';
import { InlineResponse20030 } from '../models';
import { InlineResponse20031 } from '../models';
import { InlineResponse2018 } from '../models';
import { InlineResponse400 } from '../models';
import { SchemasResponseSchema } from '../models';
import { SelectStarResponseSchema } from '../models';
import { TableExtraMetadataResponseSchema } from '../models';
import { TableMetadataResponseSchema } from '../models';
import { ValidateSQLRequest } from '../models';
/**
 * DatabaseApi - axios parameter creator
 * @export
 */
export declare const DatabaseApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get names of databases currently available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseAvailableGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Download database(s) and associated dataset(s) as a zip file
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseExportGet: (q?: GetExportIdsSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of models
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseGet: (q?: GetListSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseImportPostForm: (formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get metadata information about this API resource
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseInfoGet: (q?: GetInfoSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a Database.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkDelete: (pk: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get function names supported by a database
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkFunctionNamesGet: (pk: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a database
     * @param {number} pk The database id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkGet: (pk: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Changes a Database.
     * @param {DatabaseRestApiPut} body Database schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkPut: (body: DatabaseRestApiPut, pk: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get charts and dashboards count associated to a database
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkRelatedObjectsGet: (pk: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all schemas from a database
     * @param {number} pk The database id
     * @param {DatabaseSchemasQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkSchemasGet: (pk: number, q?: DatabaseSchemasQuerySchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get database select star for table
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkSelectStarTableNameGet: (pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get database select star for table
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkSelectStarTableNameSchemaNameGet: (pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a SSH Tunnel.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkSshTunnelDelete: (pk: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Response depends on each DB engine spec normally focused on partitions
     * @summary Get table extra metadata
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkTableExtraTableNameSchemaNameGet: (pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get database table metadata
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkTableTableNameSchemaNameGet: (pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of tables for given database
     * @param {number} pk The database id
     * @param {DatabaseTablesQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkTablesGet: (pk: number, q?: DatabaseTablesQuerySchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Validates arbitrary SQL.
     * @summary Validates that arbitrary sql is acceptable for the given database
     * @param {ValidateSQLRequest} body Validate SQL request
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkValidateSqlPost: (body: ValidateSQLRequest, pk: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new Database.
     * @param {DatabaseRestApiPost} body Database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePost: (body: DatabaseRestApiPost, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Tests a database connection
     * @param {DatabaseTestConnectionSchema} body Database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseTestConnectionPost: (body: DatabaseTestConnectionSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Validates parameters used to connect to a database
     * @param {DatabaseValidateParametersSchema} body DB-specific parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseValidateParametersPost: (body: DatabaseValidateParametersSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DatabaseApi - functional programming interface
 * @export
 */
export declare const DatabaseApiFp: (configuration?: Configuration) => {
    /**
     * Get names of databases currently available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseAvailableGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse20028>>>>;
    /**
     * Download database(s) and associated dataset(s) as a zip file
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>>;
    /**
     * Get a list of models
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20027>>>;
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>>;
    /**
     * Get metadata information about this API resource
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>>;
    /**
     * Deletes a Database.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkDelete(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>>;
    /**
     * Get function names supported by a database
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkFunctionNamesGet(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DatabaseFunctionNamesResponse>>>;
    /**
     * Get a database
     * @param {number} pk The database id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkGet(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>>;
    /**
     * Changes a Database.
     * @param {DatabaseRestApiPut} body Database schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkPut(body: DatabaseRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20029>>>;
    /**
     * Get charts and dashboards count associated to a database
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkRelatedObjectsGet(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DatabaseRelatedObjectsResponse>>>;
    /**
     * Get all schemas from a database
     * @param {number} pk The database id
     * @param {DatabaseSchemasQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkSchemasGet(pk: number, q?: DatabaseSchemasQuerySchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SchemasResponseSchema>>>;
    /**
     * Get database select star for table
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkSelectStarTableNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SelectStarResponseSchema>>>;
    /**
     * Get database select star for table
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SelectStarResponseSchema>>>;
    /**
     * Deletes a SSH Tunnel.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkSshTunnelDelete(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>>;
    /**
     * Response depends on each DB engine spec normally focused on partitions
     * @summary Get table extra metadata
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TableExtraMetadataResponseSchema>>>;
    /**
     * Get database table metadata
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkTableTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TableMetadataResponseSchema>>>;
    /**
     *
     * @summary Get a list of tables for given database
     * @param {number} pk The database id
     * @param {DatabaseTablesQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkTablesGet(pk: number, q?: DatabaseTablesQuerySchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20030>>>;
    /**
     * Validates arbitrary SQL.
     * @summary Validates that arbitrary sql is acceptable for the given database
     * @param {ValidateSQLRequest} body Validate SQL request
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkValidateSqlPost(body: ValidateSQLRequest, pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20031>>>;
    /**
     * Create a new Database.
     * @param {DatabaseRestApiPost} body Database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePost(body: DatabaseRestApiPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2018>>>;
    /**
     * Tests a database connection
     * @param {DatabaseTestConnectionSchema} body Database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseTestConnectionPost(body: DatabaseTestConnectionSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>>;
    /**
     * Validates parameters used to connect to a database
     * @param {DatabaseValidateParametersSchema} body DB-specific parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseValidateParametersPost(body: DatabaseValidateParametersSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>>;
};
/**
 * DatabaseApi - factory interface
 * @export
 */
export declare const DatabaseApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get names of databases currently available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseAvailableGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse20028>>>;
    /**
     * Download database(s) and associated dataset(s) as a zip file
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>>;
    /**
     * Get a list of models
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20027>>;
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Get metadata information about this API resource
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>>;
    /**
     * Deletes a Database.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Get function names supported by a database
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkFunctionNamesGet(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<DatabaseFunctionNamesResponse>>;
    /**
     * Get a database
     * @param {number} pk The database id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkGet(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>>;
    /**
     * Changes a Database.
     * @param {DatabaseRestApiPut} body Database schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkPut(body: DatabaseRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20029>>;
    /**
     * Get charts and dashboards count associated to a database
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkRelatedObjectsGet(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<DatabaseRelatedObjectsResponse>>;
    /**
     * Get all schemas from a database
     * @param {number} pk The database id
     * @param {DatabaseSchemasQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkSchemasGet(pk: number, q?: DatabaseSchemasQuerySchema, options?: AxiosRequestConfig): Promise<AxiosResponse<SchemasResponseSchema>>;
    /**
     * Get database select star for table
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkSelectStarTableNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SelectStarResponseSchema>>;
    /**
     * Get database select star for table
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SelectStarResponseSchema>>;
    /**
     * Deletes a SSH Tunnel.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkSshTunnelDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Response depends on each DB engine spec normally focused on partitions
     * @summary Get table extra metadata
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TableExtraMetadataResponseSchema>>;
    /**
     * Get database table metadata
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkTableTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TableMetadataResponseSchema>>;
    /**
     *
     * @summary Get a list of tables for given database
     * @param {number} pk The database id
     * @param {DatabaseTablesQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkTablesGet(pk: number, q?: DatabaseTablesQuerySchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20030>>;
    /**
     * Validates arbitrary SQL.
     * @summary Validates that arbitrary sql is acceptable for the given database
     * @param {ValidateSQLRequest} body Validate SQL request
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePkValidateSqlPost(body: ValidateSQLRequest, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20031>>;
    /**
     * Create a new Database.
     * @param {DatabaseRestApiPost} body Database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabasePost(body: DatabaseRestApiPost, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2018>>;
    /**
     * Tests a database connection
     * @param {DatabaseTestConnectionSchema} body Database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseTestConnectionPost(body: DatabaseTestConnectionSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Validates parameters used to connect to a database
     * @param {DatabaseValidateParametersSchema} body DB-specific parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DatabaseValidateParametersPost(body: DatabaseValidateParametersSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
};
/**
 * DatabaseApi - object-oriented interface
 * @export
 * @class DatabaseApi
 * @extends {BaseAPI}
 */
export declare class DatabaseApi extends BaseAPI {
    /**
     * Get names of databases currently available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseAvailableGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse20028>>>;
    /**
     * Download database(s) and associated dataset(s) as a zip file
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>>;
    /**
     * Get a list of models
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20027>>;
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Get metadata information about this API resource
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>>;
    /**
     * Deletes a Database.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Get function names supported by a database
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkFunctionNamesGet(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<DatabaseFunctionNamesResponse>>;
    /**
     * Get a database
     * @param {number} pk The database id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkGet(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>>;
    /**
     * Changes a Database.
     * @param {DatabaseRestApiPut} body Database schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkPut(body: DatabaseRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20029>>;
    /**
     * Get charts and dashboards count associated to a database
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkRelatedObjectsGet(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<DatabaseRelatedObjectsResponse>>;
    /**
     * Get all schemas from a database
     * @param {number} pk The database id
     * @param {DatabaseSchemasQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkSchemasGet(pk: number, q?: DatabaseSchemasQuerySchema, options?: AxiosRequestConfig): Promise<AxiosResponse<SchemasResponseSchema>>;
    /**
     * Get database select star for table
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkSelectStarTableNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SelectStarResponseSchema>>;
    /**
     * Get database select star for table
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SelectStarResponseSchema>>;
    /**
     * Deletes a SSH Tunnel.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkSshTunnelDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Response depends on each DB engine spec normally focused on partitions
     * @summary Get table extra metadata
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TableExtraMetadataResponseSchema>>;
    /**
     * Get database table metadata
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkTableTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TableMetadataResponseSchema>>;
    /**
     *
     * @summary Get a list of tables for given database
     * @param {number} pk The database id
     * @param {DatabaseTablesQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkTablesGet(pk: number, q?: DatabaseTablesQuerySchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20030>>;
    /**
     * Validates arbitrary SQL.
     * @summary Validates that arbitrary sql is acceptable for the given database
     * @param {ValidateSQLRequest} body Validate SQL request
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkValidateSqlPost(body: ValidateSQLRequest, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20031>>;
    /**
     * Create a new Database.
     * @param {DatabaseRestApiPost} body Database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePost(body: DatabaseRestApiPost, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2018>>;
    /**
     * Tests a database connection
     * @param {DatabaseTestConnectionSchema} body Database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseTestConnectionPost(body: DatabaseTestConnectionSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Validates parameters used to connect to a database
     * @param {DatabaseValidateParametersSchema} body DB-specific parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseValidateParametersPost(body: DatabaseValidateParametersSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
}
