/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CacheInvalidationRequestSchema } from '../models';
/**
 * CacheRestApiApi - axios parameter creator
 * @export
 */
export declare const CacheRestApiApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Takes a list of datasources, finds the associated cache records and invalidates them and removes the database records
     * @param {CacheInvalidationRequestSchema} body A list of datasources uuid or the tuples of database and datasource names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CachekeyInvalidatePost: (body: CacheInvalidationRequestSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CacheRestApiApi - functional programming interface
 * @export
 */
export declare const CacheRestApiApiFp: (configuration?: Configuration) => {
    /**
     * Takes a list of datasources, finds the associated cache records and invalidates them and removes the database records
     * @param {CacheInvalidationRequestSchema} body A list of datasources uuid or the tuples of database and datasource names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CachekeyInvalidatePost(body: CacheInvalidationRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
};
/**
 * CacheRestApiApi - factory interface
 * @export
 */
export declare const CacheRestApiApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Takes a list of datasources, finds the associated cache records and invalidates them and removes the database records
     * @param {CacheInvalidationRequestSchema} body A list of datasources uuid or the tuples of database and datasource names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CachekeyInvalidatePost(body: CacheInvalidationRequestSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
};
/**
 * CacheRestApiApi - object-oriented interface
 * @export
 * @class CacheRestApiApi
 * @extends {BaseAPI}
 */
export declare class CacheRestApiApi extends BaseAPI {
    /**
     * Takes a list of datasources, finds the associated cache records and invalidates them and removes the database records
     * @param {CacheInvalidationRequestSchema} body A list of datasources uuid or the tuples of database and datasource names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CacheRestApiApi
     */
    apiV1CachekeyInvalidatePost(body: CacheInvalidationRequestSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
}
