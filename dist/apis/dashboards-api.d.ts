/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { DashboardRestApiPost } from '../models';
import { DashboardRestApiPut } from '../models';
import { EmbeddedDashboardConfig } from '../models';
import { GetDeleteIdsSchema } from '../models';
import { GetExportIdsSchema } from '../models';
import { GetFavStarIdsSchema } from '../models';
import { GetInfoSchema } from '../models';
import { GetListSchema } from '../models';
import { GetRelatedSchema } from '../models';
import { InlineResponse20016 } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse20020 } from '../models';
import { InlineResponse20021 } from '../models';
import { InlineResponse20022 } from '../models';
import { InlineResponse20023 } from '../models';
import { InlineResponse20024 } from '../models';
import { InlineResponse2014 } from '../models';
import { InlineResponse400 } from '../models';
import { RelatedResponseSchema } from '../models';
import { ThumbnailQuerySchema } from '../models';
/**
 * DashboardsApi - axios parameter creator
 * @export
 */
export declare const DashboardsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes multiple Dashboards in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardDelete: (q?: GetDeleteIdsSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Exports multiple Dashboards and downloads them as YAML files.
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardExportGet: (q?: GetExportIdsSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check favorited dashboards for current user
     * @param {GetFavStarIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardFavoriteStatusGet: (q?: GetFavStarIdsSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardGet: (q?: GetListSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the chart definitions for a given dashboard
     * @param {string} idOrSlug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugChartsGet: (idOrSlug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
     * @param {string} idOrSlug Either the id of the dashboard, or its slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugDatasetsGet: (idOrSlug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Removes a dashboard's embedded configuration.
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugEmbeddedDelete: (idOrSlug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the dashboard's embedded configuration
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugEmbeddedGet: (idOrSlug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sets a dashboard's embedded configuration.
     * @param {EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugEmbeddedPost: (body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sets a dashboard's embedded configuration.
     * @param {EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugEmbeddedPut: (body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a dashboard detail information.
     * @param {string} idOrSlug Either the id of the dashboard, or its slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugGet: (idOrSlug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardImportPostForm: (formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Several metadata information about dashboard API endpoints.
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardInfoGet: (q?: GetInfoSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a Dashboard.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardPkDelete: (pk: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Changes a Dashboard.
     * @param {DashboardRestApiPut} body Dashboard schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardPkPut: (body: DashboardRestApiPut, pk: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Compute async or get already computed dashboard thumbnail from cache.
     * @param {number} pk
     * @param {string} digest A hex digest that makes this dashboard unique
     * @param {ThumbnailQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardPkThumbnailDigestGet: (pk: number, digest: string, q?: ThumbnailQuerySchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new Dashboard.
     * @param {DashboardRestApiPost} body Dashboard schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardPost: (body: DashboardRestApiPost, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of all possible owners for a dashboard.
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardRelatedColumnNameGet: (columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DashboardsApi - functional programming interface
 * @export
 */
export declare const DashboardsApiFp: (configuration?: Configuration) => {
    /**
     * Deletes multiple Dashboards in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>>;
    /**
     * Exports multiple Dashboards and downloads them as YAML files.
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>>;
    /**
     * Check favorited dashboards for current user
     * @param {GetFavStarIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardFavoriteStatusGet(q?: GetFavStarIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetFavStarIdsSchema>>>;
    /**
     * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20016>>>;
    /**
     * Get the chart definitions for a given dashboard
     * @param {string} idOrSlug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugChartsGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20021>>>;
    /**
     * Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
     * @param {string} idOrSlug Either the id of the dashboard, or its slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugDatasetsGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20022>>>;
    /**
     * Removes a dashboard's embedded configuration.
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>>;
    /**
     * Returns the dashboard's embedded configuration
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20023>>>;
    /**
     * Sets a dashboard's embedded configuration.
     * @param {EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugEmbeddedPost(body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20023>>>;
    /**
     * Sets a dashboard's embedded configuration.
     * @param {EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugEmbeddedPut(body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20023>>>;
    /**
     * Get a dashboard detail information.
     * @param {string} idOrSlug Either the id of the dashboard, or its slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20020>>>;
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>>;
    /**
     * Several metadata information about dashboard API endpoints.
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>>;
    /**
     * Deletes a Dashboard.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardPkDelete(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>>;
    /**
     * Changes a Dashboard.
     * @param {DashboardRestApiPut} body Dashboard schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardPkPut(body: DashboardRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20024>>>;
    /**
     * Compute async or get already computed dashboard thumbnail from cache.
     * @param {number} pk
     * @param {string} digest A hex digest that makes this dashboard unique
     * @param {ThumbnailQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardPkThumbnailDigestGet(pk: number, digest: string, q?: ThumbnailQuerySchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>>;
    /**
     * Create a new Dashboard.
     * @param {DashboardRestApiPost} body Dashboard schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardPost(body: DashboardRestApiPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2014>>>;
    /**
     * Get a list of all possible owners for a dashboard.
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RelatedResponseSchema>>>;
};
/**
 * DashboardsApi - factory interface
 * @export
 */
export declare const DashboardsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes multiple Dashboards in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Exports multiple Dashboards and downloads them as YAML files.
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Check favorited dashboards for current user
     * @param {GetFavStarIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardFavoriteStatusGet(q?: GetFavStarIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<GetFavStarIdsSchema>>;
    /**
     * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20016>>;
    /**
     * Get the chart definitions for a given dashboard
     * @param {string} idOrSlug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugChartsGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20021>>;
    /**
     * Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
     * @param {string} idOrSlug Either the id of the dashboard, or its slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugDatasetsGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20022>>;
    /**
     * Removes a dashboard's embedded configuration.
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Returns the dashboard's embedded configuration
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20023>>;
    /**
     * Sets a dashboard's embedded configuration.
     * @param {EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugEmbeddedPost(body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20023>>;
    /**
     * Sets a dashboard's embedded configuration.
     * @param {EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugEmbeddedPut(body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20023>>;
    /**
     * Get a dashboard detail information.
     * @param {string} idOrSlug Either the id of the dashboard, or its slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardIdOrSlugGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20020>>;
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Several metadata information about dashboard API endpoints.
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>>;
    /**
     * Deletes a Dashboard.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardPkDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Changes a Dashboard.
     * @param {DashboardRestApiPut} body Dashboard schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardPkPut(body: DashboardRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20024>>;
    /**
     * Compute async or get already computed dashboard thumbnail from cache.
     * @param {number} pk
     * @param {string} digest A hex digest that makes this dashboard unique
     * @param {ThumbnailQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardPkThumbnailDigestGet(pk: number, digest: string, q?: ThumbnailQuerySchema, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>>;
    /**
     * Create a new Dashboard.
     * @param {DashboardRestApiPost} body Dashboard schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardPost(body: DashboardRestApiPost, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2014>>;
    /**
     * Get a list of all possible owners for a dashboard.
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DashboardRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<RelatedResponseSchema>>;
};
/**
 * DashboardsApi - object-oriented interface
 * @export
 * @class DashboardsApi
 * @extends {BaseAPI}
 */
export declare class DashboardsApi extends BaseAPI {
    /**
     * Deletes multiple Dashboards in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Exports multiple Dashboards and downloads them as YAML files.
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<string>>;
    /**
     * Check favorited dashboards for current user
     * @param {GetFavStarIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardFavoriteStatusGet(q?: GetFavStarIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<GetFavStarIdsSchema>>;
    /**
     * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20016>>;
    /**
     * Get the chart definitions for a given dashboard
     * @param {string} idOrSlug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugChartsGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20021>>;
    /**
     * Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
     * @param {string} idOrSlug Either the id of the dashboard, or its slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugDatasetsGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20022>>;
    /**
     * Removes a dashboard's embedded configuration.
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Returns the dashboard's embedded configuration
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20023>>;
    /**
     * Sets a dashboard's embedded configuration.
     * @param {EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugEmbeddedPost(body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20023>>;
    /**
     * Sets a dashboard's embedded configuration.
     * @param {EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugEmbeddedPut(body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20023>>;
    /**
     * Get a dashboard detail information.
     * @param {string} idOrSlug Either the id of the dashboard, or its slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20020>>;
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Several metadata information about dashboard API endpoints.
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>>;
    /**
     * Deletes a Dashboard.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardPkDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Changes a Dashboard.
     * @param {DashboardRestApiPut} body Dashboard schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardPkPut(body: DashboardRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20024>>;
    /**
     * Compute async or get already computed dashboard thumbnail from cache.
     * @param {number} pk
     * @param {string} digest A hex digest that makes this dashboard unique
     * @param {ThumbnailQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardPkThumbnailDigestGet(pk: number, digest: string, q?: ThumbnailQuerySchema, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>>;
    /**
     * Create a new Dashboard.
     * @param {DashboardRestApiPost} body Dashboard schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardPost(body: DashboardRestApiPost, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2014>>;
    /**
     * Get a list of all possible owners for a dashboard.
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<RelatedResponseSchema>>;
}
