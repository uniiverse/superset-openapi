/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ChartCacheScreenshotResponseSchema } from '../models';
import { ChartDataQueryContextSchema } from '../models';
import { ChartDataResponseSchema } from '../models';
import { ChartRestApiPost } from '../models';
import { ChartRestApiPut } from '../models';
import { GetDeleteIdsSchema } from '../models';
import { GetExportIdsSchema } from '../models';
import { GetFavStarIdsSchema } from '../models';
import { GetInfoSchema } from '../models';
import { GetItemSchema } from '../models';
import { GetListSchema } from '../models';
import { GetRelatedSchema } from '../models';
import { InlineResponse20010 } from '../models';
import { InlineResponse20011 } from '../models';
import { InlineResponse20012 } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse2012 } from '../models';
import { InlineResponse400 } from '../models';
import { RelatedResponseSchema } from '../models';
import { ScreenshotQuerySchema } from '../models';
/**
 * ChartsApi - axios parameter creator
 * @export
 */
export declare const ChartsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Takes a query context cache key and returns payload data response for the given query.
     * @param {string} cacheKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartDataCacheKeyGet: (cacheKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Takes a query context constructed in the client and returns payload data response for the given query.
     * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartDataPost: (body: ChartDataQueryContextSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes multiple Charts in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartDelete: (q?: GetDeleteIdsSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Exports multiple charts and downloads them as YAML files
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartExportGet: (q?: GetExportIdsSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check favorited dashboards for current user
     * @param {GetFavStarIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartFavoriteStatusGet: (q?: GetFavStarIdsSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartGet: (q?: GetListSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartImportPostForm: (formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Several metadata information about chart API endpoints.
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartInfoGet: (q?: GetInfoSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Compute and cache a screenshot.
     * @param {number} pk
     * @param {ScreenshotQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkCacheScreenshotGet: (pk: number, q?: ScreenshotQuerySchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
     * @param {number} pk The chart ID
     * @param {string} [format] The format in which the data should be returned
     * @param {string} [type] The type in which the data should be returned
     * @param {boolean} [force] Should the queries be forced to load from the source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkDataGet: (pk: number, format?: string, type?: string, force?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a Chart.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkDelete: (pk: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a chart detail information.
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkGet: (pk: number, q?: GetItemSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Changes a Chart.
     * @param {ChartRestApiPut} body Chart schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkPut: (body: ChartRestApiPut, pk: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a computed screenshot from cache.
     * @param {number} pk
     * @param {string} digest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkScreenshotDigestGet: (pk: number, digest: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Compute or get already computed chart thumbnail from cache.
     * @param {number} pk
     * @param {string} digest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkThumbnailDigestGet: (pk: number, digest: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new Chart.
     * @param {ChartRestApiPost} body Chart schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPost: (body: ChartRestApiPost, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartRelatedColumnNameGet: (columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ChartsApi - functional programming interface
 * @export
 */
export declare const ChartsApiFp: (configuration?: Configuration) => {
    /**
     * Takes a query context cache key and returns payload data response for the given query.
     * @param {string} cacheKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartDataCacheKeyGet(cacheKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ChartDataResponseSchema>>>;
    /**
     * Takes a query context constructed in the client and returns payload data response for the given query.
     * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartDataPost(body: ChartDataQueryContextSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ChartDataResponseSchema>>>;
    /**
     * Deletes multiple Charts in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>>;
    /**
     * Exports multiple charts and downloads them as YAML files
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>>;
    /**
     * Check favorited dashboards for current user
     * @param {GetFavStarIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartFavoriteStatusGet(q?: GetFavStarIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetFavStarIdsSchema>>>;
    /**
     * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>>;
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>>;
    /**
     * Several metadata information about chart API endpoints.
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>>;
    /**
     * Compute and cache a screenshot.
     * @param {number} pk
     * @param {ScreenshotQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkCacheScreenshotGet(pk: number, q?: ScreenshotQuerySchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ChartCacheScreenshotResponseSchema>>>;
    /**
     * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
     * @param {number} pk The chart ID
     * @param {string} [format] The format in which the data should be returned
     * @param {string} [type] The type in which the data should be returned
     * @param {boolean} [force] Should the queries be forced to load from the source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkDataGet(pk: number, format?: string, type?: string, force?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ChartDataResponseSchema>>>;
    /**
     * Deletes a Chart.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkDelete(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>>;
    /**
     * Get a chart detail information.
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20011>>>;
    /**
     * Changes a Chart.
     * @param {ChartRestApiPut} body Chart schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkPut(body: ChartRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20012>>>;
    /**
     * Get a computed screenshot from cache.
     * @param {number} pk
     * @param {string} digest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkScreenshotDigestGet(pk: number, digest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>>;
    /**
     * Compute or get already computed chart thumbnail from cache.
     * @param {number} pk
     * @param {string} digest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkThumbnailDigestGet(pk: number, digest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>>;
    /**
     * Create a new Chart.
     * @param {ChartRestApiPost} body Chart schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPost(body: ChartRestApiPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2012>>>;
    /**
     * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RelatedResponseSchema>>>;
};
/**
 * ChartsApi - factory interface
 * @export
 */
export declare const ChartsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Takes a query context cache key and returns payload data response for the given query.
     * @param {string} cacheKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartDataCacheKeyGet(cacheKey: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ChartDataResponseSchema>>;
    /**
     * Takes a query context constructed in the client and returns payload data response for the given query.
     * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartDataPost(body: ChartDataQueryContextSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<ChartDataResponseSchema>>;
    /**
     * Deletes multiple Charts in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Exports multiple charts and downloads them as YAML files
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>>;
    /**
     * Check favorited dashboards for current user
     * @param {GetFavStarIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartFavoriteStatusGet(q?: GetFavStarIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<GetFavStarIdsSchema>>;
    /**
     * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>>;
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Several metadata information about chart API endpoints.
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>>;
    /**
     * Compute and cache a screenshot.
     * @param {number} pk
     * @param {ScreenshotQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkCacheScreenshotGet(pk: number, q?: ScreenshotQuerySchema, options?: AxiosRequestConfig): Promise<AxiosResponse<ChartCacheScreenshotResponseSchema>>;
    /**
     * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
     * @param {number} pk The chart ID
     * @param {string} [format] The format in which the data should be returned
     * @param {string} [type] The type in which the data should be returned
     * @param {boolean} [force] Should the queries be forced to load from the source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkDataGet(pk: number, format?: string, type?: string, force?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<ChartDataResponseSchema>>;
    /**
     * Deletes a Chart.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Get a chart detail information.
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20011>>;
    /**
     * Changes a Chart.
     * @param {ChartRestApiPut} body Chart schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkPut(body: ChartRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>>;
    /**
     * Get a computed screenshot from cache.
     * @param {number} pk
     * @param {string} digest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkScreenshotDigestGet(pk: number, digest: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>>;
    /**
     * Compute or get already computed chart thumbnail from cache.
     * @param {number} pk
     * @param {string} digest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPkThumbnailDigestGet(pk: number, digest: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>>;
    /**
     * Create a new Chart.
     * @param {ChartRestApiPost} body Chart schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartPost(body: ChartRestApiPost, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2012>>;
    /**
     * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChartRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<RelatedResponseSchema>>;
};
/**
 * ChartsApi - object-oriented interface
 * @export
 * @class ChartsApi
 * @extends {BaseAPI}
 */
export declare class ChartsApi extends BaseAPI {
    /**
     * Takes a query context cache key and returns payload data response for the given query.
     * @param {string} cacheKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartDataCacheKeyGet(cacheKey: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ChartDataResponseSchema>>;
    /**
     * Takes a query context constructed in the client and returns payload data response for the given query.
     * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartDataPost(body: ChartDataQueryContextSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<ChartDataResponseSchema>>;
    /**
     * Deletes multiple Charts in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Exports multiple charts and downloads them as YAML files
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>>;
    /**
     * Check favorited dashboards for current user
     * @param {GetFavStarIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartFavoriteStatusGet(q?: GetFavStarIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<GetFavStarIdsSchema>>;
    /**
     * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>>;
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Several metadata information about chart API endpoints.
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>>;
    /**
     * Compute and cache a screenshot.
     * @param {number} pk
     * @param {ScreenshotQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkCacheScreenshotGet(pk: number, q?: ScreenshotQuerySchema, options?: AxiosRequestConfig): Promise<AxiosResponse<ChartCacheScreenshotResponseSchema>>;
    /**
     * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
     * @param {number} pk The chart ID
     * @param {string} [format] The format in which the data should be returned
     * @param {string} [type] The type in which the data should be returned
     * @param {boolean} [force] Should the queries be forced to load from the source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkDataGet(pk: number, format?: string, type?: string, force?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<ChartDataResponseSchema>>;
    /**
     * Deletes a Chart.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>>;
    /**
     * Get a chart detail information.
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20011>>;
    /**
     * Changes a Chart.
     * @param {ChartRestApiPut} body Chart schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkPut(body: ChartRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>>;
    /**
     * Get a computed screenshot from cache.
     * @param {number} pk
     * @param {string} digest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkScreenshotDigestGet(pk: number, digest: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>>;
    /**
     * Compute or get already computed chart thumbnail from cache.
     * @param {number} pk
     * @param {string} digest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkThumbnailDigestGet(pk: number, digest: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>>;
    /**
     * Create a new Chart.
     * @param {ChartRestApiPost} body Chart schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPost(body: ChartRestApiPost, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2012>>;
    /**
     * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<RelatedResponseSchema>>;
}
