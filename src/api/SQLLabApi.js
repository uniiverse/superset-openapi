/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {EstimateQueryCostSchema} from '../model/EstimateQueryCostSchema';
import {ExecutePayloadSchema} from '../model/ExecutePayloadSchema';
import {InlineResponse20013} from '../model/InlineResponse20013';
import {InlineResponse400} from '../model/InlineResponse400';
import {InlineResponse410} from '../model/InlineResponse410';
import {QueryExecutionResponseSchema} from '../model/QueryExecutionResponseSchema';
import {SqlLabGetResultsSchema} from '../model/SqlLabGetResultsSchema';

/**
* SQLLab service.
* @module api/SQLLabApi
* @version v1
*/
export class SQLLabApi {

    /**
    * Constructs a new SQLLabApi. 
    * @alias module:api/SQLLabApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1SqllabEstimatePost operation.
     * @callback moduleapi/SQLLabApi~apiV1SqllabEstimatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Estimates the SQL query execution cost
     * @param {module:model/EstimateQueryCostSchema} body SQL query and params
     * @param {module:api/SQLLabApi~apiV1SqllabEstimatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SqllabEstimatePost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1SqllabEstimatePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/api/v1/sqllab/estimate/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SqllabExecutePost operation.
     * @callback moduleapi/SQLLabApi~apiV1SqllabExecutePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryExecutionResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts the execution of a SQL query
     * @param {module:model/ExecutePayloadSchema} body SQL query and params
     * @param {module:api/SQLLabApi~apiV1SqllabExecutePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SqllabExecutePost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1SqllabExecutePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueryExecutionResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/sqllab/execute/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SqllabExportClientIdGet operation.
     * @callback moduleapi/SQLLabApi~apiV1SqllabExportClientIdGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports the SQL query results to a CSV
     * @param {Number} clientId The SQL query result identifier
     * @param {module:api/SQLLabApi~apiV1SqllabExportClientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SqllabExportClientIdGet(clientId, callback) {
      
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling apiV1SqllabExportClientIdGet");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['text/csv', 'application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/sqllab/export/{client_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SqllabResultsGet operation.
     * @callback moduleapi/SQLLabApi~apiV1SqllabResultsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryExecutionResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the result of a SQL query execution
     * @param {Object} opts Optional parameters
     * @param {module:model/SqlLabGetResultsSchema} opts.q 
     * @param {module:api/SQLLabApi~apiV1SqllabResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SqllabResultsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryExecutionResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/sqllab/results/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}