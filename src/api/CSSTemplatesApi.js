/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CssTemplateRestApiPost} from '../model/CssTemplateRestApiPost';
import {CssTemplateRestApiPut} from '../model/CssTemplateRestApiPut';
import {GetDeleteIdsSchema} from '../model/GetDeleteIdsSchema';
import {GetInfoSchema} from '../model/GetInfoSchema';
import {GetItemSchema} from '../model/GetItemSchema';
import {GetListSchema} from '../model/GetListSchema';
import {GetRelatedSchema} from '../model/GetRelatedSchema';
import {InlineResponse20014} from '../model/InlineResponse20014';
import {InlineResponse20015} from '../model/InlineResponse20015';
import {InlineResponse20016} from '../model/InlineResponse20016';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse2013} from '../model/InlineResponse2013';
import {InlineResponse400} from '../model/InlineResponse400';
import {RelatedResponseSchema} from '../model/RelatedResponseSchema';

/**
* CSSTemplates service.
* @module api/CSSTemplatesApi
* @version v1
*/
export class CSSTemplatesApi {

    /**
    * Constructs a new CSSTemplatesApi. 
    * @alias module:api/CSSTemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1CssTemplateDelete operation.
     * @callback moduleapi/CSSTemplatesApi~apiV1CssTemplateDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple css templates in a bulk operation.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDeleteIdsSchema} opts.q 
     * @param {module:api/CSSTemplatesApi~apiV1CssTemplateDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1CssTemplateDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/css_template/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1CssTemplateGet operation.
     * @callback moduleapi/CSSTemplatesApi~apiV1CssTemplateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of CSS templates, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} opts.q 
     * @param {module:api/CSSTemplatesApi~apiV1CssTemplateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1CssTemplateGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/api/v1/css_template/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1CssTemplateInfoGet operation.
     * @callback moduleapi/CSSTemplatesApi~apiV1CssTemplateInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata information about this API resource
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} opts.q 
     * @param {module:api/CSSTemplatesApi~apiV1CssTemplateInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1CssTemplateInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/api/v1/css_template/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1CssTemplatePkDelete operation.
     * @callback moduleapi/CSSTemplatesApi~apiV1CssTemplatePkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete CSS template
     * @param {Number} pk 
     * @param {module:api/CSSTemplatesApi~apiV1CssTemplatePkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1CssTemplatePkDelete(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1CssTemplatePkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/css_template/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1CssTemplatePkGet operation.
     * @callback moduleapi/CSSTemplatesApi~apiV1CssTemplatePkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20015{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a CSS template
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} opts.q 
     * @param {module:api/CSSTemplatesApi~apiV1CssTemplatePkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1CssTemplatePkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1CssTemplatePkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/api/v1/css_template/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1CssTemplatePkPut operation.
     * @callback moduleapi/CSSTemplatesApi~apiV1CssTemplatePkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a CSS template
     * @param {module:model/CssTemplateRestApiPut} body Model schema
     * @param {Number} pk 
     * @param {module:api/CSSTemplatesApi~apiV1CssTemplatePkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1CssTemplatePkPut(body, pk, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1CssTemplatePkPut");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1CssTemplatePkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/api/v1/css_template/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1CssTemplatePost operation.
     * @callback moduleapi/CSSTemplatesApi~apiV1CssTemplatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a CSS template
     * @param {module:model/CssTemplateRestApiPost} body Model schema
     * @param {module:api/CSSTemplatesApi~apiV1CssTemplatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1CssTemplatePost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1CssTemplatePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/api/v1/css_template/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1CssTemplateRelatedColumnNameGet operation.
     * @callback moduleapi/CSSTemplatesApi~apiV1CssTemplateRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} opts.q 
     * @param {module:api/CSSTemplatesApi~apiV1CssTemplateRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1CssTemplateRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling apiV1CssTemplateRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/css_template/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}