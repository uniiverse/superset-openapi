/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {GetItemSchema} from '../model/GetItemSchema';
import {GetListSchema} from '../model/GetListSchema';
import {GetRecentActivitySchema} from '../model/GetRecentActivitySchema';
import {InlineResponse20040} from '../model/InlineResponse20040';
import {InlineResponse20041} from '../model/InlineResponse20041';
import {InlineResponse20112} from '../model/InlineResponse20112';
import {InlineResponse400} from '../model/InlineResponse400';
import {LogRestApiPost} from '../model/LogRestApiPost';
import {RecentActivityResponseSchema} from '../model/RecentActivityResponseSchema';

/**
* LogRestApi service.
* @module api/LogRestApiApi
* @version v1
*/
export class LogRestApiApi {

    /**
    * Constructs a new LogRestApiApi. 
    * @alias module:api/LogRestApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1LogGet operation.
     * @callback moduleapi/LogRestApiApi~apiV1LogGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20040{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of models
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} opts.q 
     * @param {module:api/LogRestApiApi~apiV1LogGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1LogGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20040;

      return this.apiClient.callApi(
        '/api/v1/log/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1LogPkGet operation.
     * @callback moduleapi/LogRestApiApi~apiV1LogPkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20041{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an item model
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} opts.q 
     * @param {module:api/LogRestApiApi~apiV1LogPkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1LogPkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1LogPkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20041;

      return this.apiClient.callApi(
        '/api/v1/log/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1LogPost operation.
     * @callback moduleapi/LogRestApiApi~apiV1LogPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20112{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/LogRestApiPost} body Model schema
     * @param {module:api/LogRestApiApi~apiV1LogPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1LogPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1LogPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20112;

      return this.apiClient.callApi(
        '/api/v1/log/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1LogRecentActivityUserIdGet operation.
     * @callback moduleapi/LogRestApiApi~apiV1LogRecentActivityUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecentActivityResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get recent activity data for a user
     * @param {Number} userId The id of the user
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRecentActivitySchema} opts.q 
     * @param {module:api/LogRestApiApi~apiV1LogRecentActivityUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1LogRecentActivityUserIdGet(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling apiV1LogRecentActivityUserIdGet");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecentActivityResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/log/recent_activity/{user_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}