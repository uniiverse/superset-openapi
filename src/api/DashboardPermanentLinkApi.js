/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse20018} from '../model/InlineResponse20018';
import {InlineResponse2017} from '../model/InlineResponse2017';
import {InlineResponse400} from '../model/InlineResponse400';

/**
* DashboardPermanentLink service.
* @module api/DashboardPermanentLinkApi
* @version v1
*/
export class DashboardPermanentLinkApi {

    /**
    * Constructs a new DashboardPermanentLinkApi. 
    * @alias module:api/DashboardPermanentLinkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1DashboardPermalinkKeyGet operation.
     * @callback moduleapi/DashboardPermanentLinkApi~apiV1DashboardPermalinkKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20018{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrives dashboard state associated with a permanent link.
     * @param {String} key 
     * @param {module:api/DashboardPermanentLinkApi~apiV1DashboardPermalinkKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardPermalinkKeyGet(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling apiV1DashboardPermalinkKeyGet");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/api/v1/dashboard/permalink/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardPkPermalinkPost operation.
     * @callback moduleapi/DashboardPermanentLinkApi~apiV1DashboardPkPermalinkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2017{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stores a new permanent link.
     * @param {String} pk 
     * @param {module:api/DashboardPermanentLinkApi~apiV1DashboardPkPermalinkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardPkPermalinkPost(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DashboardPkPermalinkPost");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2017;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{pk}/permalink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}