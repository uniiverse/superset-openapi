/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ChartCacheScreenshotResponseSchema} from '../model/ChartCacheScreenshotResponseSchema';
import {ChartDataAsyncResponseSchema} from '../model/ChartDataAsyncResponseSchema';
import {ChartDataQueryContextSchema} from '../model/ChartDataQueryContextSchema';
import {ChartDataResponseSchema} from '../model/ChartDataResponseSchema';
import {ChartRestApiPost} from '../model/ChartRestApiPost';
import {ChartRestApiPut} from '../model/ChartRestApiPut';
import {GetDeleteIdsSchema} from '../model/GetDeleteIdsSchema';
import {GetExportIdsSchema} from '../model/GetExportIdsSchema';
import {GetFavStarIdsSchema} from '../model/GetFavStarIdsSchema';
import {GetInfoSchema} from '../model/GetInfoSchema';
import {GetItemSchema} from '../model/GetItemSchema';
import {GetListSchema} from '../model/GetListSchema';
import {GetRelatedSchema} from '../model/GetRelatedSchema';
import {InlineResponse20010} from '../model/InlineResponse20010';
import {InlineResponse20011} from '../model/InlineResponse20011';
import {InlineResponse20012} from '../model/InlineResponse20012';
import {InlineResponse20013} from '../model/InlineResponse20013';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse2012} from '../model/InlineResponse2012';
import {InlineResponse400} from '../model/InlineResponse400';
import {RelatedResponseSchema} from '../model/RelatedResponseSchema';
import {ScreenshotQuerySchema} from '../model/ScreenshotQuerySchema';

/**
* Charts service.
* @module api/ChartsApi
* @version v1
*/
export class ChartsApi {

    /**
    * Constructs a new ChartsApi. 
    * @alias module:api/ChartsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1ChartDataCacheKeyGet operation.
     * @callback moduleapi/ChartsApi~apiV1ChartDataCacheKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartDataResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a query context cache key and returns payload data response for the given query.
     * @param {String} cacheKey 
     * @param {module:api/ChartsApi~apiV1ChartDataCacheKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartDataCacheKeyGet(cacheKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'cacheKey' is set
      if (cacheKey === undefined || cacheKey === null) {
        throw new Error("Missing the required parameter 'cacheKey' when calling apiV1ChartDataCacheKeyGet");
      }

      let pathParams = {
        'cache_key': cacheKey
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChartDataResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/chart/data/{cache_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartDataPost operation.
     * @callback moduleapi/ChartsApi~apiV1ChartDataPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartDataResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a query context constructed in the client and returns payload data response for the given query.
     * @param {module:model/ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
     * @param {module:api/ChartsApi~apiV1ChartDataPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartDataPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1ChartDataPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChartDataResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/chart/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartDelete operation.
     * @callback moduleapi/ChartsApi~apiV1ChartDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple Charts in a bulk operation.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDeleteIdsSchema} opts.q 
     * @param {module:api/ChartsApi~apiV1ChartDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/chart/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartExportGet operation.
     * @callback moduleapi/ChartsApi~apiV1ChartExportGetCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports multiple charts and downloads them as YAML files
     * @param {Object} opts Optional parameters
     * @param {module:model/GetExportIdsSchema} opts.q 
     * @param {module:api/ChartsApi~apiV1ChartExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartExportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/zip', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/v1/chart/export/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartFavoriteStatusGet operation.
     * @callback moduleapi/ChartsApi~apiV1ChartFavoriteStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFavStarIdsSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check favorited dashboards for current user
     * @param {Object} opts Optional parameters
     * @param {module:model/GetFavStarIdsSchema} opts.q 
     * @param {module:api/ChartsApi~apiV1ChartFavoriteStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartFavoriteStatusGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFavStarIdsSchema;

      return this.apiClient.callApi(
        '/api/v1/chart/favorite_status/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartGet operation.
     * @callback moduleapi/ChartsApi~apiV1ChartGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} opts.q 
     * @param {module:api/ChartsApi~apiV1ChartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/api/v1/chart/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartImportPost operation.
     * @callback moduleapi/ChartsApi~apiV1ChartImportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Blob} formData 
     * @param {Boolean} overwrite 
     * @param {String} passwords 
     * @param {String} sshTunnelPasswords 
     * @param {String} sshTunnelPrivateKeyPasswords 
     * @param {String} sshTunnelPrivateKeys 
     * @param {module:api/ChartsApi~apiV1ChartImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, callback) {
      
      let postBody = null;
      // verify the required parameter 'formData' is set
      if (formData === undefined || formData === null) {
        throw new Error("Missing the required parameter 'formData' when calling apiV1ChartImportPost");
      }
      // verify the required parameter 'overwrite' is set
      if (overwrite === undefined || overwrite === null) {
        throw new Error("Missing the required parameter 'overwrite' when calling apiV1ChartImportPost");
      }
      // verify the required parameter 'passwords' is set
      if (passwords === undefined || passwords === null) {
        throw new Error("Missing the required parameter 'passwords' when calling apiV1ChartImportPost");
      }
      // verify the required parameter 'sshTunnelPasswords' is set
      if (sshTunnelPasswords === undefined || sshTunnelPasswords === null) {
        throw new Error("Missing the required parameter 'sshTunnelPasswords' when calling apiV1ChartImportPost");
      }
      // verify the required parameter 'sshTunnelPrivateKeyPasswords' is set
      if (sshTunnelPrivateKeyPasswords === undefined || sshTunnelPrivateKeyPasswords === null) {
        throw new Error("Missing the required parameter 'sshTunnelPrivateKeyPasswords' when calling apiV1ChartImportPost");
      }
      // verify the required parameter 'sshTunnelPrivateKeys' is set
      if (sshTunnelPrivateKeys === undefined || sshTunnelPrivateKeys === null) {
        throw new Error("Missing the required parameter 'sshTunnelPrivateKeys' when calling apiV1ChartImportPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'formData': formData,'overwrite': overwrite,'passwords': passwords,'ssh_tunnel_passwords': sshTunnelPasswords,'ssh_tunnel_private_key_passwords': sshTunnelPrivateKeyPasswords,'ssh_tunnel_private_keys': sshTunnelPrivateKeys
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/chart/import/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartInfoGet operation.
     * @callback moduleapi/ChartsApi~apiV1ChartInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Several metadata information about chart API endpoints.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} opts.q 
     * @param {module:api/ChartsApi~apiV1ChartInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/api/v1/chart/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartPkCacheScreenshotGet operation.
     * @callback moduleapi/ChartsApi~apiV1ChartPkCacheScreenshotGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartCacheScreenshotResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute and cache a screenshot.
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/ScreenshotQuerySchema} opts.q 
     * @param {module:api/ChartsApi~apiV1ChartPkCacheScreenshotGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartPkCacheScreenshotGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1ChartPkCacheScreenshotGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChartCacheScreenshotResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/chart/{pk}/cache_screenshot/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartPkDataGet operation.
     * @callback moduleapi/ChartsApi~apiV1ChartPkDataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartDataResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
     * @param {Number} pk The chart ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.format The format in which the data should be returned
     * @param {String} opts.type The type in which the data should be returned
     * @param {Boolean} opts.force Should the queries be forced to load from the source
     * @param {module:api/ChartsApi~apiV1ChartPkDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartPkDataGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1ChartPkDataGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'format': opts['format'],'type': opts['type'],'force': opts['force']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChartDataResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/chart/{pk}/data/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartPkDelete operation.
     * @callback moduleapi/ChartsApi~apiV1ChartPkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Chart.
     * @param {Number} pk 
     * @param {module:api/ChartsApi~apiV1ChartPkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartPkDelete(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1ChartPkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/chart/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartPkFavoritesDelete operation.
     * @callback moduleapi/ChartsApi~apiV1ChartPkFavoritesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the chart from the user favorite list
     * @param {Number} pk 
     * @param {module:api/ChartsApi~apiV1ChartPkFavoritesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartPkFavoritesDelete(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1ChartPkFavoritesDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/api/v1/chart/{pk}/favorites/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartPkFavoritesPost operation.
     * @callback moduleapi/ChartsApi~apiV1ChartPkFavoritesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks the chart as favorite for the current user
     * @param {Number} pk 
     * @param {module:api/ChartsApi~apiV1ChartPkFavoritesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartPkFavoritesPost(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1ChartPkFavoritesPost");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/api/v1/chart/{pk}/favorites/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartPkGet operation.
     * @callback moduleapi/ChartsApi~apiV1ChartPkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a chart detail information.
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} opts.q 
     * @param {module:api/ChartsApi~apiV1ChartPkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartPkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1ChartPkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/api/v1/chart/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartPkPut operation.
     * @callback moduleapi/ChartsApi~apiV1ChartPkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes a Chart.
     * @param {module:model/ChartRestApiPut} body Chart schema
     * @param {Number} pk 
     * @param {module:api/ChartsApi~apiV1ChartPkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartPkPut(body, pk, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1ChartPkPut");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1ChartPkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/api/v1/chart/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartPkScreenshotDigestGet operation.
     * @callback moduleapi/ChartsApi~apiV1ChartPkScreenshotDigestGetCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a computed screenshot from cache.
     * @param {Number} pk 
     * @param {String} digest 
     * @param {module:api/ChartsApi~apiV1ChartPkScreenshotDigestGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartPkScreenshotDigestGet(pk, digest, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1ChartPkScreenshotDigestGet");
      }
      // verify the required parameter 'digest' is set
      if (digest === undefined || digest === null) {
        throw new Error("Missing the required parameter 'digest' when calling apiV1ChartPkScreenshotDigestGet");
      }

      let pathParams = {
        'pk': pk,'digest': digest
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['image/_*', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/v1/chart/{pk}/screenshot/{digest}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartPkThumbnailDigestGet operation.
     * @callback moduleapi/ChartsApi~apiV1ChartPkThumbnailDigestGetCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute or get already computed chart thumbnail from cache.
     * @param {Number} pk 
     * @param {String} digest 
     * @param {module:api/ChartsApi~apiV1ChartPkThumbnailDigestGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartPkThumbnailDigestGet(pk, digest, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1ChartPkThumbnailDigestGet");
      }
      // verify the required parameter 'digest' is set
      if (digest === undefined || digest === null) {
        throw new Error("Missing the required parameter 'digest' when calling apiV1ChartPkThumbnailDigestGet");
      }

      let pathParams = {
        'pk': pk,'digest': digest
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['image/_*', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/v1/chart/{pk}/thumbnail/{digest}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartPost operation.
     * @callback moduleapi/ChartsApi~apiV1ChartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Chart.
     * @param {module:model/ChartRestApiPost} body Chart schema
     * @param {module:api/ChartsApi~apiV1ChartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1ChartPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/api/v1/chart/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ChartRelatedColumnNameGet operation.
     * @callback moduleapi/ChartsApi~apiV1ChartRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all possible owners for a chart. Use &#x60;owners&#x60; has the &#x60;column_name&#x60; parameter
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} opts.q 
     * @param {module:api/ChartsApi~apiV1ChartRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ChartRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling apiV1ChartRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/chart/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}