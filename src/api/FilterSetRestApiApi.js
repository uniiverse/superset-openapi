/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {FilterSetRestApiPost} from '../model/FilterSetRestApiPost';
import {FilterSetRestApiPut} from '../model/FilterSetRestApiPut';
import {InlineResponse20019} from '../model/InlineResponse20019';
import {InlineResponse20020} from '../model/InlineResponse20020';
import {InlineResponse2015} from '../model/InlineResponse2015';
import {InlineResponse400} from '../model/InlineResponse400';

/**
* FilterSetRestApi service.
* @module api/FilterSetRestApiApi
* @version v1
*/
export class FilterSetRestApiApi {

    /**
    * Constructs a new FilterSetRestApiApi. 
    * @alias module:api/FilterSetRestApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1DashboardDashboardIdFiltersetsGet operation.
     * @callback moduleapi/FilterSetRestApiApi~apiV1DashboardDashboardIdFiltersetsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20019>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a dashboard&#x27;s list of filter sets
     * @param {Number} dashboardId The id of the dashboard
     * @param {module:api/FilterSetRestApiApi~apiV1DashboardDashboardIdFiltersetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardDashboardIdFiltersetsGet(dashboardId, callback) {
      
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling apiV1DashboardDashboardIdFiltersetsGet");
      }

      let pathParams = {
        'dashboard_id': dashboardId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse20019];

      return this.apiClient.callApi(
        '/api/v1/dashboard/{dashboard_id}/filtersets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardDashboardIdFiltersetsPkDelete operation.
     * @callback moduleapi/FilterSetRestApiApi~apiV1DashboardDashboardIdFiltersetsPkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Dashboard.
     * @param {Number} dashboardId 
     * @param {Number} pk 
     * @param {module:api/FilterSetRestApiApi~apiV1DashboardDashboardIdFiltersetsPkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId, pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling apiV1DashboardDashboardIdFiltersetsPkDelete");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DashboardDashboardIdFiltersetsPkDelete");
      }

      let pathParams = {
        'dashboard_id': dashboardId,'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{dashboard_id}/filtersets/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardDashboardIdFiltersetsPkPut operation.
     * @callback moduleapi/FilterSetRestApiApi~apiV1DashboardDashboardIdFiltersetsPkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes a Dashboard&#x27;s Filter set.
     * @param {module:model/FilterSetRestApiPut} body Filter set schema
     * @param {Number} dashboardId 
     * @param {Number} pk 
     * @param {module:api/FilterSetRestApiApi~apiV1DashboardDashboardIdFiltersetsPkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardDashboardIdFiltersetsPkPut(body, dashboardId, pk, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DashboardDashboardIdFiltersetsPkPut");
      }
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling apiV1DashboardDashboardIdFiltersetsPkPut");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DashboardDashboardIdFiltersetsPkPut");
      }

      let pathParams = {
        'dashboard_id': dashboardId,'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{dashboard_id}/filtersets/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardDashboardIdFiltersetsPost operation.
     * @callback moduleapi/FilterSetRestApiApi~apiV1DashboardDashboardIdFiltersetsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2015{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Dashboard&#x27;s Filter Set.
     * @param {module:model/FilterSetRestApiPost} body Filter set schema
     * @param {Number} dashboardId The id of the dashboard
     * @param {module:api/FilterSetRestApiApi~apiV1DashboardDashboardIdFiltersetsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardDashboardIdFiltersetsPost(body, dashboardId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DashboardDashboardIdFiltersetsPost");
      }
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling apiV1DashboardDashboardIdFiltersetsPost");
      }

      let pathParams = {
        'dashboard_id': dashboardId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2015;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{dashboard_id}/filtersets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}