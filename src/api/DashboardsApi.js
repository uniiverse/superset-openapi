/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {DashboardCopySchema} from '../model/DashboardCopySchema';
import {DashboardRestApiPost} from '../model/DashboardRestApiPost';
import {DashboardRestApiPut} from '../model/DashboardRestApiPut';
import {EmbeddedDashboardConfig} from '../model/EmbeddedDashboardConfig';
import {GetDeleteIdsSchema} from '../model/GetDeleteIdsSchema';
import {GetExportIdsSchema} from '../model/GetExportIdsSchema';
import {GetFavStarIdsSchema} from '../model/GetFavStarIdsSchema';
import {GetInfoSchema} from '../model/GetInfoSchema';
import {GetListSchema} from '../model/GetListSchema';
import {GetRelatedSchema} from '../model/GetRelatedSchema';
import {InlineResponse20013} from '../model/InlineResponse20013';
import {InlineResponse20017} from '../model/InlineResponse20017';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse20021} from '../model/InlineResponse20021';
import {InlineResponse20022} from '../model/InlineResponse20022';
import {InlineResponse20023} from '../model/InlineResponse20023';
import {InlineResponse20024} from '../model/InlineResponse20024';
import {InlineResponse20025} from '../model/InlineResponse20025';
import {InlineResponse20026} from '../model/InlineResponse20026';
import {InlineResponse2014} from '../model/InlineResponse2014';
import {InlineResponse400} from '../model/InlineResponse400';
import {RelatedResponseSchema} from '../model/RelatedResponseSchema';
import {ThumbnailQuerySchema} from '../model/ThumbnailQuerySchema';

/**
* Dashboards service.
* @module api/DashboardsApi
* @version v1
*/
export class DashboardsApi {

    /**
    * Constructs a new DashboardsApi. 
    * @alias module:api/DashboardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1DashboardDelete operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple Dashboards in a bulk operation.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDeleteIdsSchema} opts.q 
     * @param {module:api/DashboardsApi~apiV1DashboardDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/dashboard/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardExportGet operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardExportGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports multiple Dashboards and downloads them as YAML files.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetExportIdsSchema} opts.q 
     * @param {module:api/DashboardsApi~apiV1DashboardExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardExportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/dashboard/export/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardFavoriteStatusGet operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardFavoriteStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFavStarIdsSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check favorited dashboards for current user
     * @param {Object} opts Optional parameters
     * @param {module:model/GetFavStarIdsSchema} opts.q 
     * @param {module:api/DashboardsApi~apiV1DashboardFavoriteStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardFavoriteStatusGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFavStarIdsSchema;

      return this.apiClient.callApi(
        '/api/v1/dashboard/favorite_status/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardGet operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} opts.q 
     * @param {module:api/DashboardsApi~apiV1DashboardGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/api/v1/dashboard/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardIdOrSlugChartsGet operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardIdOrSlugChartsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the chart definitions for a given dashboard
     * @param {String} idOrSlug 
     * @param {module:api/DashboardsApi~apiV1DashboardIdOrSlugChartsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardIdOrSlugChartsGet(idOrSlug, callback) {
      
      let postBody = null;
      // verify the required parameter 'idOrSlug' is set
      if (idOrSlug === undefined || idOrSlug === null) {
        throw new Error("Missing the required parameter 'idOrSlug' when calling apiV1DashboardIdOrSlugChartsGet");
      }

      let pathParams = {
        'id_or_slug': idOrSlug
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{id_or_slug}/charts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardIdOrSlugCopyPost operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardIdOrSlugCopyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20023{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Makes a copy of an existing dashboard
     * @param {module:model/DashboardCopySchema} body 
     * @param {String} idOrSlug The dashboard id or slug
     * @param {module:api/DashboardsApi~apiV1DashboardIdOrSlugCopyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardIdOrSlugCopyPost(body, idOrSlug, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DashboardIdOrSlugCopyPost");
      }
      // verify the required parameter 'idOrSlug' is set
      if (idOrSlug === undefined || idOrSlug === null) {
        throw new Error("Missing the required parameter 'idOrSlug' when calling apiV1DashboardIdOrSlugCopyPost");
      }

      let pathParams = {
        'id_or_slug': idOrSlug
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20023;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{id_or_slug}/copy/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardIdOrSlugDatasetsGet operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardIdOrSlugDatasetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20024{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of a dashboard&#x27;s datasets. Each dataset includes only the information necessary to render the dashboard&#x27;s charts.
     * @param {String} idOrSlug Either the id of the dashboard, or its slug
     * @param {module:api/DashboardsApi~apiV1DashboardIdOrSlugDatasetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardIdOrSlugDatasetsGet(idOrSlug, callback) {
      
      let postBody = null;
      // verify the required parameter 'idOrSlug' is set
      if (idOrSlug === undefined || idOrSlug === null) {
        throw new Error("Missing the required parameter 'idOrSlug' when calling apiV1DashboardIdOrSlugDatasetsGet");
      }

      let pathParams = {
        'id_or_slug': idOrSlug
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20024;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{id_or_slug}/datasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardIdOrSlugEmbeddedDelete operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardIdOrSlugEmbeddedDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a dashboard&#x27;s embedded configuration.
     * @param {String} idOrSlug The dashboard id or slug
     * @param {module:api/DashboardsApi~apiV1DashboardIdOrSlugEmbeddedDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug, callback) {
      
      let postBody = null;
      // verify the required parameter 'idOrSlug' is set
      if (idOrSlug === undefined || idOrSlug === null) {
        throw new Error("Missing the required parameter 'idOrSlug' when calling apiV1DashboardIdOrSlugEmbeddedDelete");
      }

      let pathParams = {
        'id_or_slug': idOrSlug
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{id_or_slug}/embedded', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardIdOrSlugEmbeddedGet operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardIdOrSlugEmbeddedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20025{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the dashboard&#x27;s embedded configuration
     * @param {String} idOrSlug The dashboard id or slug
     * @param {module:api/DashboardsApi~apiV1DashboardIdOrSlugEmbeddedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug, callback) {
      
      let postBody = null;
      // verify the required parameter 'idOrSlug' is set
      if (idOrSlug === undefined || idOrSlug === null) {
        throw new Error("Missing the required parameter 'idOrSlug' when calling apiV1DashboardIdOrSlugEmbeddedGet");
      }

      let pathParams = {
        'id_or_slug': idOrSlug
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20025;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{id_or_slug}/embedded', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardIdOrSlugEmbeddedPost operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardIdOrSlugEmbeddedPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20025{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a dashboard&#x27;s embedded configuration.
     * @param {module:model/EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {String} idOrSlug The dashboard id or slug
     * @param {module:api/DashboardsApi~apiV1DashboardIdOrSlugEmbeddedPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardIdOrSlugEmbeddedPost(body, idOrSlug, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DashboardIdOrSlugEmbeddedPost");
      }
      // verify the required parameter 'idOrSlug' is set
      if (idOrSlug === undefined || idOrSlug === null) {
        throw new Error("Missing the required parameter 'idOrSlug' when calling apiV1DashboardIdOrSlugEmbeddedPost");
      }

      let pathParams = {
        'id_or_slug': idOrSlug
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20025;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{id_or_slug}/embedded', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardIdOrSlugEmbeddedPut operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardIdOrSlugEmbeddedPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20025{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a dashboard&#x27;s embedded configuration.
     * @param {module:model/EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {String} idOrSlug The dashboard id or slug
     * @param {module:api/DashboardsApi~apiV1DashboardIdOrSlugEmbeddedPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardIdOrSlugEmbeddedPut(body, idOrSlug, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DashboardIdOrSlugEmbeddedPut");
      }
      // verify the required parameter 'idOrSlug' is set
      if (idOrSlug === undefined || idOrSlug === null) {
        throw new Error("Missing the required parameter 'idOrSlug' when calling apiV1DashboardIdOrSlugEmbeddedPut");
      }

      let pathParams = {
        'id_or_slug': idOrSlug
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20025;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{id_or_slug}/embedded', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardIdOrSlugGet operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardIdOrSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a dashboard detail information.
     * @param {String} idOrSlug Either the id of the dashboard, or its slug
     * @param {module:api/DashboardsApi~apiV1DashboardIdOrSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardIdOrSlugGet(idOrSlug, callback) {
      
      let postBody = null;
      // verify the required parameter 'idOrSlug' is set
      if (idOrSlug === undefined || idOrSlug === null) {
        throw new Error("Missing the required parameter 'idOrSlug' when calling apiV1DashboardIdOrSlugGet");
      }

      let pathParams = {
        'id_or_slug': idOrSlug
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{id_or_slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardImportPost operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardImportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Blob} formData 
     * @param {Boolean} overwrite 
     * @param {String} passwords 
     * @param {String} sshTunnelPasswords 
     * @param {String} sshTunnelPrivateKeyPasswords 
     * @param {String} sshTunnelPrivateKeys 
     * @param {module:api/DashboardsApi~apiV1DashboardImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, callback) {
      
      let postBody = null;
      // verify the required parameter 'formData' is set
      if (formData === undefined || formData === null) {
        throw new Error("Missing the required parameter 'formData' when calling apiV1DashboardImportPost");
      }
      // verify the required parameter 'overwrite' is set
      if (overwrite === undefined || overwrite === null) {
        throw new Error("Missing the required parameter 'overwrite' when calling apiV1DashboardImportPost");
      }
      // verify the required parameter 'passwords' is set
      if (passwords === undefined || passwords === null) {
        throw new Error("Missing the required parameter 'passwords' when calling apiV1DashboardImportPost");
      }
      // verify the required parameter 'sshTunnelPasswords' is set
      if (sshTunnelPasswords === undefined || sshTunnelPasswords === null) {
        throw new Error("Missing the required parameter 'sshTunnelPasswords' when calling apiV1DashboardImportPost");
      }
      // verify the required parameter 'sshTunnelPrivateKeyPasswords' is set
      if (sshTunnelPrivateKeyPasswords === undefined || sshTunnelPrivateKeyPasswords === null) {
        throw new Error("Missing the required parameter 'sshTunnelPrivateKeyPasswords' when calling apiV1DashboardImportPost");
      }
      // verify the required parameter 'sshTunnelPrivateKeys' is set
      if (sshTunnelPrivateKeys === undefined || sshTunnelPrivateKeys === null) {
        throw new Error("Missing the required parameter 'sshTunnelPrivateKeys' when calling apiV1DashboardImportPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'formData': formData,'overwrite': overwrite,'passwords': passwords,'ssh_tunnel_passwords': sshTunnelPasswords,'ssh_tunnel_private_key_passwords': sshTunnelPrivateKeyPasswords,'ssh_tunnel_private_keys': sshTunnelPrivateKeys
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/dashboard/import/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardInfoGet operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Several metadata information about dashboard API endpoints.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} opts.q 
     * @param {module:api/DashboardsApi~apiV1DashboardInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/api/v1/dashboard/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardPkDelete operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardPkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Dashboard.
     * @param {Number} pk 
     * @param {module:api/DashboardsApi~apiV1DashboardPkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardPkDelete(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DashboardPkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardPkFavoritesDelete operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardPkFavoritesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the dashboard from the user favorite list
     * @param {Number} pk 
     * @param {module:api/DashboardsApi~apiV1DashboardPkFavoritesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardPkFavoritesDelete(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DashboardPkFavoritesDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{pk}/favorites/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardPkFavoritesPost operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardPkFavoritesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks the dashboard as favorite for the current user
     * @param {Number} pk 
     * @param {module:api/DashboardsApi~apiV1DashboardPkFavoritesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardPkFavoritesPost(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DashboardPkFavoritesPost");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{pk}/favorites/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardPkPut operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardPkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes a Dashboard.
     * @param {module:model/DashboardRestApiPut} body Dashboard schema
     * @param {Number} pk 
     * @param {module:api/DashboardsApi~apiV1DashboardPkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardPkPut(body, pk, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DashboardPkPut");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DashboardPkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20026;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardPkThumbnailDigestGet operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardPkThumbnailDigestGetCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute async or get already computed dashboard thumbnail from cache.
     * @param {Number} pk 
     * @param {String} digest A hex digest that makes this dashboard unique
     * @param {Object} opts Optional parameters
     * @param {module:model/ThumbnailQuerySchema} opts.q 
     * @param {module:api/DashboardsApi~apiV1DashboardPkThumbnailDigestGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardPkThumbnailDigestGet(pk, digest, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DashboardPkThumbnailDigestGet");
      }
      // verify the required parameter 'digest' is set
      if (digest === undefined || digest === null) {
        throw new Error("Missing the required parameter 'digest' when calling apiV1DashboardPkThumbnailDigestGet");
      }

      let pathParams = {
        'pk': pk,'digest': digest
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['image/_*', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/v1/dashboard/{pk}/thumbnail/{digest}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardPost operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Dashboard.
     * @param {module:model/DashboardRestApiPost} body Dashboard schema
     * @param {module:api/DashboardsApi~apiV1DashboardPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DashboardPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/api/v1/dashboard/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardRelatedColumnNameGet operation.
     * @callback moduleapi/DashboardsApi~apiV1DashboardRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all possible owners for a dashboard.
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} opts.q 
     * @param {module:api/DashboardsApi~apiV1DashboardRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling apiV1DashboardRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/dashboard/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}