/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {DistincResponseSchema} from '../model/DistincResponseSchema';
import {GetDeleteIdsSchema} from '../model/GetDeleteIdsSchema';
import {GetExportIdsSchema} from '../model/GetExportIdsSchema';
import {GetInfoSchema} from '../model/GetInfoSchema';
import {GetItemSchema} from '../model/GetItemSchema';
import {GetListSchema} from '../model/GetListSchema';
import {GetRelatedSchema} from '../model/GetRelatedSchema';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse20044} from '../model/InlineResponse20044';
import {InlineResponse20045} from '../model/InlineResponse20045';
import {InlineResponse20046} from '../model/InlineResponse20046';
import {InlineResponse20047} from '../model/InlineResponse20047';
import {InlineResponse20056} from '../model/InlineResponse20056';
import {InlineResponse20057} from '../model/InlineResponse20057';
import {InlineResponse20058} from '../model/InlineResponse20058';
import {InlineResponse20115} from '../model/InlineResponse20115';
import {InlineResponse400} from '../model/InlineResponse400';
import {QueriesGetUpdatedSinceSchema} from '../model/QueriesGetUpdatedSinceSchema';
import {RelatedResponseSchema} from '../model/RelatedResponseSchema';
import {SavedQueryRestApiPost} from '../model/SavedQueryRestApiPost';
import {SavedQueryRestApiPut} from '../model/SavedQueryRestApiPut';
import {StopQuerySchema} from '../model/StopQuerySchema';

/**
* Queries service.
* @module api/QueriesApi
* @version v1
*/
export class QueriesApi {

    /**
    * Constructs a new QueriesApi. 
    * @alias module:api/QueriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1QueryDistinctColumnNameGet operation.
     * @callback moduleapi/QueriesApi~apiV1QueryDistinctColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistincResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} opts.q 
     * @param {module:api/QueriesApi~apiV1QueryDistinctColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1QueryDistinctColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling apiV1QueryDistinctColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistincResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/query/distinct/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1QueryGet operation.
     * @callback moduleapi/QueriesApi~apiV1QueryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20044{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of queries, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} opts.q 
     * @param {module:api/QueriesApi~apiV1QueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1QueryGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20044;

      return this.apiClient.callApi(
        '/api/v1/query/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1QueryPkGet operation.
     * @callback moduleapi/QueriesApi~apiV1QueryPkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20047{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get query detail information.
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} opts.q 
     * @param {module:api/QueriesApi~apiV1QueryPkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1QueryPkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1QueryPkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20047;

      return this.apiClient.callApi(
        '/api/v1/query/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1QueryRelatedColumnNameGet operation.
     * @callback moduleapi/QueriesApi~apiV1QueryRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} opts.q 
     * @param {module:api/QueriesApi~apiV1QueryRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1QueryRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling apiV1QueryRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/query/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1QueryStopPost operation.
     * @callback moduleapi/QueriesApi~apiV1QueryStopPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20045{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manually stop a query with client_id
     * @param {module:model/StopQuerySchema} body Stop query schema
     * @param {module:api/QueriesApi~apiV1QueryStopPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1QueryStopPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1QueryStopPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20045;

      return this.apiClient.callApi(
        '/api/v1/query/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1QueryUpdatedSinceGet operation.
     * @callback moduleapi/QueriesApi~apiV1QueryUpdatedSinceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20046{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of queries that changed after last_updated_ms
     * @param {Object} opts Optional parameters
     * @param {module:model/QueriesGetUpdatedSinceSchema} opts.q 
     * @param {module:api/QueriesApi~apiV1QueryUpdatedSinceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1QueryUpdatedSinceGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20046;

      return this.apiClient.callApi(
        '/api/v1/query/updated_since', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SavedQueryDelete operation.
     * @callback moduleapi/QueriesApi~apiV1SavedQueryDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple saved queries in a bulk operation.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDeleteIdsSchema} opts.q 
     * @param {module:api/QueriesApi~apiV1SavedQueryDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SavedQueryDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/saved_query/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SavedQueryDistinctColumnNameGet operation.
     * @callback moduleapi/QueriesApi~apiV1SavedQueryDistinctColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistincResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} opts.q 
     * @param {module:api/QueriesApi~apiV1SavedQueryDistinctColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SavedQueryDistinctColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling apiV1SavedQueryDistinctColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistincResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/saved_query/distinct/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SavedQueryExportGet operation.
     * @callback moduleapi/QueriesApi~apiV1SavedQueryExportGetCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports multiple saved queries and downloads them as YAML files
     * @param {Object} opts Optional parameters
     * @param {module:model/GetExportIdsSchema} opts.q 
     * @param {module:api/QueriesApi~apiV1SavedQueryExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SavedQueryExportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/zip', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/v1/saved_query/export/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SavedQueryGet operation.
     * @callback moduleapi/QueriesApi~apiV1SavedQueryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20056{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of saved queries, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} opts.q 
     * @param {module:api/QueriesApi~apiV1SavedQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SavedQueryGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20056;

      return this.apiClient.callApi(
        '/api/v1/saved_query/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SavedQueryImportPost operation.
     * @callback moduleapi/QueriesApi~apiV1SavedQueryImportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Blob} formData 
     * @param {Boolean} overwrite 
     * @param {String} passwords 
     * @param {String} sshTunnelPasswords 
     * @param {String} sshTunnelPrivateKeyPasswords 
     * @param {String} sshTunnelPrivateKeys 
     * @param {module:api/QueriesApi~apiV1SavedQueryImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SavedQueryImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, callback) {
      
      let postBody = null;
      // verify the required parameter 'formData' is set
      if (formData === undefined || formData === null) {
        throw new Error("Missing the required parameter 'formData' when calling apiV1SavedQueryImportPost");
      }
      // verify the required parameter 'overwrite' is set
      if (overwrite === undefined || overwrite === null) {
        throw new Error("Missing the required parameter 'overwrite' when calling apiV1SavedQueryImportPost");
      }
      // verify the required parameter 'passwords' is set
      if (passwords === undefined || passwords === null) {
        throw new Error("Missing the required parameter 'passwords' when calling apiV1SavedQueryImportPost");
      }
      // verify the required parameter 'sshTunnelPasswords' is set
      if (sshTunnelPasswords === undefined || sshTunnelPasswords === null) {
        throw new Error("Missing the required parameter 'sshTunnelPasswords' when calling apiV1SavedQueryImportPost");
      }
      // verify the required parameter 'sshTunnelPrivateKeyPasswords' is set
      if (sshTunnelPrivateKeyPasswords === undefined || sshTunnelPrivateKeyPasswords === null) {
        throw new Error("Missing the required parameter 'sshTunnelPrivateKeyPasswords' when calling apiV1SavedQueryImportPost");
      }
      // verify the required parameter 'sshTunnelPrivateKeys' is set
      if (sshTunnelPrivateKeys === undefined || sshTunnelPrivateKeys === null) {
        throw new Error("Missing the required parameter 'sshTunnelPrivateKeys' when calling apiV1SavedQueryImportPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'formData': formData,'overwrite': overwrite,'passwords': passwords,'ssh_tunnel_passwords': sshTunnelPasswords,'ssh_tunnel_private_key_passwords': sshTunnelPrivateKeyPasswords,'ssh_tunnel_private_keys': sshTunnelPrivateKeys
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/saved_query/import/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SavedQueryInfoGet operation.
     * @callback moduleapi/QueriesApi~apiV1SavedQueryInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata information about this API resource
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} opts.q 
     * @param {module:api/QueriesApi~apiV1SavedQueryInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SavedQueryInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/api/v1/saved_query/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SavedQueryPkDelete operation.
     * @callback moduleapi/QueriesApi~apiV1SavedQueryPkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete saved query
     * @param {Number} pk 
     * @param {module:api/QueriesApi~apiV1SavedQueryPkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SavedQueryPkDelete(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1SavedQueryPkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/saved_query/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SavedQueryPkGet operation.
     * @callback moduleapi/QueriesApi~apiV1SavedQueryPkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20057{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a saved query
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} opts.q 
     * @param {module:api/QueriesApi~apiV1SavedQueryPkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SavedQueryPkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1SavedQueryPkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20057;

      return this.apiClient.callApi(
        '/api/v1/saved_query/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SavedQueryPkPut operation.
     * @callback moduleapi/QueriesApi~apiV1SavedQueryPkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20058{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a saved query
     * @param {module:model/SavedQueryRestApiPut} body Model schema
     * @param {Number} pk 
     * @param {module:api/QueriesApi~apiV1SavedQueryPkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SavedQueryPkPut(body, pk, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1SavedQueryPkPut");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1SavedQueryPkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20058;

      return this.apiClient.callApi(
        '/api/v1/saved_query/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SavedQueryPost operation.
     * @callback moduleapi/QueriesApi~apiV1SavedQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20115{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a saved query
     * @param {module:model/SavedQueryRestApiPost} body Model schema
     * @param {module:api/QueriesApi~apiV1SavedQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SavedQueryPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1SavedQueryPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20115;

      return this.apiClient.callApi(
        '/api/v1/saved_query/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1SavedQueryRelatedColumnNameGet operation.
     * @callback moduleapi/QueriesApi~apiV1SavedQueryRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} opts.q 
     * @param {module:api/QueriesApi~apiV1SavedQueryRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1SavedQueryRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling apiV1SavedQueryRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/saved_query/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}