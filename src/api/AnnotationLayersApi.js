/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AnnotationLayerRestApiPost} from '../model/AnnotationLayerRestApiPost';
import {AnnotationLayerRestApiPut} from '../model/AnnotationLayerRestApiPut';
import {AnnotationRestApiPost} from '../model/AnnotationRestApiPost';
import {AnnotationRestApiPut} from '../model/AnnotationRestApiPut';
import {GetDeleteIdsSchema} from '../model/GetDeleteIdsSchema';
import {GetInfoSchema} from '../model/GetInfoSchema';
import {GetItemSchema} from '../model/GetItemSchema';
import {GetListSchema} from '../model/GetListSchema';
import {GetRelatedSchema} from '../model/GetRelatedSchema';
import {InlineResponse2001} from '../model/InlineResponse2001';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse2003} from '../model/InlineResponse2003';
import {InlineResponse2004} from '../model/InlineResponse2004';
import {InlineResponse2005} from '../model/InlineResponse2005';
import {InlineResponse2006} from '../model/InlineResponse2006';
import {InlineResponse2007} from '../model/InlineResponse2007';
import {InlineResponse201} from '../model/InlineResponse201';
import {InlineResponse2011} from '../model/InlineResponse2011';
import {InlineResponse400} from '../model/InlineResponse400';
import {RelatedResponseSchema} from '../model/RelatedResponseSchema';

/**
* AnnotationLayers service.
* @module api/AnnotationLayersApi
* @version v1
*/
export class AnnotationLayersApi {

    /**
    * Constructs a new AnnotationLayersApi. 
    * @alias module:api/AnnotationLayersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1AnnotationLayerDelete operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple annotation layers in a bulk operation.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDeleteIdsSchema} opts.q 
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AnnotationLayerGet operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} opts.q 
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AnnotationLayerInfoGet operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata information about this API resource
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} opts.q 
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AnnotationLayerPkAnnotationAnnotationIdDelete operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerPkAnnotationAnnotationIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Annotation layer
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {Number} annotationId The annotation pk for this annotation
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerPkAnnotationAnnotationIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdDelete");
      }
      // verify the required parameter 'annotationId' is set
      if (annotationId === undefined || annotationId === null) {
        throw new Error("Missing the required parameter 'annotationId' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdDelete");
      }

      let pathParams = {
        'pk': pk,'annotation_id': annotationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/{pk}/annotation/{annotation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AnnotationLayerPkAnnotationAnnotationIdGet operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerPkAnnotationAnnotationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Annotation layer
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {Number} annotationId The annotation pk
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} opts.q 
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerPkAnnotationAnnotationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdGet");
      }
      // verify the required parameter 'annotationId' is set
      if (annotationId === undefined || annotationId === null) {
        throw new Error("Missing the required parameter 'annotationId' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdGet");
      }

      let pathParams = {
        'pk': pk,'annotation_id': annotationId
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/{pk}/annotation/{annotation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AnnotationLayerPkAnnotationAnnotationIdPut operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerPkAnnotationAnnotationIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Annotation layer
     * @param {module:model/AnnotationRestApiPut} body Annotation schema
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {Number} annotationId The annotation pk for this annotation
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerPkAnnotationAnnotationIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdPut");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdPut");
      }
      // verify the required parameter 'annotationId' is set
      if (annotationId === undefined || annotationId === null) {
        throw new Error("Missing the required parameter 'annotationId' when calling apiV1AnnotationLayerPkAnnotationAnnotationIdPut");
      }

      let pathParams = {
        'pk': pk,'annotation_id': annotationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/{pk}/annotation/{annotation_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AnnotationLayerPkAnnotationDelete operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerPkAnnotationDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple annotation in a bulk operation.
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDeleteIdsSchema} opts.q 
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerPkAnnotationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerPkAnnotationDelete(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkAnnotationDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/{pk}/annotation/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AnnotationLayerPkAnnotationGet operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerPkAnnotationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {Number} pk The annotation layer id for this annotation
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} opts.q 
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerPkAnnotationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerPkAnnotationGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkAnnotationGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/{pk}/annotation/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AnnotationLayerPkAnnotationPost operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerPkAnnotationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Annotation layer
     * @param {module:model/AnnotationRestApiPost} body Annotation schema
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerPkAnnotationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerPkAnnotationPost(body, pk, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1AnnotationLayerPkAnnotationPost");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkAnnotationPost");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/{pk}/annotation/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AnnotationLayerPkDelete operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerPkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Annotation layer
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerPkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerPkDelete(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AnnotationLayerPkGet operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerPkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Annotation layer
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} opts.q 
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerPkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerPkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AnnotationLayerPkPut operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerPkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Annotation layer
     * @param {module:model/AnnotationLayerRestApiPut} body Annotation schema
     * @param {Number} pk The annotation layer pk for this annotation
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerPkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerPkPut(body, pk, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1AnnotationLayerPkPut");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1AnnotationLayerPkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AnnotationLayerPost operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Annotation layer
     * @param {module:model/AnnotationLayerRestApiPost} body Annotation Layer schema
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1AnnotationLayerPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AnnotationLayerRelatedColumnNameGet operation.
     * @callback moduleapi/AnnotationLayersApi~apiV1AnnotationLayerRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} opts.q 
     * @param {module:api/AnnotationLayersApi~apiV1AnnotationLayerRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AnnotationLayerRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling apiV1AnnotationLayerRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/annotation_layer/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}