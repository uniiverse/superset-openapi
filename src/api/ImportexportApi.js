/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse400} from '../model/InlineResponse400';

/**
* Importexport service.
* @module api/ImportexportApi
* @version v1
*/
export class ImportexportApi {

    /**
    * Constructs a new ImportexportApi. 
    * @alias module:api/ImportexportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1AssetsExportGet operation.
     * @callback moduleapi/ImportexportApi~apiV1AssetsExportGetCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a ZIP file with all the Superset assets (databases, datasets, charts, dashboards, saved queries) as YAML files.
     * @param {module:api/ImportexportApi~apiV1AssetsExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AssetsExportGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/zip', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/v1/assets/export/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1AssetsImportPost operation.
     * @callback moduleapi/ImportexportApi~apiV1AssetsImportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Blob} bundle 
     * @param {String} passwords 
     * @param {String} sshTunnelPasswords 
     * @param {String} sshTunnelPrivateKeyPasswords 
     * @param {String} sshTunnelPrivateKeys 
     * @param {module:api/ImportexportApi~apiV1AssetsImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1AssetsImportPost(bundle, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, callback) {
      
      let postBody = null;
      // verify the required parameter 'bundle' is set
      if (bundle === undefined || bundle === null) {
        throw new Error("Missing the required parameter 'bundle' when calling apiV1AssetsImportPost");
      }
      // verify the required parameter 'passwords' is set
      if (passwords === undefined || passwords === null) {
        throw new Error("Missing the required parameter 'passwords' when calling apiV1AssetsImportPost");
      }
      // verify the required parameter 'sshTunnelPasswords' is set
      if (sshTunnelPasswords === undefined || sshTunnelPasswords === null) {
        throw new Error("Missing the required parameter 'sshTunnelPasswords' when calling apiV1AssetsImportPost");
      }
      // verify the required parameter 'sshTunnelPrivateKeyPasswords' is set
      if (sshTunnelPrivateKeyPasswords === undefined || sshTunnelPrivateKeyPasswords === null) {
        throw new Error("Missing the required parameter 'sshTunnelPrivateKeyPasswords' when calling apiV1AssetsImportPost");
      }
      // verify the required parameter 'sshTunnelPrivateKeys' is set
      if (sshTunnelPrivateKeys === undefined || sshTunnelPrivateKeys === null) {
        throw new Error("Missing the required parameter 'sshTunnelPrivateKeys' when calling apiV1AssetsImportPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'bundle': bundle,'passwords': passwords,'ssh_tunnel_passwords': sshTunnelPasswords,'ssh_tunnel_private_key_passwords': sshTunnelPrivateKeyPasswords,'ssh_tunnel_private_keys': sshTunnelPrivateKeys
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/assets/import/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}