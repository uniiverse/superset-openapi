/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {DatabaseConnectionSchema} from '../model/DatabaseConnectionSchema';
import {DatabaseFunctionNamesResponse} from '../model/DatabaseFunctionNamesResponse';
import {DatabaseRelatedObjectsResponse} from '../model/DatabaseRelatedObjectsResponse';
import {DatabaseRestApiPost} from '../model/DatabaseRestApiPost';
import {DatabaseRestApiPut} from '../model/DatabaseRestApiPut';
import {DatabaseSchemaAccessForFileUploadResponse} from '../model/DatabaseSchemaAccessForFileUploadResponse';
import {DatabaseSchemasQuerySchema} from '../model/DatabaseSchemasQuerySchema';
import {DatabaseTablesQuerySchema} from '../model/DatabaseTablesQuerySchema';
import {DatabaseTestConnectionSchema} from '../model/DatabaseTestConnectionSchema';
import {DatabaseValidateParametersSchema} from '../model/DatabaseValidateParametersSchema';
import {GetExportIdsSchema} from '../model/GetExportIdsSchema';
import {GetInfoSchema} from '../model/GetInfoSchema';
import {GetListSchema} from '../model/GetListSchema';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse20029} from '../model/InlineResponse20029';
import {InlineResponse20030} from '../model/InlineResponse20030';
import {InlineResponse20031} from '../model/InlineResponse20031';
import {InlineResponse20032} from '../model/InlineResponse20032';
import {InlineResponse20033} from '../model/InlineResponse20033';
import {InlineResponse2018} from '../model/InlineResponse2018';
import {InlineResponse400} from '../model/InlineResponse400';
import {SchemasResponseSchema} from '../model/SchemasResponseSchema';
import {SelectStarResponseSchema} from '../model/SelectStarResponseSchema';
import {TableExtraMetadataResponseSchema} from '../model/TableExtraMetadataResponseSchema';
import {TableMetadataResponseSchema} from '../model/TableMetadataResponseSchema';
import {ValidateSQLRequest} from '../model/ValidateSQLRequest';

/**
* Database service.
* @module api/DatabaseApi
* @version v1
*/
export class DatabaseApi {

    /**
    * Constructs a new DatabaseApi. 
    * @alias module:api/DatabaseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1DatabaseAvailableGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabaseAvailableGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20030>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get names of databases currently available
     * @param {module:api/DatabaseApi~apiV1DatabaseAvailableGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabaseAvailableGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse20030];

      return this.apiClient.callApi(
        '/api/v1/database/available/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabaseExportGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabaseExportGetCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download database(s) and associated dataset(s) as a zip file
     * @param {Object} opts Optional parameters
     * @param {module:model/GetExportIdsSchema} opts.q 
     * @param {module:api/DatabaseApi~apiV1DatabaseExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabaseExportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/zip', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/v1/database/export/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabaseGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabaseGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20029{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of models
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} opts.q 
     * @param {module:api/DatabaseApi~apiV1DatabaseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabaseGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20029;

      return this.apiClient.callApi(
        '/api/v1/database/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabaseImportPost operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabaseImportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Blob} formData 
     * @param {Boolean} overwrite 
     * @param {String} passwords 
     * @param {String} sshTunnelPasswords 
     * @param {String} sshTunnelPrivateKeyPasswords 
     * @param {String} sshTunnelPrivateKeys 
     * @param {module:api/DatabaseApi~apiV1DatabaseImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabaseImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, callback) {
      
      let postBody = null;
      // verify the required parameter 'formData' is set
      if (formData === undefined || formData === null) {
        throw new Error("Missing the required parameter 'formData' when calling apiV1DatabaseImportPost");
      }
      // verify the required parameter 'overwrite' is set
      if (overwrite === undefined || overwrite === null) {
        throw new Error("Missing the required parameter 'overwrite' when calling apiV1DatabaseImportPost");
      }
      // verify the required parameter 'passwords' is set
      if (passwords === undefined || passwords === null) {
        throw new Error("Missing the required parameter 'passwords' when calling apiV1DatabaseImportPost");
      }
      // verify the required parameter 'sshTunnelPasswords' is set
      if (sshTunnelPasswords === undefined || sshTunnelPasswords === null) {
        throw new Error("Missing the required parameter 'sshTunnelPasswords' when calling apiV1DatabaseImportPost");
      }
      // verify the required parameter 'sshTunnelPrivateKeyPasswords' is set
      if (sshTunnelPrivateKeyPasswords === undefined || sshTunnelPrivateKeyPasswords === null) {
        throw new Error("Missing the required parameter 'sshTunnelPrivateKeyPasswords' when calling apiV1DatabaseImportPost");
      }
      // verify the required parameter 'sshTunnelPrivateKeys' is set
      if (sshTunnelPrivateKeys === undefined || sshTunnelPrivateKeys === null) {
        throw new Error("Missing the required parameter 'sshTunnelPrivateKeys' when calling apiV1DatabaseImportPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'formData': formData,'overwrite': overwrite,'passwords': passwords,'ssh_tunnel_passwords': sshTunnelPasswords,'ssh_tunnel_private_key_passwords': sshTunnelPrivateKeyPasswords,'ssh_tunnel_private_keys': sshTunnelPrivateKeys
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/database/import/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabaseInfoGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabaseInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata information about this API resource
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} opts.q 
     * @param {module:api/DatabaseApi~apiV1DatabaseInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabaseInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/api/v1/database/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkConnectionGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkConnectionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseConnectionSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a database connection info
     * @param {Number} pk The database id
     * @param {module:api/DatabaseApi~apiV1DatabasePkConnectionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkConnectionGet(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkConnectionGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseConnectionSchema;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}/connection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkDelete operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Database.
     * @param {Number} pk 
     * @param {module:api/DatabaseApi~apiV1DatabasePkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkDelete(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkFunctionNamesGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkFunctionNamesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseFunctionNamesResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get function names supported by a database
     * @param {Number} pk 
     * @param {module:api/DatabaseApi~apiV1DatabasePkFunctionNamesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkFunctionNamesGet(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkFunctionNamesGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseFunctionNamesResponse;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}/function_names/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkGetCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a database
     * @param {Number} pk The database id
     * @param {module:api/DatabaseApi~apiV1DatabasePkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkGet(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkPut operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes a Database.
     * @param {module:model/DatabaseRestApiPut} body Database schema
     * @param {Number} pk 
     * @param {module:api/DatabaseApi~apiV1DatabasePkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkPut(body, pk, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DatabasePkPut");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkRelatedObjectsGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkRelatedObjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseRelatedObjectsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get charts and dashboards count associated to a database
     * @param {Number} pk 
     * @param {module:api/DatabaseApi~apiV1DatabasePkRelatedObjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkRelatedObjectsGet(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkRelatedObjectsGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseRelatedObjectsResponse;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}/related_objects/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkSchemasAccessForFileUploadGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkSchemasAccessForFileUploadGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseSchemaAccessForFileUploadResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The list of the database schemas where to upload information
     * @param {Number} pk 
     * @param {module:api/DatabaseApi~apiV1DatabasePkSchemasAccessForFileUploadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkSchemasAccessForFileUploadGet(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkSchemasAccessForFileUploadGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseSchemaAccessForFileUploadResponse;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}/schemas_access_for_file_upload/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkSchemasGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkSchemasGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemasResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all schemas from a database
     * @param {Number} pk The database id
     * @param {Object} opts Optional parameters
     * @param {module:model/DatabaseSchemasQuerySchema} opts.q 
     * @param {module:api/DatabaseApi~apiV1DatabasePkSchemasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkSchemasGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkSchemasGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SchemasResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}/schemas/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkSelectStarTableNameGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkSelectStarTableNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SelectStarResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get database select star for table
     * @param {Number} pk The database id
     * @param {String} tableName Table name
     * @param {String} schemaName Table schema
     * @param {module:api/DatabaseApi~apiV1DatabasePkSelectStarTableNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkSelectStarTableNameGet(pk, tableName, schemaName, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkSelectStarTableNameGet");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling apiV1DatabasePkSelectStarTableNameGet");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling apiV1DatabasePkSelectStarTableNameGet");
      }

      let pathParams = {
        'pk': pk,'table_name': tableName,'schema_name': schemaName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SelectStarResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}/select_star/{table_name}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkSelectStarTableNameSchemaNameGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkSelectStarTableNameSchemaNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SelectStarResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get database select star for table
     * @param {Number} pk The database id
     * @param {String} tableName Table name
     * @param {String} schemaName Table schema
     * @param {module:api/DatabaseApi~apiV1DatabasePkSelectStarTableNameSchemaNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkSelectStarTableNameSchemaNameGet");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling apiV1DatabasePkSelectStarTableNameSchemaNameGet");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling apiV1DatabasePkSelectStarTableNameSchemaNameGet");
      }

      let pathParams = {
        'pk': pk,'table_name': tableName,'schema_name': schemaName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SelectStarResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}/select_star/{table_name}/{schema_name}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkSshTunnelDelete operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkSshTunnelDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a SSH Tunnel.
     * @param {Number} pk 
     * @param {module:api/DatabaseApi~apiV1DatabasePkSshTunnelDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkSshTunnelDelete(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkSshTunnelDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}/ssh_tunnel/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkTableExtraTableNameSchemaNameGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkTableExtraTableNameSchemaNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableExtraMetadataResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get table extra metadata
     * Response depends on each DB engine spec normally focused on partitions
     * @param {Number} pk The database id
     * @param {String} tableName Table name
     * @param {String} schemaName Table schema
     * @param {module:api/DatabaseApi~apiV1DatabasePkTableExtraTableNameSchemaNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk, tableName, schemaName, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkTableExtraTableNameSchemaNameGet");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling apiV1DatabasePkTableExtraTableNameSchemaNameGet");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling apiV1DatabasePkTableExtraTableNameSchemaNameGet");
      }

      let pathParams = {
        'pk': pk,'table_name': tableName,'schema_name': schemaName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TableExtraMetadataResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}/table_extra/{table_name}/{schema_name}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkTableTableNameSchemaNameGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkTableTableNameSchemaNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableMetadataResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get database table metadata
     * @param {Number} pk The database id
     * @param {String} tableName Table name
     * @param {String} schemaName Table schema
     * @param {module:api/DatabaseApi~apiV1DatabasePkTableTableNameSchemaNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkTableTableNameSchemaNameGet(pk, tableName, schemaName, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkTableTableNameSchemaNameGet");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling apiV1DatabasePkTableTableNameSchemaNameGet");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling apiV1DatabasePkTableTableNameSchemaNameGet");
      }

      let pathParams = {
        'pk': pk,'table_name': tableName,'schema_name': schemaName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TableMetadataResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}/table/{table_name}/{schema_name}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkTablesGet operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkTablesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of tables for given database
     * @param {Number} pk The database id
     * @param {Object} opts Optional parameters
     * @param {module:model/DatabaseTablesQuerySchema} opts.q 
     * @param {module:api/DatabaseApi~apiV1DatabasePkTablesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkTablesGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkTablesGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}/tables/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePkValidateSqlPost operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePkValidateSqlPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20033{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates that arbitrary sql is acceptable for the given database
     * Validates arbitrary SQL.
     * @param {module:model/ValidateSQLRequest} body Validate SQL request
     * @param {Number} pk 
     * @param {module:api/DatabaseApi~apiV1DatabasePkValidateSqlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePkValidateSqlPost(body, pk, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DatabasePkValidateSqlPost");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatabasePkValidateSqlPost");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/api/v1/database/{pk}/validate_sql/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabasePost operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabasePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2018{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Database.
     * @param {module:model/DatabaseRestApiPost} body Database schema
     * @param {module:api/DatabaseApi~apiV1DatabasePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabasePost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DatabasePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2018;

      return this.apiClient.callApi(
        '/api/v1/database/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabaseTestConnectionPost operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabaseTestConnectionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests a database connection
     * @param {module:model/DatabaseTestConnectionSchema} body Database schema
     * @param {module:api/DatabaseApi~apiV1DatabaseTestConnectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabaseTestConnectionPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DatabaseTestConnectionPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/database/test_connection/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatabaseValidateParametersPost operation.
     * @callback moduleapi/DatabaseApi~apiV1DatabaseValidateParametersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates parameters used to connect to a database
     * @param {module:model/DatabaseValidateParametersSchema} body DB-specific parameters
     * @param {module:api/DatabaseApi~apiV1DatabaseValidateParametersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatabaseValidateParametersPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DatabaseValidateParametersPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/database/validate_parameters/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}