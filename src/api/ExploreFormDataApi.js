/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {FormDataPostSchema} from '../model/FormDataPostSchema';
import {FormDataPutSchema} from '../model/FormDataPutSchema';
import {InlineResponse20028} from '../model/InlineResponse20028';
import {InlineResponse20039} from '../model/InlineResponse20039';
import {InlineResponse20111} from '../model/InlineResponse20111';
import {InlineResponse400} from '../model/InlineResponse400';

/**
* ExploreFormData service.
* @module api/ExploreFormDataApi
* @version v1
*/
export class ExploreFormDataApi {

    /**
    * Constructs a new ExploreFormDataApi. 
    * @alias module:api/ExploreFormDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1ExploreFormDataKeyDelete operation.
     * @callback moduleapi/ExploreFormDataApi~apiV1ExploreFormDataKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a form_data.
     * @param {String} key The form_data key.
     * @param {module:api/ExploreFormDataApi~apiV1ExploreFormDataKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ExploreFormDataKeyDelete(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling apiV1ExploreFormDataKeyDelete");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/api/v1/explore/form_data/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ExploreFormDataKeyGet operation.
     * @callback moduleapi/ExploreFormDataApi~apiV1ExploreFormDataKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20039{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrives a form_data.
     * @param {String} key 
     * @param {module:api/ExploreFormDataApi~apiV1ExploreFormDataKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ExploreFormDataKeyGet(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling apiV1ExploreFormDataKeyGet");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20039;

      return this.apiClient.callApi(
        '/api/v1/explore/form_data/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ExploreFormDataKeyPut operation.
     * @callback moduleapi/ExploreFormDataApi~apiV1ExploreFormDataKeyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20111{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing form_data.
     * @param {module:model/FormDataPutSchema} body 
     * @param {String} key 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.tabId 
     * @param {module:api/ExploreFormDataApi~apiV1ExploreFormDataKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ExploreFormDataKeyPut(body, key, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1ExploreFormDataKeyPut");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling apiV1ExploreFormDataKeyPut");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        'tab_id': opts['tabId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20111;

      return this.apiClient.callApi(
        '/api/v1/explore/form_data/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1ExploreFormDataPost operation.
     * @callback moduleapi/ExploreFormDataApi~apiV1ExploreFormDataPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20111{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stores a new form_data.
     * @param {module:model/FormDataPostSchema} body 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.tabId 
     * @param {module:api/ExploreFormDataApi~apiV1ExploreFormDataPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1ExploreFormDataPost(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1ExploreFormDataPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'tab_id': opts['tabId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20111;

      return this.apiClient.callApi(
        '/api/v1/explore/form_data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}