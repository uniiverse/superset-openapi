/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse20027} from '../model/InlineResponse20027';
import {InlineResponse20028} from '../model/InlineResponse20028';
import {InlineResponse2016} from '../model/InlineResponse2016';
import {InlineResponse400} from '../model/InlineResponse400';
import {TemporaryCachePostSchema} from '../model/TemporaryCachePostSchema';
import {TemporaryCachePutSchema} from '../model/TemporaryCachePutSchema';

/**
* DashboardFilterState service.
* @module api/DashboardFilterStateApi
* @version v1
*/
export class DashboardFilterStateApi {

    /**
    * Constructs a new DashboardFilterStateApi. 
    * @alias module:api/DashboardFilterStateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1DashboardPkFilterStateKeyDelete operation.
     * @callback moduleapi/DashboardFilterStateApi~apiV1DashboardPkFilterStateKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a value.
     * @param {Number} pk 
     * @param {String} key The value key.
     * @param {module:api/DashboardFilterStateApi~apiV1DashboardPkFilterStateKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardPkFilterStateKeyDelete(pk, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DashboardPkFilterStateKeyDelete");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling apiV1DashboardPkFilterStateKeyDelete");
      }

      let pathParams = {
        'pk': pk,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{pk}/filter_state/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardPkFilterStateKeyGet operation.
     * @callback moduleapi/DashboardFilterStateApi~apiV1DashboardPkFilterStateKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrives a value.
     * @param {Number} pk 
     * @param {String} key 
     * @param {module:api/DashboardFilterStateApi~apiV1DashboardPkFilterStateKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardPkFilterStateKeyGet(pk, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DashboardPkFilterStateKeyGet");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling apiV1DashboardPkFilterStateKeyGet");
      }

      let pathParams = {
        'pk': pk,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{pk}/filter_state/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardPkFilterStateKeyPut operation.
     * @callback moduleapi/DashboardFilterStateApi~apiV1DashboardPkFilterStateKeyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2016{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing value.
     * @param {module:model/TemporaryCachePutSchema} body 
     * @param {Number} pk 
     * @param {String} key 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.tabId 
     * @param {module:api/DashboardFilterStateApi~apiV1DashboardPkFilterStateKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardPkFilterStateKeyPut(body, pk, key, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DashboardPkFilterStateKeyPut");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DashboardPkFilterStateKeyPut");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling apiV1DashboardPkFilterStateKeyPut");
      }

      let pathParams = {
        'pk': pk,'key': key
      };
      let queryParams = {
        'tab_id': opts['tabId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2016;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{pk}/filter_state/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DashboardPkFilterStatePost operation.
     * @callback moduleapi/DashboardFilterStateApi~apiV1DashboardPkFilterStatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2016{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stores a new value.
     * @param {module:model/TemporaryCachePostSchema} body 
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.tabId 
     * @param {module:api/DashboardFilterStateApi~apiV1DashboardPkFilterStatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DashboardPkFilterStatePost(body, pk, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DashboardPkFilterStatePost");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DashboardPkFilterStatePost");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'tab_id': opts['tabId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2016;

      return this.apiClient.callApi(
        '/api/v1/dashboard/{pk}/filter_state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}