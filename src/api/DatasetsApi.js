/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {DatasetDuplicateSchema} from '../model/DatasetDuplicateSchema';
import {DatasetRelatedObjectsResponse} from '../model/DatasetRelatedObjectsResponse';
import {DatasetRestApiPost} from '../model/DatasetRestApiPost';
import {DatasetRestApiPut} from '../model/DatasetRestApiPut';
import {DistincResponseSchema} from '../model/DistincResponseSchema';
import {GetDeleteIdsSchema} from '../model/GetDeleteIdsSchema';
import {GetExportIdsSchema} from '../model/GetExportIdsSchema';
import {GetInfoSchema} from '../model/GetInfoSchema';
import {GetItemSchema} from '../model/GetItemSchema';
import {GetListSchema} from '../model/GetListSchema';
import {GetOrCreateDatasetSchema} from '../model/GetOrCreateDatasetSchema';
import {GetRelatedSchema} from '../model/GetRelatedSchema';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse20034} from '../model/InlineResponse20034';
import {InlineResponse20035} from '../model/InlineResponse20035';
import {InlineResponse20036} from '../model/InlineResponse20036';
import {InlineResponse20037} from '../model/InlineResponse20037';
import {InlineResponse20110} from '../model/InlineResponse20110';
import {InlineResponse2019} from '../model/InlineResponse2019';
import {InlineResponse400} from '../model/InlineResponse400';
import {RelatedResponseSchema} from '../model/RelatedResponseSchema';

/**
* Datasets service.
* @module api/DatasetsApi
* @version v1
*/
export class DatasetsApi {

    /**
    * Constructs a new DatasetsApi. 
    * @alias module:api/DatasetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiV1DatasetDelete operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple Datasets in a bulk operation.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDeleteIdsSchema} opts.q 
     * @param {module:api/DatasetsApi~apiV1DatasetDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/dataset/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetDistinctColumnNameGet operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetDistinctColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistincResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} opts.q 
     * @param {module:api/DatasetsApi~apiV1DatasetDistinctColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetDistinctColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling apiV1DatasetDistinctColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistincResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/dataset/distinct/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetDuplicatePost operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetDuplicatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20110{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicates a Dataset
     * @param {module:model/DatasetDuplicateSchema} body Dataset schema
     * @param {module:api/DatasetsApi~apiV1DatasetDuplicatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetDuplicatePost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DatasetDuplicatePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20110;

      return this.apiClient.callApi(
        '/api/v1/dataset/duplicate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetExportGet operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetExportGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports multiple datasets and downloads them as YAML files
     * @param {Object} opts Optional parameters
     * @param {module:model/GetExportIdsSchema} opts.q 
     * @param {module:api/DatasetsApi~apiV1DatasetExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetExportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/dataset/export/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetGet operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20034{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of models
     * @param {Object} opts Optional parameters
     * @param {module:model/GetListSchema} opts.q 
     * @param {module:api/DatasetsApi~apiV1DatasetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20034;

      return this.apiClient.callApi(
        '/api/v1/dataset/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetGetOrCreatePost operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetGetOrCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20035{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a table by name, or create it if it does not exist
     * @param {module:model/GetOrCreateDatasetSchema} body 
     * @param {module:api/DatasetsApi~apiV1DatasetGetOrCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetGetOrCreatePost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DatasetGetOrCreatePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20035;

      return this.apiClient.callApi(
        '/api/v1/dataset/get_or_create/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetImportPost operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetImportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Blob} formData 
     * @param {Boolean} overwrite 
     * @param {String} passwords 
     * @param {String} sshTunnelPasswords 
     * @param {String} sshTunnelPrivateKeyPasswords 
     * @param {String} sshTunnelPrivateKeys 
     * @param {Boolean} syncColumns 
     * @param {Boolean} syncMetrics 
     * @param {module:api/DatasetsApi~apiV1DatasetImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, syncColumns, syncMetrics, callback) {
      
      let postBody = null;
      // verify the required parameter 'formData' is set
      if (formData === undefined || formData === null) {
        throw new Error("Missing the required parameter 'formData' when calling apiV1DatasetImportPost");
      }
      // verify the required parameter 'overwrite' is set
      if (overwrite === undefined || overwrite === null) {
        throw new Error("Missing the required parameter 'overwrite' when calling apiV1DatasetImportPost");
      }
      // verify the required parameter 'passwords' is set
      if (passwords === undefined || passwords === null) {
        throw new Error("Missing the required parameter 'passwords' when calling apiV1DatasetImportPost");
      }
      // verify the required parameter 'sshTunnelPasswords' is set
      if (sshTunnelPasswords === undefined || sshTunnelPasswords === null) {
        throw new Error("Missing the required parameter 'sshTunnelPasswords' when calling apiV1DatasetImportPost");
      }
      // verify the required parameter 'sshTunnelPrivateKeyPasswords' is set
      if (sshTunnelPrivateKeyPasswords === undefined || sshTunnelPrivateKeyPasswords === null) {
        throw new Error("Missing the required parameter 'sshTunnelPrivateKeyPasswords' when calling apiV1DatasetImportPost");
      }
      // verify the required parameter 'sshTunnelPrivateKeys' is set
      if (sshTunnelPrivateKeys === undefined || sshTunnelPrivateKeys === null) {
        throw new Error("Missing the required parameter 'sshTunnelPrivateKeys' when calling apiV1DatasetImportPost");
      }
      // verify the required parameter 'syncColumns' is set
      if (syncColumns === undefined || syncColumns === null) {
        throw new Error("Missing the required parameter 'syncColumns' when calling apiV1DatasetImportPost");
      }
      // verify the required parameter 'syncMetrics' is set
      if (syncMetrics === undefined || syncMetrics === null) {
        throw new Error("Missing the required parameter 'syncMetrics' when calling apiV1DatasetImportPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'formData': formData,'overwrite': overwrite,'passwords': passwords,'ssh_tunnel_passwords': sshTunnelPasswords,'ssh_tunnel_private_key_passwords': sshTunnelPrivateKeyPasswords,'ssh_tunnel_private_keys': sshTunnelPrivateKeys,'sync_columns': syncColumns,'sync_metrics': syncMetrics
      };

      let authNames = ['jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/dataset/import/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetInfoGet operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata information about this API resource
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInfoSchema} opts.q 
     * @param {module:api/DatasetsApi~apiV1DatasetInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/api/v1/dataset/_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetPkColumnColumnIdDelete operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetPkColumnColumnIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Dataset column
     * @param {Number} pk The dataset pk for this column
     * @param {Number} columnId The column id for this dataset
     * @param {module:api/DatasetsApi~apiV1DatasetPkColumnColumnIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetPkColumnColumnIdDelete(pk, columnId, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatasetPkColumnColumnIdDelete");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling apiV1DatasetPkColumnColumnIdDelete");
      }

      let pathParams = {
        'pk': pk,'column_id': columnId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/dataset/{pk}/column/{column_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetPkDelete operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetPkDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Dataset
     * @param {Number} pk 
     * @param {module:api/DatasetsApi~apiV1DatasetPkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetPkDelete(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatasetPkDelete");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/dataset/{pk}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetPkGet operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetPkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20036{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an item model
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetItemSchema} opts.q 
     * @param {module:api/DatasetsApi~apiV1DatasetPkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetPkGet(pk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatasetPkGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20036;

      return this.apiClient.callApi(
        '/api/v1/dataset/{pk}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetPkMetricMetricIdDelete operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetPkMetricMetricIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Dataset metric
     * @param {Number} pk The dataset pk for this column
     * @param {Number} metricId The metric id for this dataset
     * @param {module:api/DatasetsApi~apiV1DatasetPkMetricMetricIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetPkMetricMetricIdDelete(pk, metricId, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatasetPkMetricMetricIdDelete");
      }
      // verify the required parameter 'metricId' is set
      if (metricId === undefined || metricId === null) {
        throw new Error("Missing the required parameter 'metricId' when calling apiV1DatasetPkMetricMetricIdDelete");
      }

      let pathParams = {
        'pk': pk,'metric_id': metricId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/dataset/{pk}/metric/{metric_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetPkPut operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetPkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20037{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes a Dataset
     * @param {module:model/DatasetRestApiPut} body Dataset schema
     * @param {Number} pk 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrideColumns 
     * @param {module:api/DatasetsApi~apiV1DatasetPkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetPkPut(body, pk, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DatasetPkPut");
      }
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatasetPkPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        'override_columns': opts['overrideColumns']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20037;

      return this.apiClient.callApi(
        '/api/v1/dataset/{pk}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetPkRefreshPut operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetPkRefreshPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse400{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refreshes and updates columns of a dataset
     * @param {Number} pk 
     * @param {module:api/DatasetsApi~apiV1DatasetPkRefreshPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetPkRefreshPut(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatasetPkRefreshPut");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse400;

      return this.apiClient.callApi(
        '/api/v1/dataset/{pk}/refresh', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetPkRelatedObjectsGet operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetPkRelatedObjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatasetRelatedObjectsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get charts and dashboards count associated to a dataset
     * @param {Number} pk 
     * @param {module:api/DatasetsApi~apiV1DatasetPkRelatedObjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetPkRelatedObjectsGet(pk, callback) {
      
      let postBody = null;
      // verify the required parameter 'pk' is set
      if (pk === undefined || pk === null) {
        throw new Error("Missing the required parameter 'pk' when calling apiV1DatasetPkRelatedObjectsGet");
      }

      let pathParams = {
        'pk': pk
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatasetRelatedObjectsResponse;

      return this.apiClient.callApi(
        '/api/v1/dataset/{pk}/related_objects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetPost operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2019{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Dataset
     * @param {module:model/DatasetRestApiPost} body Dataset schema
     * @param {module:api/DatasetsApi~apiV1DatasetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiV1DatasetPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2019;

      return this.apiClient.callApi(
        '/api/v1/dataset/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiV1DatasetRelatedColumnNameGet operation.
     * @callback moduleapi/DatasetsApi~apiV1DatasetRelatedColumnNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} columnName 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRelatedSchema} opts.q 
     * @param {module:api/DatasetsApi~apiV1DatasetRelatedColumnNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiV1DatasetRelatedColumnNameGet(columnName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling apiV1DatasetRelatedColumnNameGet");
      }

      let pathParams = {
        'column_name': columnName
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelatedResponseSchema;

      return this.apiClient.callApi(
        '/api/v1/dataset/related/{column_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}