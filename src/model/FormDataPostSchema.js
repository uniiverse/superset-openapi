/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The FormDataPostSchema model module.
 * @module model/FormDataPostSchema
 * @version v1
 */
export class FormDataPostSchema {
  /**
   * Constructs a new <code>FormDataPostSchema</code>.
   * @alias module:model/FormDataPostSchema
   * @class
   * @param datasourceId {Number} The datasource ID
   * @param datasourceType {module:model/FormDataPostSchema.DatasourceTypeEnum} The datasource type
   * @param formData {String} Any type of JSON supported text.
   */
  constructor(datasourceId, datasourceType, formData) {
    this.datasourceId = datasourceId;
    this.datasourceType = datasourceType;
    this.formData = formData;
  }

  /**
   * Constructs a <code>FormDataPostSchema</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FormDataPostSchema} obj Optional instance to populate.
   * @return {module:model/FormDataPostSchema} The populated <code>FormDataPostSchema</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new FormDataPostSchema();
      if (data.hasOwnProperty('chart_id'))
        obj.chartId = ApiClient.convertToType(data['chart_id'], 'Number');
      if (data.hasOwnProperty('datasource_id'))
        obj.datasourceId = ApiClient.convertToType(data['datasource_id'], 'Number');
      if (data.hasOwnProperty('datasource_type'))
        obj.datasourceType = ApiClient.convertToType(data['datasource_type'], 'String');
      if (data.hasOwnProperty('form_data'))
        obj.formData = ApiClient.convertToType(data['form_data'], 'String');
    }
    return obj;
  }
}

/**
 * The chart ID
 * @member {Number} chartId
 */
FormDataPostSchema.prototype.chartId = undefined;

/**
 * The datasource ID
 * @member {Number} datasourceId
 */
FormDataPostSchema.prototype.datasourceId = undefined;

/**
 * Allowed values for the <code>datasourceType</code> property.
 * @enum {String}
 * @readonly
 */
FormDataPostSchema.DatasourceTypeEnum = {
  /**
   * value: "sl_table"
   * @const
   */
  slTable: "sl_table",

  /**
   * value: "table"
   * @const
   */
  table: "table",

  /**
   * value: "dataset"
   * @const
   */
  dataset: "dataset",

  /**
   * value: "query"
   * @const
   */
  query: "query",

  /**
   * value: "saved_query"
   * @const
   */
  savedQuery: "saved_query",

  /**
   * value: "view"
   * @const
   */
  view: "view"
};
/**
 * The datasource type
 * @member {module:model/FormDataPostSchema.DatasourceTypeEnum} datasourceType
 */
FormDataPostSchema.prototype.datasourceType = undefined;

/**
 * Any type of JSON supported text.
 * @member {String} formData
 */
FormDataPostSchema.prototype.formData = undefined;

