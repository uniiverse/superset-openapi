/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {ChartDataColumn} from './ChartDataColumn';

/**
 * The ChartDataAdhocMetricSchema model module.
 * @module model/ChartDataAdhocMetricSchema
 * @version v1
 */
export class ChartDataAdhocMetricSchema {
  /**
   * Constructs a new <code>ChartDataAdhocMetricSchema</code>.
   * @alias module:model/ChartDataAdhocMetricSchema
   * @class
   * @param expressionType {module:model/ChartDataAdhocMetricSchema.ExpressionTypeEnum} Simple or SQL metric
   */
  constructor(expressionType) {
    this.expressionType = expressionType;
  }

  /**
   * Constructs a <code>ChartDataAdhocMetricSchema</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChartDataAdhocMetricSchema} obj Optional instance to populate.
   * @return {module:model/ChartDataAdhocMetricSchema} The populated <code>ChartDataAdhocMetricSchema</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ChartDataAdhocMetricSchema();
      if (data.hasOwnProperty('aggregate'))
        obj.aggregate = ApiClient.convertToType(data['aggregate'], 'String');
      if (data.hasOwnProperty('column'))
        obj.column = ChartDataColumn.constructFromObject(data['column']);
      if (data.hasOwnProperty('expressionType'))
        obj.expressionType = ApiClient.convertToType(data['expressionType'], 'String');
      if (data.hasOwnProperty('hasCustomLabel'))
        obj.hasCustomLabel = ApiClient.convertToType(data['hasCustomLabel'], 'Boolean');
      if (data.hasOwnProperty('isExtra'))
        obj.isExtra = ApiClient.convertToType(data['isExtra'], 'Boolean');
      if (data.hasOwnProperty('label'))
        obj.label = ApiClient.convertToType(data['label'], 'String');
      if (data.hasOwnProperty('optionName'))
        obj.optionName = ApiClient.convertToType(data['optionName'], 'String');
      if (data.hasOwnProperty('sqlExpression'))
        obj.sqlExpression = ApiClient.convertToType(data['sqlExpression'], 'String');
      if (data.hasOwnProperty('timeGrain'))
        obj.timeGrain = ApiClient.convertToType(data['timeGrain'], 'String');
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>aggregate</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataAdhocMetricSchema.AggregateEnum = {
  /**
   * value: "AVG"
   * @const
   */
  AVG: "AVG",

  /**
   * value: "COUNT"
   * @const
   */
  COUNT: "COUNT",

  /**
   * value: "COUNT_DISTINCT"
   * @const
   */
  COUNT_DISTINCT: "COUNT_DISTINCT",

  /**
   * value: "MAX"
   * @const
   */
  MAX: "MAX",

  /**
   * value: "MIN"
   * @const
   */
  MIN: "MIN",

  /**
   * value: "SUM"
   * @const
   */
  SUM: "SUM"
};
/**
 * Aggregation operator.Only required for simple expression types.
 * @member {module:model/ChartDataAdhocMetricSchema.AggregateEnum} aggregate
 */
ChartDataAdhocMetricSchema.prototype.aggregate = undefined;

/**
 * @member {module:model/ChartDataColumn} column
 */
ChartDataAdhocMetricSchema.prototype.column = undefined;

/**
 * Allowed values for the <code>expressionType</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataAdhocMetricSchema.ExpressionTypeEnum = {
  /**
   * value: "SIMPLE"
   * @const
   */
  SIMPLE: "SIMPLE",

  /**
   * value: "SQL"
   * @const
   */
  SQL: "SQL"
};
/**
 * Simple or SQL metric
 * @member {module:model/ChartDataAdhocMetricSchema.ExpressionTypeEnum} expressionType
 */
ChartDataAdhocMetricSchema.prototype.expressionType = undefined;

/**
 * When false, the label will be automatically generated based on the aggregate expression. When true, a custom label has to be specified.
 * @member {Boolean} hasCustomLabel
 */
ChartDataAdhocMetricSchema.prototype.hasCustomLabel = undefined;

/**
 * Indicates if the filter has been added by a filter component as opposed to being a part of the original query.
 * @member {Boolean} isExtra
 */
ChartDataAdhocMetricSchema.prototype.isExtra = undefined;

/**
 * Label for the metric. Is automatically generated unlesshasCustomLabel is true, in which case label must be defined.
 * @member {String} label
 */
ChartDataAdhocMetricSchema.prototype.label = undefined;

/**
 * Unique identifier. Can be any string value, as long as all metrics have a unique identifier. If undefined, a random namewill be generated.
 * @member {String} optionName
 */
ChartDataAdhocMetricSchema.prototype.optionName = undefined;

/**
 * The metric as defined by a SQL aggregate expression. Only required for SQL expression type.
 * @member {String} sqlExpression
 */
ChartDataAdhocMetricSchema.prototype.sqlExpression = undefined;

/**
 * Optional time grain for temporal filters
 * @member {String} timeGrain
 */
ChartDataAdhocMetricSchema.prototype.timeGrain = undefined;

