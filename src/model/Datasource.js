/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The Datasource model module.
 * @module model/Datasource
 * @version v1
 */
export class Datasource {
  /**
   * Constructs a new <code>Datasource</code>.
   * @alias module:model/Datasource
   * @class
   * @param datasourceType {module:model/Datasource.DatasourceTypeEnum} The type of dataset/datasource identified on `datasource_id`.
   */
  constructor(datasourceType) {
    this.datasourceType = datasourceType;
  }

  /**
   * Constructs a <code>Datasource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Datasource} obj Optional instance to populate.
   * @return {module:model/Datasource} The populated <code>Datasource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Datasource();
      if (data.hasOwnProperty('database_name'))
        obj.databaseName = ApiClient.convertToType(data['database_name'], 'String');
      if (data.hasOwnProperty('datasource_name'))
        obj.datasourceName = ApiClient.convertToType(data['datasource_name'], 'String');
      if (data.hasOwnProperty('datasource_type'))
        obj.datasourceType = ApiClient.convertToType(data['datasource_type'], 'String');
      if (data.hasOwnProperty('schema'))
        obj.schema = ApiClient.convertToType(data['schema'], 'String');
    }
    return obj;
  }
}

/**
 * Datasource name
 * @member {String} databaseName
 */
Datasource.prototype.databaseName = undefined;

/**
 * The datasource name.
 * @member {String} datasourceName
 */
Datasource.prototype.datasourceName = undefined;

/**
 * Allowed values for the <code>datasourceType</code> property.
 * @enum {String}
 * @readonly
 */
Datasource.DatasourceTypeEnum = {
  /**
   * value: "sl_table"
   * @const
   */
  slTable: "sl_table",

  /**
   * value: "table"
   * @const
   */
  table: "table",

  /**
   * value: "dataset"
   * @const
   */
  dataset: "dataset",

  /**
   * value: "query"
   * @const
   */
  query: "query",

  /**
   * value: "saved_query"
   * @const
   */
  savedQuery: "saved_query",

  /**
   * value: "view"
   * @const
   */
  view: "view"
};
/**
 * The type of dataset/datasource identified on `datasource_id`.
 * @member {module:model/Datasource.DatasourceTypeEnum} datasourceType
 */
Datasource.prototype.datasourceType = undefined;

/**
 * Datasource schema
 * @member {String} schema
 */
Datasource.prototype.schema = undefined;

