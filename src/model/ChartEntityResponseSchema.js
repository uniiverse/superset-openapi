/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ChartEntityResponseSchema model module.
 * @module model/ChartEntityResponseSchema
 * @version v1
 */
export class ChartEntityResponseSchema {
  /**
   * Constructs a new <code>ChartEntityResponseSchema</code>.
   * @alias module:model/ChartEntityResponseSchema
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ChartEntityResponseSchema</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChartEntityResponseSchema} obj Optional instance to populate.
   * @return {module:model/ChartEntityResponseSchema} The populated <code>ChartEntityResponseSchema</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ChartEntityResponseSchema();
      if (data.hasOwnProperty('cache_timeout'))
        obj.cacheTimeout = ApiClient.convertToType(data['cache_timeout'], 'Number');
      if (data.hasOwnProperty('certification_details'))
        obj.certificationDetails = ApiClient.convertToType(data['certification_details'], 'String');
      if (data.hasOwnProperty('certified_by'))
        obj.certifiedBy = ApiClient.convertToType(data['certified_by'], 'String');
      if (data.hasOwnProperty('changed_on'))
        obj.changedOn = ApiClient.convertToType(data['changed_on'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('description_markeddown'))
        obj.descriptionMarkeddown = ApiClient.convertToType(data['description_markeddown'], 'String');
      if (data.hasOwnProperty('form_data'))
        obj.formData = ApiClient.convertToType(data['form_data'], Object);
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('slice_name'))
        obj.sliceName = ApiClient.convertToType(data['slice_name'], 'String');
      if (data.hasOwnProperty('slice_url'))
        obj.sliceUrl = ApiClient.convertToType(data['slice_url'], 'String');
    }
    return obj;
  }
}

/**
 * Duration (in seconds) of the caching timeout for this chart. Note this defaults to the datasource/table timeout if undefined.
 * @member {Number} cacheTimeout
 */
ChartEntityResponseSchema.prototype.cacheTimeout = undefined;

/**
 * Details of the certification
 * @member {String} certificationDetails
 */
ChartEntityResponseSchema.prototype.certificationDetails = undefined;

/**
 * Person or group that has certified this chart
 * @member {String} certifiedBy
 */
ChartEntityResponseSchema.prototype.certifiedBy = undefined;

/**
 * The ISO date that the chart was last changed.
 * @member {String} changedOn
 */
ChartEntityResponseSchema.prototype.changedOn = undefined;

/**
 * A description of the chart propose.
 * @member {String} description
 */
ChartEntityResponseSchema.prototype.description = undefined;

/**
 * Sanitized HTML version of the chart description.
 * @member {String} descriptionMarkeddown
 */
ChartEntityResponseSchema.prototype.descriptionMarkeddown = undefined;

/**
 * Form data from the Explore controls used to form the chart's data query.
 * @member {Object} formData
 */
ChartEntityResponseSchema.prototype.formData = undefined;

/**
 * The id of the chart.
 * @member {Number} id
 */
ChartEntityResponseSchema.prototype.id = undefined;

/**
 * The name of the chart.
 * @member {String} sliceName
 */
ChartEntityResponseSchema.prototype.sliceName = undefined;

/**
 * The URL of the chart.
 * @member {String} sliceUrl
 */
ChartEntityResponseSchema.prototype.sliceUrl = undefined;

