/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {ChartDataDatasource} from './ChartDataDatasource';
import {ChartDataQueryObject} from './ChartDataQueryObject';

/**
 * The ChartDataQueryContextSchema model module.
 * @module model/ChartDataQueryContextSchema
 * @version v1
 */
export class ChartDataQueryContextSchema {
  /**
   * Constructs a new <code>ChartDataQueryContextSchema</code>.
   * @alias module:model/ChartDataQueryContextSchema
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ChartDataQueryContextSchema</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChartDataQueryContextSchema} obj Optional instance to populate.
   * @return {module:model/ChartDataQueryContextSchema} The populated <code>ChartDataQueryContextSchema</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ChartDataQueryContextSchema();
      if (data.hasOwnProperty('custom_cache_timeout'))
        obj.customCacheTimeout = ApiClient.convertToType(data['custom_cache_timeout'], 'Number');
      if (data.hasOwnProperty('datasource'))
        obj.datasource = ChartDataDatasource.constructFromObject(data['datasource']);
      if (data.hasOwnProperty('force'))
        obj.force = ApiClient.convertToType(data['force'], 'Boolean');
      if (data.hasOwnProperty('form_data'))
        obj.formData = ApiClient.convertToType(data['form_data'], Object);
      if (data.hasOwnProperty('queries'))
        obj.queries = ApiClient.convertToType(data['queries'], [ChartDataQueryObject]);
      if (data.hasOwnProperty('result_format'))
        obj.resultFormat = ApiClient.convertToType(data['result_format'], Object);
      if (data.hasOwnProperty('result_type'))
        obj.resultType = ApiClient.convertToType(data['result_type'], Object);
    }
    return obj;
  }
}

/**
 * Override the default cache timeout
 * @member {Number} customCacheTimeout
 */
ChartDataQueryContextSchema.prototype.customCacheTimeout = undefined;

/**
 * @member {module:model/ChartDataDatasource} datasource
 */
ChartDataQueryContextSchema.prototype.datasource = undefined;

/**
 * Should the queries be forced to load from the source. Default: `false`
 * @member {Boolean} force
 */
ChartDataQueryContextSchema.prototype.force = undefined;

/**
 * @member {Object} formData
 */
ChartDataQueryContextSchema.prototype.formData = undefined;

/**
 * @member {Array.<module:model/ChartDataQueryObject>} queries
 */
ChartDataQueryContextSchema.prototype.queries = undefined;

/**
 * @member {Object} resultFormat
 */
ChartDataQueryContextSchema.prototype.resultFormat = undefined;

/**
 * @member {Object} resultType
 */
ChartDataQueryContextSchema.prototype.resultType = undefined;

