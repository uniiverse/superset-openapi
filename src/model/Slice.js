/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The Slice model module.
 * @module model/Slice
 * @version v1
 */
export class Slice {
  /**
   * Constructs a new <code>Slice</code>.
   * @alias module:model/Slice
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Slice</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Slice} obj Optional instance to populate.
   * @return {module:model/Slice} The populated <code>Slice</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Slice();
      if (data.hasOwnProperty('cache_timeout'))
        obj.cacheTimeout = ApiClient.convertToType(data['cache_timeout'], 'Number');
      if (data.hasOwnProperty('certification_details'))
        obj.certificationDetails = ApiClient.convertToType(data['certification_details'], 'String');
      if (data.hasOwnProperty('certified_by'))
        obj.certifiedBy = ApiClient.convertToType(data['certified_by'], 'String');
      if (data.hasOwnProperty('changed_on'))
        obj.changedOn = ApiClient.convertToType(data['changed_on'], 'String');
      if (data.hasOwnProperty('changed_on_humanized'))
        obj.changedOnHumanized = ApiClient.convertToType(data['changed_on_humanized'], 'String');
      if (data.hasOwnProperty('datasource'))
        obj.datasource = ApiClient.convertToType(data['datasource'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('description_markeddown'))
        obj.descriptionMarkeddown = ApiClient.convertToType(data['description_markeddown'], 'String');
      if (data.hasOwnProperty('edit_url'))
        obj.editUrl = ApiClient.convertToType(data['edit_url'], 'String');
      if (data.hasOwnProperty('form_data'))
        obj.formData = ApiClient.convertToType(data['form_data'], Object);
      if (data.hasOwnProperty('is_managed_externally'))
        obj.isManagedExternally = ApiClient.convertToType(data['is_managed_externally'], 'Boolean');
      if (data.hasOwnProperty('modified'))
        obj.modified = ApiClient.convertToType(data['modified'], 'String');
      if (data.hasOwnProperty('owners'))
        obj.owners = ApiClient.convertToType(data['owners'], ['Number']);
      if (data.hasOwnProperty('query_context'))
        obj.queryContext = ApiClient.convertToType(data['query_context'], Object);
      if (data.hasOwnProperty('slice_id'))
        obj.sliceId = ApiClient.convertToType(data['slice_id'], 'Number');
      if (data.hasOwnProperty('slice_name'))
        obj.sliceName = ApiClient.convertToType(data['slice_name'], 'String');
      if (data.hasOwnProperty('slice_url'))
        obj.sliceUrl = ApiClient.convertToType(data['slice_url'], 'String');
    }
    return obj;
  }
}

/**
 * Duration (in seconds) of the caching timeout for this chart.
 * @member {Number} cacheTimeout
 */
Slice.prototype.cacheTimeout = undefined;

/**
 * Details of the certification.
 * @member {String} certificationDetails
 */
Slice.prototype.certificationDetails = undefined;

/**
 * Person or group that has certified this dashboard.
 * @member {String} certifiedBy
 */
Slice.prototype.certifiedBy = undefined;

/**
 * Timestamp of the last modification.
 * @member {String} changedOn
 */
Slice.prototype.changedOn = undefined;

/**
 * Timestamp of the last modification in human readable form.
 * @member {String} changedOnHumanized
 */
Slice.prototype.changedOnHumanized = undefined;

/**
 * Datasource identifier.
 * @member {String} datasource
 */
Slice.prototype.datasource = undefined;

/**
 * Slice description.
 * @member {String} description
 */
Slice.prototype.description = undefined;

/**
 * Sanitized HTML version of the chart description.
 * @member {String} descriptionMarkeddown
 */
Slice.prototype.descriptionMarkeddown = undefined;

/**
 * The URL for editing the slice.
 * @member {String} editUrl
 */
Slice.prototype.editUrl = undefined;

/**
 * Form data associated with the slice.
 * @member {Object} formData
 */
Slice.prototype.formData = undefined;

/**
 * If the chart is managed outside externally.
 * @member {Boolean} isManagedExternally
 */
Slice.prototype.isManagedExternally = undefined;

/**
 * Last modification in human readable form.
 * @member {String} modified
 */
Slice.prototype.modified = undefined;

/**
 * Owners identifiers.
 * @member {Array.<Number>} owners
 */
Slice.prototype.owners = undefined;

/**
 * The context associated with the query.
 * @member {Object} queryContext
 */
Slice.prototype.queryContext = undefined;

/**
 * The slice ID.
 * @member {Number} sliceId
 */
Slice.prototype.sliceId = undefined;

/**
 * The slice name.
 * @member {String} sliceName
 */
Slice.prototype.sliceName = undefined;

/**
 * The slice URL.
 * @member {String} sliceUrl
 */
Slice.prototype.sliceUrl = undefined;

