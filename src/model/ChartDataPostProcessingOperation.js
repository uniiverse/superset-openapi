/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ChartDataPostProcessingOperation model module.
 * @module model/ChartDataPostProcessingOperation
 * @version v1
 */
export class ChartDataPostProcessingOperation {
  /**
   * Constructs a new <code>ChartDataPostProcessingOperation</code>.
   * @alias module:model/ChartDataPostProcessingOperation
   * @class
   * @param operation {module:model/ChartDataPostProcessingOperation.OperationEnum} Post processing operation type
   */
  constructor(operation) {
    this.operation = operation;
  }

  /**
   * Constructs a <code>ChartDataPostProcessingOperation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChartDataPostProcessingOperation} obj Optional instance to populate.
   * @return {module:model/ChartDataPostProcessingOperation} The populated <code>ChartDataPostProcessingOperation</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ChartDataPostProcessingOperation();
      if (data.hasOwnProperty('operation'))
        obj.operation = ApiClient.convertToType(data['operation'], 'String');
      if (data.hasOwnProperty('options'))
        obj.options = ApiClient.convertToType(data['options'], Object);
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>operation</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataPostProcessingOperation.OperationEnum = {
  /**
   * value: "aggregate"
   * @const
   */
  aggregate: "aggregate",

  /**
   * value: "boxplot"
   * @const
   */
  boxplot: "boxplot",

  /**
   * value: "compare"
   * @const
   */
  compare: "compare",

  /**
   * value: "contribution"
   * @const
   */
  contribution: "contribution",

  /**
   * value: "cum"
   * @const
   */
  cum: "cum",

  /**
   * value: "diff"
   * @const
   */
  diff: "diff",

  /**
   * value: "escape_separator"
   * @const
   */
  escapeSeparator: "escape_separator",

  /**
   * value: "flatten"
   * @const
   */
  flatten: "flatten",

  /**
   * value: "geodetic_parse"
   * @const
   */
  geodeticParse: "geodetic_parse",

  /**
   * value: "geohash_decode"
   * @const
   */
  geohashDecode: "geohash_decode",

  /**
   * value: "geohash_encode"
   * @const
   */
  geohashEncode: "geohash_encode",

  /**
   * value: "pivot"
   * @const
   */
  pivot: "pivot",

  /**
   * value: "prophet"
   * @const
   */
  prophet: "prophet",

  /**
   * value: "rename"
   * @const
   */
  rename: "rename",

  /**
   * value: "resample"
   * @const
   */
  resample: "resample",

  /**
   * value: "rolling"
   * @const
   */
  rolling: "rolling",

  /**
   * value: "select"
   * @const
   */
  select: "select",

  /**
   * value: "sort"
   * @const
   */
  sort: "sort",

  /**
   * value: "unescape_separator"
   * @const
   */
  unescapeSeparator: "unescape_separator"
};
/**
 * Post processing operation type
 * @member {module:model/ChartDataPostProcessingOperation.OperationEnum} operation
 */
ChartDataPostProcessingOperation.prototype.operation = undefined;

/**
 * Options specifying how to perform the operation. Please refer to the respective post processing operation option schemas. For example, `ChartDataPostProcessingOperationOptions` specifies the required options for the pivot operation.
 * @member {Object} options
 */
ChartDataPostProcessingOperation.prototype.options = undefined;

