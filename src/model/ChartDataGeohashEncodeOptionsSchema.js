/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ChartDataGeohashEncodeOptionsSchema model module.
 * @module model/ChartDataGeohashEncodeOptionsSchema
 * @version v1
 */
export class ChartDataGeohashEncodeOptionsSchema {
  /**
   * Constructs a new <code>ChartDataGeohashEncodeOptionsSchema</code>.
   * @alias module:model/ChartDataGeohashEncodeOptionsSchema
   * @class
   * @param geohash {String} Name of target column for encoded geohash string
   * @param latitude {String} Name of source latitude column
   * @param longitude {String} Name of source longitude column
   */
  constructor(geohash, latitude, longitude) {
    this.geohash = geohash;
    this.latitude = latitude;
    this.longitude = longitude;
  }

  /**
   * Constructs a <code>ChartDataGeohashEncodeOptionsSchema</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChartDataGeohashEncodeOptionsSchema} obj Optional instance to populate.
   * @return {module:model/ChartDataGeohashEncodeOptionsSchema} The populated <code>ChartDataGeohashEncodeOptionsSchema</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ChartDataGeohashEncodeOptionsSchema();
      if (data.hasOwnProperty('geohash'))
        obj.geohash = ApiClient.convertToType(data['geohash'], 'String');
      if (data.hasOwnProperty('latitude'))
        obj.latitude = ApiClient.convertToType(data['latitude'], 'String');
      if (data.hasOwnProperty('longitude'))
        obj.longitude = ApiClient.convertToType(data['longitude'], 'String');
    }
    return obj;
  }
}

/**
 * Name of target column for encoded geohash string
 * @member {String} geohash
 */
ChartDataGeohashEncodeOptionsSchema.prototype.geohash = undefined;

/**
 * Name of source latitude column
 * @member {String} latitude
 */
ChartDataGeohashEncodeOptionsSchema.prototype.latitude = undefined;

/**
 * Name of source longitude column
 * @member {String} longitude
 */
ChartDataGeohashEncodeOptionsSchema.prototype.longitude = undefined;

