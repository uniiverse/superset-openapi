/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ChartDataBoxplotOptionsSchema model module.
 * @module model/ChartDataBoxplotOptionsSchema
 * @version v1
 */
export class ChartDataBoxplotOptionsSchema {
  /**
   * Constructs a new <code>ChartDataBoxplotOptionsSchema</code>.
   * @alias module:model/ChartDataBoxplotOptionsSchema
   * @class
   * @param whiskerType {module:model/ChartDataBoxplotOptionsSchema.WhiskerTypeEnum} Whisker type. Any numpy function will work.
   */
  constructor(whiskerType) {
    this.whiskerType = whiskerType;
  }

  /**
   * Constructs a <code>ChartDataBoxplotOptionsSchema</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChartDataBoxplotOptionsSchema} obj Optional instance to populate.
   * @return {module:model/ChartDataBoxplotOptionsSchema} The populated <code>ChartDataBoxplotOptionsSchema</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ChartDataBoxplotOptionsSchema();
      if (data.hasOwnProperty('groupby'))
        obj.groupby = ApiClient.convertToType(data['groupby'], ['String']);
      if (data.hasOwnProperty('metrics'))
        obj.metrics = ApiClient.convertToType(data['metrics'], [Object]);
      if (data.hasOwnProperty('percentiles'))
        obj.percentiles = ApiClient.convertToType(data['percentiles'], Object);
      if (data.hasOwnProperty('whisker_type'))
        obj.whiskerType = ApiClient.convertToType(data['whisker_type'], 'String');
    }
    return obj;
  }
}

/**
 * @member {Array.<String>} groupby
 */
ChartDataBoxplotOptionsSchema.prototype.groupby = undefined;

/**
 * Aggregate expressions. Metrics can be passed as both references to datasource metrics (strings), or ad-hoc metricswhich are defined only within the query object. See `ChartDataAdhocMetricSchema` for the structure of ad-hoc metrics. When metrics is undefined or null, the query is executed without a groupby. However, when metrics is an array (length >= 0), a groupby clause is added to the query.
 * @member {Array.<Object>} metrics
 */
ChartDataBoxplotOptionsSchema.prototype.metrics = undefined;

/**
 * Upper and lower percentiles for percentile whisker type.
 * @member {Object} percentiles
 */
ChartDataBoxplotOptionsSchema.prototype.percentiles = undefined;

/**
 * Allowed values for the <code>whiskerType</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataBoxplotOptionsSchema.WhiskerTypeEnum = {
  /**
   * value: "tukey"
   * @const
   */
  tukey: "tukey",

  /**
   * value: "min/max"
   * @const
   */
  minmax: "min/max",

  /**
   * value: "percentile"
   * @const
   */
  percentile: "percentile"
};
/**
 * Whisker type. Any numpy function will work.
 * @member {module:model/ChartDataBoxplotOptionsSchema.WhiskerTypeEnum} whiskerType
 */
ChartDataBoxplotOptionsSchema.prototype.whiskerType = undefined;

