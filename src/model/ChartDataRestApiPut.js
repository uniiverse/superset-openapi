/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Tag} from './Tag';

/**
 * The ChartDataRestApiPut model module.
 * @module model/ChartDataRestApiPut
 * @version v1
 */
export class ChartDataRestApiPut {
  /**
   * Constructs a new <code>ChartDataRestApiPut</code>.
   * @alias module:model/ChartDataRestApiPut
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ChartDataRestApiPut</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChartDataRestApiPut} obj Optional instance to populate.
   * @return {module:model/ChartDataRestApiPut} The populated <code>ChartDataRestApiPut</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ChartDataRestApiPut();
      if (data.hasOwnProperty('cache_timeout'))
        obj.cacheTimeout = ApiClient.convertToType(data['cache_timeout'], 'Number');
      if (data.hasOwnProperty('certification_details'))
        obj.certificationDetails = ApiClient.convertToType(data['certification_details'], 'String');
      if (data.hasOwnProperty('certified_by'))
        obj.certifiedBy = ApiClient.convertToType(data['certified_by'], 'String');
      if (data.hasOwnProperty('dashboards'))
        obj.dashboards = ApiClient.convertToType(data['dashboards'], ['Number']);
      if (data.hasOwnProperty('datasource_id'))
        obj.datasourceId = ApiClient.convertToType(data['datasource_id'], 'Number');
      if (data.hasOwnProperty('datasource_type'))
        obj.datasourceType = ApiClient.convertToType(data['datasource_type'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('external_url'))
        obj.externalUrl = ApiClient.convertToType(data['external_url'], 'String');
      if (data.hasOwnProperty('is_managed_externally'))
        obj.isManagedExternally = ApiClient.convertToType(data['is_managed_externally'], 'Boolean');
      if (data.hasOwnProperty('owners'))
        obj.owners = ApiClient.convertToType(data['owners'], ['Number']);
      if (data.hasOwnProperty('params'))
        obj.params = ApiClient.convertToType(data['params'], 'String');
      if (data.hasOwnProperty('query_context'))
        obj.queryContext = ApiClient.convertToType(data['query_context'], 'String');
      if (data.hasOwnProperty('query_context_generation'))
        obj.queryContextGeneration = ApiClient.convertToType(data['query_context_generation'], 'Boolean');
      if (data.hasOwnProperty('slice_name'))
        obj.sliceName = ApiClient.convertToType(data['slice_name'], 'String');
      if (data.hasOwnProperty('tags'))
        obj.tags = ApiClient.convertToType(data['tags'], [Tag]);
      if (data.hasOwnProperty('viz_type'))
        obj.vizType = ApiClient.convertToType(data['viz_type'], 'String');
    }
    return obj;
  }
}

/**
 * Duration (in seconds) of the caching timeout for this chart. Note this defaults to the datasource/table timeout if undefined.
 * @member {Number} cacheTimeout
 */
ChartDataRestApiPut.prototype.cacheTimeout = undefined;

/**
 * Details of the certification
 * @member {String} certificationDetails
 */
ChartDataRestApiPut.prototype.certificationDetails = undefined;

/**
 * Person or group that has certified this chart
 * @member {String} certifiedBy
 */
ChartDataRestApiPut.prototype.certifiedBy = undefined;

/**
 * @member {Array.<Number>} dashboards
 */
ChartDataRestApiPut.prototype.dashboards = undefined;

/**
 * The id of the dataset/datasource this new chart will use. A complete datasource identification needs `datasouce_id` and `datasource_type`.
 * @member {Number} datasourceId
 */
ChartDataRestApiPut.prototype.datasourceId = undefined;

/**
 * Allowed values for the <code>datasourceType</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataRestApiPut.DatasourceTypeEnum = {
  /**
   * value: "sl_table"
   * @const
   */
  slTable: "sl_table",

  /**
   * value: "table"
   * @const
   */
  table: "table",

  /**
   * value: "dataset"
   * @const
   */
  dataset: "dataset",

  /**
   * value: "query"
   * @const
   */
  query: "query",

  /**
   * value: "saved_query"
   * @const
   */
  savedQuery: "saved_query",

  /**
   * value: "view"
   * @const
   */
  view: "view"
};
/**
 * The type of dataset/datasource identified on `datasource_id`.
 * @member {module:model/ChartDataRestApiPut.DatasourceTypeEnum} datasourceType
 */
ChartDataRestApiPut.prototype.datasourceType = undefined;

/**
 * A description of the chart propose.
 * @member {String} description
 */
ChartDataRestApiPut.prototype.description = undefined;

/**
 * @member {String} externalUrl
 */
ChartDataRestApiPut.prototype.externalUrl = undefined;

/**
 * @member {Boolean} isManagedExternally
 */
ChartDataRestApiPut.prototype.isManagedExternally = undefined;

/**
 * @member {Array.<Number>} owners
 */
ChartDataRestApiPut.prototype.owners = undefined;

/**
 * Parameters are generated dynamically when clicking the save or overwrite button in the explore view. This JSON object for power users who may want to alter specific parameters.
 * @member {String} params
 */
ChartDataRestApiPut.prototype.params = undefined;

/**
 * The query context represents the queries that need to run in order to generate the data the visualization, and in what format the data should be returned.
 * @member {String} queryContext
 */
ChartDataRestApiPut.prototype.queryContext = undefined;

/**
 * The query context generation represents whether the query_contextis user generated or not so that it does not update user modfiedstate.
 * @member {Boolean} queryContextGeneration
 */
ChartDataRestApiPut.prototype.queryContextGeneration = undefined;

/**
 * The name of the chart.
 * @member {String} sliceName
 */
ChartDataRestApiPut.prototype.sliceName = undefined;

/**
 * @member {Array.<module:model/Tag>} tags
 */
ChartDataRestApiPut.prototype.tags = undefined;

/**
 * The type of chart visualization used.
 * @member {String} vizType
 */
ChartDataRestApiPut.prototype.vizType = undefined;

