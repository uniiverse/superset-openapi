/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The DatabaseImportBody model module.
 * @module model/DatabaseImportBody
 * @version v1
 */
export class DatabaseImportBody {
  /**
   * Constructs a new <code>DatabaseImportBody</code>.
   * @alias module:model/DatabaseImportBody
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>DatabaseImportBody</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DatabaseImportBody} obj Optional instance to populate.
   * @return {module:model/DatabaseImportBody} The populated <code>DatabaseImportBody</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DatabaseImportBody();
      if (data.hasOwnProperty('formData'))
        obj.formData = ApiClient.convertToType(data['formData'], 'Blob');
      if (data.hasOwnProperty('overwrite'))
        obj.overwrite = ApiClient.convertToType(data['overwrite'], 'Boolean');
      if (data.hasOwnProperty('passwords'))
        obj.passwords = ApiClient.convertToType(data['passwords'], 'String');
      if (data.hasOwnProperty('ssh_tunnel_passwords'))
        obj.sshTunnelPasswords = ApiClient.convertToType(data['ssh_tunnel_passwords'], 'String');
      if (data.hasOwnProperty('ssh_tunnel_private_key_passwords'))
        obj.sshTunnelPrivateKeyPasswords = ApiClient.convertToType(data['ssh_tunnel_private_key_passwords'], 'String');
      if (data.hasOwnProperty('ssh_tunnel_private_keys'))
        obj.sshTunnelPrivateKeys = ApiClient.convertToType(data['ssh_tunnel_private_keys'], 'String');
    }
    return obj;
  }
}

/**
 * upload file (ZIP)
 * @member {Blob} formData
 */
DatabaseImportBody.prototype.formData = undefined;

/**
 * overwrite existing databases?
 * @member {Boolean} overwrite
 */
DatabaseImportBody.prototype.overwrite = undefined;

/**
 * JSON map of passwords for each featured database in the ZIP file. If the ZIP includes a database config in the path `databases/MyDatabase.yaml`, the password should be provided in the following format: `{\"databases/MyDatabase.yaml\": \"my_password\"}`.
 * @member {String} passwords
 */
DatabaseImportBody.prototype.passwords = undefined;

/**
 * JSON map of passwords for each ssh_tunnel associated to a featured database in the ZIP file. If the ZIP includes a ssh_tunnel config in the path `databases/MyDatabase.yaml`, the password should be provided in the following format: `{\"databases/MyDatabase.yaml\": \"my_password\"}`.
 * @member {String} sshTunnelPasswords
 */
DatabaseImportBody.prototype.sshTunnelPasswords = undefined;

/**
 * JSON map of private_key_passwords for each ssh_tunnel associated to a featured database in the ZIP file. If the ZIP includes a ssh_tunnel config in the path `databases/MyDatabase.yaml`, the private_key should be provided in the following format: `{\"databases/MyDatabase.yaml\": \"my_private_key_password\"}`.
 * @member {String} sshTunnelPrivateKeyPasswords
 */
DatabaseImportBody.prototype.sshTunnelPrivateKeyPasswords = undefined;

/**
 * JSON map of private_keys for each ssh_tunnel associated to a featured database in the ZIP file. If the ZIP includes a ssh_tunnel config in the path `databases/MyDatabase.yaml`, the private_key should be provided in the following format: `{\"databases/MyDatabase.yaml\": \"my_private_key\"}`.
 * @member {String} sshTunnelPrivateKeys
 */
DatabaseImportBody.prototype.sshTunnelPrivateKeys = undefined;

