/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ChartDataProphetOptionsSchema model module.
 * @module model/ChartDataProphetOptionsSchema
 * @version v1
 */
export class ChartDataProphetOptionsSchema {
  /**
   * Constructs a new <code>ChartDataProphetOptionsSchema</code>.
   * @alias module:model/ChartDataProphetOptionsSchema
   * @class
   * @param confidenceInterval {Number} Width of predicted confidence interval
   * @param periods {Number} Time periods (in units of `time_grain`) to predict into the future
   * @param timeGrain {module:model/ChartDataProphetOptionsSchema.TimeGrainEnum} Time grain used to specify time period increments in prediction. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
   */
  constructor(confidenceInterval, periods, timeGrain) {
    this.confidenceInterval = confidenceInterval;
    this.periods = periods;
    this.timeGrain = timeGrain;
  }

  /**
   * Constructs a <code>ChartDataProphetOptionsSchema</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChartDataProphetOptionsSchema} obj Optional instance to populate.
   * @return {module:model/ChartDataProphetOptionsSchema} The populated <code>ChartDataProphetOptionsSchema</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ChartDataProphetOptionsSchema();
      if (data.hasOwnProperty('confidence_interval'))
        obj.confidenceInterval = ApiClient.convertToType(data['confidence_interval'], 'Number');
      if (data.hasOwnProperty('monthly_seasonality'))
        obj.monthlySeasonality = ApiClient.convertToType(data['monthly_seasonality'], Object);
      if (data.hasOwnProperty('periods'))
        obj.periods = ApiClient.convertToType(data['periods'], 'Number');
      if (data.hasOwnProperty('time_grain'))
        obj.timeGrain = ApiClient.convertToType(data['time_grain'], 'String');
      if (data.hasOwnProperty('weekly_seasonality'))
        obj.weeklySeasonality = ApiClient.convertToType(data['weekly_seasonality'], Object);
      if (data.hasOwnProperty('yearly_seasonality'))
        obj.yearlySeasonality = ApiClient.convertToType(data['yearly_seasonality'], Object);
    }
    return obj;
  }
}

/**
 * Width of predicted confidence interval
 * @member {Number} confidenceInterval
 */
ChartDataProphetOptionsSchema.prototype.confidenceInterval = undefined;

/**
 * Should monthly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.
 * @member {Object} monthlySeasonality
 */
ChartDataProphetOptionsSchema.prototype.monthlySeasonality = undefined;

/**
 * Time periods (in units of `time_grain`) to predict into the future
 * @member {Number} periods
 */
ChartDataProphetOptionsSchema.prototype.periods = undefined;

/**
 * Allowed values for the <code>timeGrain</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataProphetOptionsSchema.TimeGrainEnum = {
  /**
   * value: "PT1S"
   * @const
   */
  pT1S: "PT1S",

  /**
   * value: "PT5S"
   * @const
   */
  pT5S: "PT5S",

  /**
   * value: "PT30S"
   * @const
   */
  pT30S: "PT30S",

  /**
   * value: "PT1M"
   * @const
   */
  pT1M: "PT1M",

  /**
   * value: "PT5M"
   * @const
   */
  pT5M: "PT5M",

  /**
   * value: "PT10M"
   * @const
   */
  pT10M: "PT10M",

  /**
   * value: "PT15M"
   * @const
   */
  pT15M: "PT15M",

  /**
   * value: "PT30M"
   * @const
   */
  pT30M: "PT30M",

  /**
   * value: "PT1H"
   * @const
   */
  pT1H: "PT1H",

  /**
   * value: "PT6H"
   * @const
   */
  pT6H: "PT6H",

  /**
   * value: "P1D"
   * @const
   */
  p1D: "P1D",

  /**
   * value: "P1W"
   * @const
   */
  p1W: "P1W",

  /**
   * value: "P1M"
   * @const
   */
  p1M: "P1M",

  /**
   * value: "P3M"
   * @const
   */
  p3M: "P3M",

  /**
   * value: "P1Y"
   * @const
   */
  p1Y: "P1Y",

  /**
   * value: "1969-12-28T00:00:00Z/P1W"
   * @const
   */
  _19691228T000000ZP1W: "1969-12-28T00:00:00Z/P1W",

  /**
   * value: "1969-12-29T00:00:00Z/P1W"
   * @const
   */
  _19691229T000000ZP1W: "1969-12-29T00:00:00Z/P1W",

  /**
   * value: "P1W/1970-01-03T00:00:00Z"
   * @const
   */
  p1W19700103T000000Z: "P1W/1970-01-03T00:00:00Z",

  /**
   * value: "P1W/1970-01-04T00:00:00Z"
   * @const
   */
  p1W19700104T000000Z: "P1W/1970-01-04T00:00:00Z"
};
/**
 * Time grain used to specify time period increments in prediction. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
 * @member {module:model/ChartDataProphetOptionsSchema.TimeGrainEnum} timeGrain
 */
ChartDataProphetOptionsSchema.prototype.timeGrain = undefined;

/**
 * Should weekly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.
 * @member {Object} weeklySeasonality
 */
ChartDataProphetOptionsSchema.prototype.weeklySeasonality = undefined;

/**
 * Should yearly seasonality be applied. An integer value will specify Fourier order of seasonality, `None` will automatically detect seasonality.
 * @member {Object} yearlySeasonality
 */
ChartDataProphetOptionsSchema.prototype.yearlySeasonality = undefined;

