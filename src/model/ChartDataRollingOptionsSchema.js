/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ChartDataRollingOptionsSchema model module.
 * @module model/ChartDataRollingOptionsSchema
 * @version v1
 */
export class ChartDataRollingOptionsSchema {
  /**
   * Constructs a new <code>ChartDataRollingOptionsSchema</code>.
   * @alias module:model/ChartDataRollingOptionsSchema
   * @class
   * @param rollingType {module:model/ChartDataRollingOptionsSchema.RollingTypeEnum} Type of rolling window. Any numpy function will work.
   * @param window {Number} Size of the rolling window in days.
   */
  constructor(rollingType, window) {
    this.rollingType = rollingType;
    this.window = window;
  }

  /**
   * Constructs a <code>ChartDataRollingOptionsSchema</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChartDataRollingOptionsSchema} obj Optional instance to populate.
   * @return {module:model/ChartDataRollingOptionsSchema} The populated <code>ChartDataRollingOptionsSchema</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ChartDataRollingOptionsSchema();
      if (data.hasOwnProperty('center'))
        obj.center = ApiClient.convertToType(data['center'], 'Boolean');
      if (data.hasOwnProperty('min_periods'))
        obj.minPeriods = ApiClient.convertToType(data['min_periods'], 'Number');
      if (data.hasOwnProperty('rolling_type'))
        obj.rollingType = ApiClient.convertToType(data['rolling_type'], 'String');
      if (data.hasOwnProperty('rolling_type_options'))
        obj.rollingTypeOptions = ApiClient.convertToType(data['rolling_type_options'], Object);
      if (data.hasOwnProperty('win_type'))
        obj.winType = ApiClient.convertToType(data['win_type'], 'String');
      if (data.hasOwnProperty('window'))
        obj.window = ApiClient.convertToType(data['window'], 'Number');
    }
    return obj;
  }
}

/**
 * Should the label be at the center of the window.Default: `false`
 * @member {Boolean} center
 */
ChartDataRollingOptionsSchema.prototype.center = undefined;

/**
 * The minimum amount of periods required for a row to be included in the result set.
 * @member {Number} minPeriods
 */
ChartDataRollingOptionsSchema.prototype.minPeriods = undefined;

/**
 * Allowed values for the <code>rollingType</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataRollingOptionsSchema.RollingTypeEnum = {
  /**
   * value: "average"
   * @const
   */
  average: "average",

  /**
   * value: "argmin"
   * @const
   */
  argmin: "argmin",

  /**
   * value: "argmax"
   * @const
   */
  argmax: "argmax",

  /**
   * value: "cumsum"
   * @const
   */
  cumsum: "cumsum",

  /**
   * value: "cumprod"
   * @const
   */
  cumprod: "cumprod",

  /**
   * value: "max"
   * @const
   */
  max: "max",

  /**
   * value: "mean"
   * @const
   */
  mean: "mean",

  /**
   * value: "median"
   * @const
   */
  median: "median",

  /**
   * value: "nansum"
   * @const
   */
  nansum: "nansum",

  /**
   * value: "nanmin"
   * @const
   */
  nanmin: "nanmin",

  /**
   * value: "nanmax"
   * @const
   */
  nanmax: "nanmax",

  /**
   * value: "nanmean"
   * @const
   */
  nanmean: "nanmean",

  /**
   * value: "nanmedian"
   * @const
   */
  nanmedian: "nanmedian",

  /**
   * value: "nanpercentile"
   * @const
   */
  nanpercentile: "nanpercentile",

  /**
   * value: "min"
   * @const
   */
  min: "min",

  /**
   * value: "percentile"
   * @const
   */
  percentile: "percentile",

  /**
   * value: "prod"
   * @const
   */
  prod: "prod",

  /**
   * value: "product"
   * @const
   */
  product: "product",

  /**
   * value: "std"
   * @const
   */
  std: "std",

  /**
   * value: "sum"
   * @const
   */
  sum: "sum",

  /**
   * value: "var"
   * @const
   */
  _var: "var"
};
/**
 * Type of rolling window. Any numpy function will work.
 * @member {module:model/ChartDataRollingOptionsSchema.RollingTypeEnum} rollingType
 */
ChartDataRollingOptionsSchema.prototype.rollingType = undefined;

/**
 * Optional options to pass to rolling method. Needed for e.g. quantile operation.
 * @member {Object} rollingTypeOptions
 */
ChartDataRollingOptionsSchema.prototype.rollingTypeOptions = undefined;

/**
 * Allowed values for the <code>winType</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataRollingOptionsSchema.WinTypeEnum = {
  /**
   * value: "boxcar"
   * @const
   */
  boxcar: "boxcar",

  /**
   * value: "triang"
   * @const
   */
  triang: "triang",

  /**
   * value: "blackman"
   * @const
   */
  blackman: "blackman",

  /**
   * value: "hamming"
   * @const
   */
  hamming: "hamming",

  /**
   * value: "bartlett"
   * @const
   */
  bartlett: "bartlett",

  /**
   * value: "parzen"
   * @const
   */
  parzen: "parzen",

  /**
   * value: "bohman"
   * @const
   */
  bohman: "bohman",

  /**
   * value: "blackmanharris"
   * @const
   */
  blackmanharris: "blackmanharris",

  /**
   * value: "nuttall"
   * @const
   */
  nuttall: "nuttall",

  /**
   * value: "barthann"
   * @const
   */
  barthann: "barthann",

  /**
   * value: "kaiser"
   * @const
   */
  kaiser: "kaiser",

  /**
   * value: "gaussian"
   * @const
   */
  gaussian: "gaussian",

  /**
   * value: "general_gaussian"
   * @const
   */
  generalGaussian: "general_gaussian",

  /**
   * value: "slepian"
   * @const
   */
  slepian: "slepian",

  /**
   * value: "exponential"
   * @const
   */
  exponential: "exponential"
};
/**
 * Type of window function. See [SciPy window functions](https://docs.scipy.org/doc/scipy/reference /signal.windows.html#module-scipy.signal.windows) for more details. Some window functions require passing additional parameters to `rolling_type_options`. For instance, to use `gaussian`, the parameter `std` needs to be provided.
 * @member {module:model/ChartDataRollingOptionsSchema.WinTypeEnum} winType
 */
ChartDataRollingOptionsSchema.prototype.winType = undefined;

/**
 * Size of the rolling window in days.
 * @member {Number} window
 */
ChartDataRollingOptionsSchema.prototype.window = undefined;

