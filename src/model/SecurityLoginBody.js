/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The SecurityLoginBody model module.
 * @module model/SecurityLoginBody
 * @version v1
 */
export class SecurityLoginBody {
  /**
   * Constructs a new <code>SecurityLoginBody</code>.
   * @alias module:model/SecurityLoginBody
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>SecurityLoginBody</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SecurityLoginBody} obj Optional instance to populate.
   * @return {module:model/SecurityLoginBody} The populated <code>SecurityLoginBody</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SecurityLoginBody();
      if (data.hasOwnProperty('password'))
        obj.password = ApiClient.convertToType(data['password'], 'String');
      if (data.hasOwnProperty('provider'))
        obj.provider = ApiClient.convertToType(data['provider'], 'String');
      if (data.hasOwnProperty('refresh'))
        obj.refresh = ApiClient.convertToType(data['refresh'], 'Boolean');
      if (data.hasOwnProperty('username'))
        obj.username = ApiClient.convertToType(data['username'], 'String');
    }
    return obj;
  }
}

/**
 * The password for authentication
 * @member {String} password
 */
SecurityLoginBody.prototype.password = undefined;

/**
 * Allowed values for the <code>provider</code> property.
 * @enum {String}
 * @readonly
 */
SecurityLoginBody.ProviderEnum = {
  /**
   * value: "db"
   * @const
   */
  db: "db",

  /**
   * value: "ldap"
   * @const
   */
  ldap: "ldap"
};
/**
 * Choose an authentication provider
 * @member {module:model/SecurityLoginBody.ProviderEnum} provider
 */
SecurityLoginBody.prototype.provider = undefined;

/**
 * If true a refresh token is provided also
 * @member {Boolean} refresh
 */
SecurityLoginBody.prototype.refresh = undefined;

/**
 * The username for authentication
 * @member {String} username
 */
SecurityLoginBody.prototype.username = undefined;

