/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ChartDataFilter model module.
 * @module model/ChartDataFilter
 * @version v1
 */
export class ChartDataFilter {
  /**
   * Constructs a new <code>ChartDataFilter</code>.
   * @alias module:model/ChartDataFilter
   * @class
   * @param col {Object} The column to filter by. Can be either a string (physical or saved expression) or an object (adhoc column)
   * @param op {module:model/ChartDataFilter.OpEnum} The comparison operator.
   */
  constructor(col, op) {
    this.col = col;
    this.op = op;
  }

  /**
   * Constructs a <code>ChartDataFilter</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChartDataFilter} obj Optional instance to populate.
   * @return {module:model/ChartDataFilter} The populated <code>ChartDataFilter</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ChartDataFilter();
      if (data.hasOwnProperty('col'))
        obj.col = ApiClient.convertToType(data['col'], Object);
      if (data.hasOwnProperty('grain'))
        obj.grain = ApiClient.convertToType(data['grain'], 'String');
      if (data.hasOwnProperty('isExtra'))
        obj.isExtra = ApiClient.convertToType(data['isExtra'], 'Boolean');
      if (data.hasOwnProperty('op'))
        obj.op = ApiClient.convertToType(data['op'], 'String');
      if (data.hasOwnProperty('val'))
        obj.val = ApiClient.convertToType(data['val'], Object);
    }
    return obj;
  }
}

/**
 * The column to filter by. Can be either a string (physical or saved expression) or an object (adhoc column)
 * @member {Object} col
 */
ChartDataFilter.prototype.col = undefined;

/**
 * Optional time grain for temporal filters
 * @member {String} grain
 */
ChartDataFilter.prototype.grain = undefined;

/**
 * Indicates if the filter has been added by a filter component as opposed to being a part of the original query.
 * @member {Boolean} isExtra
 */
ChartDataFilter.prototype.isExtra = undefined;

/**
 * Allowed values for the <code>op</code> property.
 * @enum {String}
 * @readonly
 */
ChartDataFilter.OpEnum = {
  /**
   * value: "=="
   * @const
   */
  : "==",

  /**
   * value: "!="
   * @const
   */
  NOT_EQUAL: "!=",

  /**
   * value: ">"
   * @const
   */
  GREATER_THAN: ">",

  /**
   * value: "<"
   * @const
   */
  LESS_THAN: "<",

  /**
   * value: ">="
   * @const
   */
  GREATER_THAN_OR_EQUAL_TO: ">=",

  /**
   * value: "<="
   * @const
   */
  LESS_THAN_OR_EQUAL_TO: "<=",

  /**
   * value: "LIKE"
   * @const
   */
  LIKE: "LIKE",

  /**
   * value: "ILIKE"
   * @const
   */
  ILIKE: "ILIKE",

  /**
   * value: "IS NULL"
   * @const
   */
  IS_NULL: "IS NULL",

  /**
   * value: "IS NOT NULL"
   * @const
   */
  IS_NOT_NULL: "IS NOT NULL",

  /**
   * value: "IN"
   * @const
   */
  IN: "IN",

  /**
   * value: "NOT IN"
   * @const
   */
  NOT_IN: "NOT IN",

  /**
   * value: "REGEX"
   * @const
   */
  REGEX: "REGEX",

  /**
   * value: "IS TRUE"
   * @const
   */
  IS_TRUE: "IS TRUE",

  /**
   * value: "IS FALSE"
   * @const
   */
  IS_FALSE: "IS FALSE",

  /**
   * value: "TEMPORAL_RANGE"
   * @const
   */
  TEMPORAL_RANGE: "TEMPORAL_RANGE"
};
/**
 * The comparison operator.
 * @member {module:model/ChartDataFilter.OpEnum} op
 */
ChartDataFilter.prototype.op = undefined;

/**
 * The value or values to compare against. Can be a string, integer, decimal, None or list, depending on the operator.
 * @member {Object} val
 */
ChartDataFilter.prototype.val = undefined;

