/* tslint:disable */
/* eslint-disable */
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse400 } from '../models';
/**
 * OpenApiApi - axios parameter creator
 * @export
 */
export const OpenApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the OpenAPI spec for a specific API version
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVersionOpenapiGet: async (version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling apiVersionOpenapiGet.');
            }
            const localVarPath = `/api/{version}/_openapi`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenApiApi - functional programming interface
 * @export
 */
export const OpenApiApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get the OpenAPI spec for a specific API version
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVersionOpenapiGet(version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await OpenApiApiAxiosParamCreator(configuration).apiVersionOpenapiGet(version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OpenApiApi - factory interface
 * @export
 */
export const OpenApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get the OpenAPI spec for a specific API version
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVersionOpenapiGet(version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return OpenApiApiFp(configuration).apiVersionOpenapiGet(version, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OpenApiApi - object-oriented interface
 * @export
 * @class OpenApiApi
 * @extends {BaseAPI}
 */
export class OpenApiApi extends BaseAPI {
    /**
     * Get the OpenAPI spec for a specific API version
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenApiApi
     */
    public async apiVersionOpenapiGet(version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return OpenApiApiFp(this.configuration).apiVersionOpenapiGet(version, options).then((request) => request(this.axios, this.basePath));
    }
}
