/* tslint:disable */
/* eslint-disable */
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DeleteTagsSchema } from '../models';
import { GetInfoSchema } from '../models';
import { GetItemSchema } from '../models';
import { GetListSchema } from '../models';
import { GetRelatedSchema } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse20057 } from '../models';
import { InlineResponse20058 } from '../models';
import { InlineResponse20059 } from '../models';
import { InlineResponse20060 } from '../models';
import { InlineResponse20115 } from '../models';
import { InlineResponse400 } from '../models';
import { ObjectTypeObjectIdBody } from '../models';
import { RelatedResponseSchema } from '../models';
import { TagRestApiPost } from '../models';
import { TagRestApiPut } from '../models';
/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes multiple Tags. This will remove all tagged objects with this tag
         * @param {DeleteTagsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagDelete: async (q?: DeleteTagsSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tag/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of tags, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagGet: async (q?: GetListSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tag/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all objects associated with a Tag.
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagGetObjectsGet: async (tagId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling apiV1TagGetObjectsGet.');
            }
            const localVarPath = `/api/v1/tag/get_objects/`
                .replace(`{${"tag_id"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Several metadata information about tag API endpoints.
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagInfoGet: async (q?: GetInfoSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tag/_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add tags to an object..
         * @param {ObjectTypeObjectIdBody} body Tag schema
         * @param {number} objectType 
         * @param {number} objectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagObjectTypeObjectIdPost: async (body: ObjectTypeObjectIdBody, objectType: number, objectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1TagObjectTypeObjectIdPost.');
            }
            // verify required parameter 'objectType' is not null or undefined
            if (objectType === null || objectType === undefined) {
                throw new RequiredError('objectType','Required parameter objectType was null or undefined when calling apiV1TagObjectTypeObjectIdPost.');
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError('objectId','Required parameter objectId was null or undefined when calling apiV1TagObjectTypeObjectIdPost.');
            }
            const localVarPath = `/api/v1/tag/{object_type}/{object_id}/`
                .replace(`{${"object_type"}}`, encodeURIComponent(String(objectType)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Tagged Object.
         * @param {string} tag 
         * @param {number} objectType 
         * @param {number} objectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagObjectTypeObjectIdTagDelete: async (tag: string, objectType: number, objectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag','Required parameter tag was null or undefined when calling apiV1TagObjectTypeObjectIdTagDelete.');
            }
            // verify required parameter 'objectType' is not null or undefined
            if (objectType === null || objectType === undefined) {
                throw new RequiredError('objectType','Required parameter objectType was null or undefined when calling apiV1TagObjectTypeObjectIdTagDelete.');
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError('objectId','Required parameter objectId was null or undefined when calling apiV1TagObjectTypeObjectIdTagDelete.');
            }
            const localVarPath = `/api/v1/tag/{object_type}/{object_id}/{tag}/`
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)))
                .replace(`{${"object_type"}}`, encodeURIComponent(String(objectType)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPkDelete: async (pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1TagPkDelete.');
            }
            const localVarPath = `/api/v1/tag/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a tag detail information.
         * @param {number} pk 
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPkGet: async (pk: number, q?: GetItemSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1TagPkGet.');
            }
            const localVarPath = `/api/v1/tag/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TagRestApiPut} body Model schema
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPkPut: async (body: TagRestApiPut, pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1TagPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1TagPkPut.');
            }
            const localVarPath = `/api/v1/tag/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TagRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPost: async (body: TagRestApiPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1TagPost.');
            }
            const localVarPath = `/api/v1/tag/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} columnName 
         * @param {GetRelatedSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagRelatedColumnNameGet: async (columnName: string, q?: GetRelatedSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName','Required parameter columnName was null or undefined when calling apiV1TagRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/tag/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes multiple Tags. This will remove all tagged objects with this tag
         * @param {DeleteTagsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagDelete(q?: DeleteTagsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).apiV1TagDelete(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of tags, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20057>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).apiV1TagGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets all objects associated with a Tag.
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagGetObjectsGet(tagId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20058>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).apiV1TagGetObjectsGet(tagId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Several metadata information about tag API endpoints.
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).apiV1TagInfoGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add tags to an object..
         * @param {ObjectTypeObjectIdBody} body Tag schema
         * @param {number} objectType 
         * @param {number} objectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagObjectTypeObjectIdPost(body: ObjectTypeObjectIdBody, objectType: number, objectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).apiV1TagObjectTypeObjectIdPost(body, objectType, objectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a Tagged Object.
         * @param {string} tag 
         * @param {number} objectType 
         * @param {number} objectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagObjectTypeObjectIdTagDelete(tag: string, objectType: number, objectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).apiV1TagObjectTypeObjectIdTagDelete(tag, objectType, objectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagPkDelete(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).apiV1TagPkDelete(pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a tag detail information.
         * @param {number} pk 
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20059>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).apiV1TagPkGet(pk, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {TagRestApiPut} body Model schema
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagPkPut(body: TagRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20060>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).apiV1TagPkPut(body, pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {TagRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagPost(body: TagRestApiPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20115>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).apiV1TagPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} columnName 
         * @param {GetRelatedSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RelatedResponseSchema>>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).apiV1TagRelatedColumnNameGet(columnName, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes multiple Tags. This will remove all tagged objects with this tag
         * @param {DeleteTagsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagDelete(q?: DeleteTagsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return TagsApiFp(configuration).apiV1TagDelete(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of tags, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20057>> {
            return TagsApiFp(configuration).apiV1TagGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all objects associated with a Tag.
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagGetObjectsGet(tagId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20058>> {
            return TagsApiFp(configuration).apiV1TagGetObjectsGet(tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * Several metadata information about tag API endpoints.
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return TagsApiFp(configuration).apiV1TagInfoGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Add tags to an object..
         * @param {ObjectTypeObjectIdBody} body Tag schema
         * @param {number} objectType 
         * @param {number} objectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagObjectTypeObjectIdPost(body: ObjectTypeObjectIdBody, objectType: number, objectId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TagsApiFp(configuration).apiV1TagObjectTypeObjectIdPost(body, objectType, objectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Tagged Object.
         * @param {string} tag 
         * @param {number} objectType 
         * @param {number} objectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagObjectTypeObjectIdTagDelete(tag: string, objectType: number, objectId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return TagsApiFp(configuration).apiV1TagObjectTypeObjectIdTagDelete(tag, objectType, objectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagPkDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return TagsApiFp(configuration).apiV1TagPkDelete(pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a tag detail information.
         * @param {number} pk 
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20059>> {
            return TagsApiFp(configuration).apiV1TagPkGet(pk, q, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TagRestApiPut} body Model schema
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagPkPut(body: TagRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20060>> {
            return TagsApiFp(configuration).apiV1TagPkPut(body, pk, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TagRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagPost(body: TagRestApiPost, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20115>> {
            return TagsApiFp(configuration).apiV1TagPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} columnName 
         * @param {GetRelatedSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<RelatedResponseSchema>> {
            return TagsApiFp(configuration).apiV1TagRelatedColumnNameGet(columnName, q, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     * Deletes multiple Tags. This will remove all tagged objects with this tag
     * @param {DeleteTagsSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async apiV1TagDelete(q?: DeleteTagsSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return TagsApiFp(this.configuration).apiV1TagDelete(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of tags, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async apiV1TagGet(q?: GetListSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20057>> {
        return TagsApiFp(this.configuration).apiV1TagGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets all objects associated with a Tag.
     * @param {number} tagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async apiV1TagGetObjectsGet(tagId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20058>> {
        return TagsApiFp(this.configuration).apiV1TagGetObjectsGet(tagId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Several metadata information about tag API endpoints.
     * @param {GetInfoSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async apiV1TagInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return TagsApiFp(this.configuration).apiV1TagInfoGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add tags to an object..
     * @param {ObjectTypeObjectIdBody} body Tag schema
     * @param {number} objectType 
     * @param {number} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async apiV1TagObjectTypeObjectIdPost(body: ObjectTypeObjectIdBody, objectType: number, objectId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TagsApiFp(this.configuration).apiV1TagObjectTypeObjectIdPost(body, objectType, objectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a Tagged Object.
     * @param {string} tag 
     * @param {number} objectType 
     * @param {number} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async apiV1TagObjectTypeObjectIdTagDelete(tag: string, objectType: number, objectId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return TagsApiFp(this.configuration).apiV1TagObjectTypeObjectIdTagDelete(tag, objectType, objectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async apiV1TagPkDelete(pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return TagsApiFp(this.configuration).apiV1TagPkDelete(pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a tag detail information.
     * @param {number} pk 
     * @param {GetItemSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async apiV1TagPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20059>> {
        return TagsApiFp(this.configuration).apiV1TagPkGet(pk, q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {TagRestApiPut} body Model schema
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async apiV1TagPkPut(body: TagRestApiPut, pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20060>> {
        return TagsApiFp(this.configuration).apiV1TagPkPut(body, pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {TagRestApiPost} body Model schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async apiV1TagPost(body: TagRestApiPost, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20115>> {
        return TagsApiFp(this.configuration).apiV1TagPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} columnName 
     * @param {GetRelatedSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public async apiV1TagRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<RelatedResponseSchema>> {
        return TagsApiFp(this.configuration).apiV1TagRelatedColumnNameGet(columnName, q, options).then((request) => request(this.axios, this.basePath));
    }
}
