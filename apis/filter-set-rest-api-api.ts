/* tslint:disable */
/* eslint-disable */
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { FilterSetRestApiPost } from '../models';
import { FilterSetRestApiPut } from '../models';
import { InlineResponse20018 } from '../models';
import { InlineResponse20019 } from '../models';
import { InlineResponse2015 } from '../models';
import { InlineResponse400 } from '../models';
/**
 * FilterSetRestApiApi - axios parameter creator
 * @export
 */
export const FilterSetRestApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a dashboard's list of filter sets
         * @param {number} dashboardId The id of the dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsGet: async (dashboardId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new RequiredError('dashboardId','Required parameter dashboardId was null or undefined when calling apiV1DashboardDashboardIdFiltersetsGet.');
            }
            const localVarPath = `/api/v1/dashboard/{dashboard_id}/filtersets`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Dashboard.
         * @param {number} dashboardId 
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsPkDelete: async (dashboardId: number, pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new RequiredError('dashboardId','Required parameter dashboardId was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPkDelete.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPkDelete.');
            }
            const localVarPath = `/api/v1/dashboard/{dashboard_id}/filtersets/{pk}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes a Dashboard's Filter set.
         * @param {FilterSetRestApiPut} body Filter set schema
         * @param {number} dashboardId 
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsPkPut: async (body: FilterSetRestApiPut, dashboardId: number, pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPkPut.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new RequiredError('dashboardId','Required parameter dashboardId was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPkPut.');
            }
            const localVarPath = `/api/v1/dashboard/{dashboard_id}/filtersets/{pk}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Dashboard's Filter Set.
         * @param {FilterSetRestApiPost} body Filter set schema
         * @param {number} dashboardId The id of the dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsPost: async (body: FilterSetRestApiPost, dashboardId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPost.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new RequiredError('dashboardId','Required parameter dashboardId was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPost.');
            }
            const localVarPath = `/api/v1/dashboard/{dashboard_id}/filtersets`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilterSetRestApiApi - functional programming interface
 * @export
 */
export const FilterSetRestApiApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get a dashboard's list of filter sets
         * @param {number} dashboardId The id of the dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardDashboardIdFiltersetsGet(dashboardId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse20018>>>> {
            const localVarAxiosArgs = await FilterSetRestApiApiAxiosParamCreator(configuration).apiV1DashboardDashboardIdFiltersetsGet(dashboardId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a Dashboard.
         * @param {number} dashboardId 
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId: number, pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await FilterSetRestApiApiAxiosParamCreator(configuration).apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId, pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Changes a Dashboard's Filter set.
         * @param {FilterSetRestApiPut} body Filter set schema
         * @param {number} dashboardId 
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardDashboardIdFiltersetsPkPut(body: FilterSetRestApiPut, dashboardId: number, pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20019>>> {
            const localVarAxiosArgs = await FilterSetRestApiApiAxiosParamCreator(configuration).apiV1DashboardDashboardIdFiltersetsPkPut(body, dashboardId, pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new Dashboard's Filter Set.
         * @param {FilterSetRestApiPost} body Filter set schema
         * @param {number} dashboardId The id of the dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardDashboardIdFiltersetsPost(body: FilterSetRestApiPost, dashboardId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2015>>> {
            const localVarAxiosArgs = await FilterSetRestApiApiAxiosParamCreator(configuration).apiV1DashboardDashboardIdFiltersetsPost(body, dashboardId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FilterSetRestApiApi - factory interface
 * @export
 */
export const FilterSetRestApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get a dashboard's list of filter sets
         * @param {number} dashboardId The id of the dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardDashboardIdFiltersetsGet(dashboardId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse20018>>> {
            return FilterSetRestApiApiFp(configuration).apiV1DashboardDashboardIdFiltersetsGet(dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Dashboard.
         * @param {number} dashboardId 
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId: number, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return FilterSetRestApiApiFp(configuration).apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId, pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Changes a Dashboard's Filter set.
         * @param {FilterSetRestApiPut} body Filter set schema
         * @param {number} dashboardId 
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardDashboardIdFiltersetsPkPut(body: FilterSetRestApiPut, dashboardId: number, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20019>> {
            return FilterSetRestApiApiFp(configuration).apiV1DashboardDashboardIdFiltersetsPkPut(body, dashboardId, pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dashboard's Filter Set.
         * @param {FilterSetRestApiPost} body Filter set schema
         * @param {number} dashboardId The id of the dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardDashboardIdFiltersetsPost(body: FilterSetRestApiPost, dashboardId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2015>> {
            return FilterSetRestApiApiFp(configuration).apiV1DashboardDashboardIdFiltersetsPost(body, dashboardId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilterSetRestApiApi - object-oriented interface
 * @export
 * @class FilterSetRestApiApi
 * @extends {BaseAPI}
 */
export class FilterSetRestApiApi extends BaseAPI {
    /**
     * Get a dashboard's list of filter sets
     * @param {number} dashboardId The id of the dashboard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilterSetRestApiApi
     */
    public async apiV1DashboardDashboardIdFiltersetsGet(dashboardId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse20018>>> {
        return FilterSetRestApiApiFp(this.configuration).apiV1DashboardDashboardIdFiltersetsGet(dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a Dashboard.
     * @param {number} dashboardId 
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilterSetRestApiApi
     */
    public async apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId: number, pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return FilterSetRestApiApiFp(this.configuration).apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId, pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Changes a Dashboard's Filter set.
     * @param {FilterSetRestApiPut} body Filter set schema
     * @param {number} dashboardId 
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilterSetRestApiApi
     */
    public async apiV1DashboardDashboardIdFiltersetsPkPut(body: FilterSetRestApiPut, dashboardId: number, pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20019>> {
        return FilterSetRestApiApiFp(this.configuration).apiV1DashboardDashboardIdFiltersetsPkPut(body, dashboardId, pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Dashboard's Filter Set.
     * @param {FilterSetRestApiPost} body Filter set schema
     * @param {number} dashboardId The id of the dashboard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilterSetRestApiApi
     */
    public async apiV1DashboardDashboardIdFiltersetsPost(body: FilterSetRestApiPost, dashboardId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2015>> {
        return FilterSetRestApiApiFp(this.configuration).apiV1DashboardDashboardIdFiltersetsPost(body, dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
}
