/* tslint:disable */
/* eslint-disable */
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ChartCacheScreenshotResponseSchema } from '../models';
import { ChartDataAsyncResponseSchema } from '../models';
import { ChartDataQueryContextSchema } from '../models';
import { ChartDataResponseSchema } from '../models';
import { ChartRestApiPost } from '../models';
import { ChartRestApiPut } from '../models';
import { GetDeleteIdsSchema } from '../models';
import { GetExportIdsSchema } from '../models';
import { GetFavStarIdsSchema } from '../models';
import { GetInfoSchema } from '../models';
import { GetItemSchema } from '../models';
import { GetListSchema } from '../models';
import { GetRelatedSchema } from '../models';
import { InlineResponse20010 } from '../models';
import { InlineResponse20011 } from '../models';
import { InlineResponse20012 } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse2012 } from '../models';
import { InlineResponse400 } from '../models';
import { RelatedResponseSchema } from '../models';
import { ScreenshotQuerySchema } from '../models';
/**
 * ChartsApi - axios parameter creator
 * @export
 */
export const ChartsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Takes a query context cache key and returns payload data response for the given query.
         * @param {string} cacheKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataCacheKeyGet: async (cacheKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cacheKey' is not null or undefined
            if (cacheKey === null || cacheKey === undefined) {
                throw new RequiredError('cacheKey','Required parameter cacheKey was null or undefined when calling apiV1ChartDataCacheKeyGet.');
            }
            const localVarPath = `/api/v1/chart/data/{cache_key}`
                .replace(`{${"cache_key"}}`, encodeURIComponent(String(cacheKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a query context constructed in the client and returns payload data response for the given query.
         * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataPost: async (body: ChartDataQueryContextSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1ChartDataPost.');
            }
            const localVarPath = `/api/v1/chart/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes multiple Charts in a bulk operation.
         * @param {GetDeleteIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDelete: async (q?: GetDeleteIdsSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/chart/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Exports multiple charts and downloads them as YAML files
         * @param {GetExportIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartExportGet: async (q?: GetExportIdsSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/chart/export/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartFavoriteStatusGet: async (q?: GetFavStarIdsSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/chart/favorite_status/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartGet: async (q?: GetListSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/chart/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Blob} formData 
         * @param {boolean} overwrite 
         * @param {string} passwords 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartImportPostForm: async (formData: Blob, overwrite: boolean, passwords: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formData' is not null or undefined
            if (formData === null || formData === undefined) {
                throw new RequiredError('formData','Required parameter formData was null or undefined when calling apiV1ChartImportPostForm.');
            }
            // verify required parameter 'overwrite' is not null or undefined
            if (overwrite === null || overwrite === undefined) {
                throw new RequiredError('overwrite','Required parameter overwrite was null or undefined when calling apiV1ChartImportPostForm.');
            }
            // verify required parameter 'passwords' is not null or undefined
            if (passwords === null || passwords === undefined) {
                throw new RequiredError('passwords','Required parameter passwords was null or undefined when calling apiV1ChartImportPostForm.');
            }
            const localVarPath = `/api/v1/chart/import/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication jwt required


            if (formData !== undefined) { 
                localVarFormParams.append('formData', formData as any);
            }

            if (overwrite !== undefined) { 
                localVarFormParams.append('overwrite', overwrite as any);
            }

            if (passwords !== undefined) { 
                localVarFormParams.append('passwords', passwords as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Several metadata information about chart API endpoints.
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartInfoGet: async (q?: GetInfoSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/chart/_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Compute and cache a screenshot.
         * @param {number} pk 
         * @param {ScreenshotQuerySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkCacheScreenshotGet: async (pk: number, q?: ScreenshotQuerySchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1ChartPkCacheScreenshotGet.');
            }
            const localVarPath = `/api/v1/chart/{pk}/cache_screenshot/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
         * @param {number} pk The chart ID
         * @param {string} [format] The format in which the data should be returned
         * @param {string} [type] The type in which the data should be returned
         * @param {boolean} [force] Should the queries be forced to load from the source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDataGet: async (pk: number, format?: string, type?: string, force?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1ChartPkDataGet.');
            }
            const localVarPath = `/api/v1/chart/{pk}/data/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Chart.
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDelete: async (pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1ChartPkDelete.');
            }
            const localVarPath = `/api/v1/chart/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a chart detail information.
         * @param {number} pk 
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkGet: async (pk: number, q?: GetItemSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1ChartPkGet.');
            }
            const localVarPath = `/api/v1/chart/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes a Chart.
         * @param {ChartRestApiPut} body Chart schema
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkPut: async (body: ChartRestApiPut, pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1ChartPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1ChartPkPut.');
            }
            const localVarPath = `/api/v1/chart/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a computed screenshot from cache.
         * @param {number} pk 
         * @param {string} digest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkScreenshotDigestGet: async (pk: number, digest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1ChartPkScreenshotDigestGet.');
            }
            // verify required parameter 'digest' is not null or undefined
            if (digest === null || digest === undefined) {
                throw new RequiredError('digest','Required parameter digest was null or undefined when calling apiV1ChartPkScreenshotDigestGet.');
            }
            const localVarPath = `/api/v1/chart/{pk}/screenshot/{digest}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"digest"}}`, encodeURIComponent(String(digest)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Compute or get already computed chart thumbnail from cache.
         * @param {number} pk 
         * @param {string} digest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkThumbnailDigestGet: async (pk: number, digest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1ChartPkThumbnailDigestGet.');
            }
            // verify required parameter 'digest' is not null or undefined
            if (digest === null || digest === undefined) {
                throw new RequiredError('digest','Required parameter digest was null or undefined when calling apiV1ChartPkThumbnailDigestGet.');
            }
            const localVarPath = `/api/v1/chart/{pk}/thumbnail/{digest}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"digest"}}`, encodeURIComponent(String(digest)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Chart.
         * @param {ChartRestApiPost} body Chart schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPost: async (body: ChartRestApiPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1ChartPost.');
            }
            const localVarPath = `/api/v1/chart/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
         * @param {string} columnName 
         * @param {GetRelatedSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartRelatedColumnNameGet: async (columnName: string, q?: GetRelatedSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName','Required parameter columnName was null or undefined when calling apiV1ChartRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/chart/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChartsApi - functional programming interface
 * @export
 */
export const ChartsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Takes a query context cache key and returns payload data response for the given query.
         * @param {string} cacheKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartDataCacheKeyGet(cacheKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ChartDataResponseSchema>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartDataCacheKeyGet(cacheKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Takes a query context constructed in the client and returns payload data response for the given query.
         * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartDataPost(body: ChartDataQueryContextSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ChartDataResponseSchema>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartDataPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes multiple Charts in a bulk operation.
         * @param {GetDeleteIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartDelete(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Exports multiple charts and downloads them as YAML files
         * @param {GetExportIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartExportGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartFavoriteStatusGet(q?: GetFavStarIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetFavStarIdsSchema>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartFavoriteStatusGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Blob} formData 
         * @param {boolean} overwrite 
         * @param {string} passwords 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartImportPostForm(formData, overwrite, passwords, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Several metadata information about chart API endpoints.
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartInfoGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Compute and cache a screenshot.
         * @param {number} pk 
         * @param {ScreenshotQuerySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkCacheScreenshotGet(pk: number, q?: ScreenshotQuerySchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ChartCacheScreenshotResponseSchema>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartPkCacheScreenshotGet(pk, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
         * @param {number} pk The chart ID
         * @param {string} [format] The format in which the data should be returned
         * @param {string} [type] The type in which the data should be returned
         * @param {boolean} [force] Should the queries be forced to load from the source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkDataGet(pk: number, format?: string, type?: string, force?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ChartDataResponseSchema>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartPkDataGet(pk, format, type, force, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a Chart.
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkDelete(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartPkDelete(pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a chart detail information.
         * @param {number} pk 
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20011>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartPkGet(pk, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Changes a Chart.
         * @param {ChartRestApiPut} body Chart schema
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkPut(body: ChartRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20012>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartPkPut(body, pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a computed screenshot from cache.
         * @param {number} pk 
         * @param {string} digest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkScreenshotDigestGet(pk: number, digest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartPkScreenshotDigestGet(pk, digest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Compute or get already computed chart thumbnail from cache.
         * @param {number} pk 
         * @param {string} digest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkThumbnailDigestGet(pk: number, digest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartPkThumbnailDigestGet(pk, digest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new Chart.
         * @param {ChartRestApiPost} body Chart schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPost(body: ChartRestApiPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2012>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
         * @param {string} columnName 
         * @param {GetRelatedSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RelatedResponseSchema>>> {
            const localVarAxiosArgs = await ChartsApiAxiosParamCreator(configuration).apiV1ChartRelatedColumnNameGet(columnName, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ChartsApi - factory interface
 * @export
 */
export const ChartsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Takes a query context cache key and returns payload data response for the given query.
         * @param {string} cacheKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartDataCacheKeyGet(cacheKey: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ChartDataResponseSchema>> {
            return ChartsApiFp(configuration).apiV1ChartDataCacheKeyGet(cacheKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a query context constructed in the client and returns payload data response for the given query.
         * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartDataPost(body: ChartDataQueryContextSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<ChartDataResponseSchema>> {
            return ChartsApiFp(configuration).apiV1ChartDataPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes multiple Charts in a bulk operation.
         * @param {GetDeleteIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return ChartsApiFp(configuration).apiV1ChartDelete(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Exports multiple charts and downloads them as YAML files
         * @param {GetExportIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return ChartsApiFp(configuration).apiV1ChartExportGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartFavoriteStatusGet(q?: GetFavStarIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<GetFavStarIdsSchema>> {
            return ChartsApiFp(configuration).apiV1ChartFavoriteStatusGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return ChartsApiFp(configuration).apiV1ChartGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Blob} formData 
         * @param {boolean} overwrite 
         * @param {string} passwords 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return ChartsApiFp(configuration).apiV1ChartImportPostForm(formData, overwrite, passwords, options).then((request) => request(axios, basePath));
        },
        /**
         * Several metadata information about chart API endpoints.
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return ChartsApiFp(configuration).apiV1ChartInfoGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Compute and cache a screenshot.
         * @param {number} pk 
         * @param {ScreenshotQuerySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkCacheScreenshotGet(pk: number, q?: ScreenshotQuerySchema, options?: AxiosRequestConfig): Promise<AxiosResponse<ChartCacheScreenshotResponseSchema>> {
            return ChartsApiFp(configuration).apiV1ChartPkCacheScreenshotGet(pk, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
         * @param {number} pk The chart ID
         * @param {string} [format] The format in which the data should be returned
         * @param {string} [type] The type in which the data should be returned
         * @param {boolean} [force] Should the queries be forced to load from the source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkDataGet(pk: number, format?: string, type?: string, force?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<ChartDataResponseSchema>> {
            return ChartsApiFp(configuration).apiV1ChartPkDataGet(pk, format, type, force, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Chart.
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return ChartsApiFp(configuration).apiV1ChartPkDelete(pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a chart detail information.
         * @param {number} pk 
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20011>> {
            return ChartsApiFp(configuration).apiV1ChartPkGet(pk, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Changes a Chart.
         * @param {ChartRestApiPut} body Chart schema
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkPut(body: ChartRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>> {
            return ChartsApiFp(configuration).apiV1ChartPkPut(body, pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a computed screenshot from cache.
         * @param {number} pk 
         * @param {string} digest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkScreenshotDigestGet(pk: number, digest: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return ChartsApiFp(configuration).apiV1ChartPkScreenshotDigestGet(pk, digest, options).then((request) => request(axios, basePath));
        },
        /**
         * Compute or get already computed chart thumbnail from cache.
         * @param {number} pk 
         * @param {string} digest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPkThumbnailDigestGet(pk: number, digest: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return ChartsApiFp(configuration).apiV1ChartPkThumbnailDigestGet(pk, digest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Chart.
         * @param {ChartRestApiPost} body Chart schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartPost(body: ChartRestApiPost, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2012>> {
            return ChartsApiFp(configuration).apiV1ChartPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
         * @param {string} columnName 
         * @param {GetRelatedSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChartRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<RelatedResponseSchema>> {
            return ChartsApiFp(configuration).apiV1ChartRelatedColumnNameGet(columnName, q, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChartsApi - object-oriented interface
 * @export
 * @class ChartsApi
 * @extends {BaseAPI}
 */
export class ChartsApi extends BaseAPI {
    /**
     * Takes a query context cache key and returns payload data response for the given query.
     * @param {string} cacheKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartDataCacheKeyGet(cacheKey: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ChartDataResponseSchema>> {
        return ChartsApiFp(this.configuration).apiV1ChartDataCacheKeyGet(cacheKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Takes a query context constructed in the client and returns payload data response for the given query.
     * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartDataPost(body: ChartDataQueryContextSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<ChartDataResponseSchema>> {
        return ChartsApiFp(this.configuration).apiV1ChartDataPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes multiple Charts in a bulk operation.
     * @param {GetDeleteIdsSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return ChartsApiFp(this.configuration).apiV1ChartDelete(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Exports multiple charts and downloads them as YAML files
     * @param {GetExportIdsSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return ChartsApiFp(this.configuration).apiV1ChartExportGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Check favorited dashboards for current user
     * @param {GetFavStarIdsSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartFavoriteStatusGet(q?: GetFavStarIdsSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetFavStarIdsSchema>> {
        return ChartsApiFp(this.configuration).apiV1ChartFavoriteStatusGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartGet(q?: GetListSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return ChartsApiFp(this.configuration).apiV1ChartGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Blob} formData 
     * @param {boolean} overwrite 
     * @param {string} passwords 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return ChartsApiFp(this.configuration).apiV1ChartImportPostForm(formData, overwrite, passwords, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Several metadata information about chart API endpoints.
     * @param {GetInfoSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return ChartsApiFp(this.configuration).apiV1ChartInfoGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Compute and cache a screenshot.
     * @param {number} pk 
     * @param {ScreenshotQuerySchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartPkCacheScreenshotGet(pk: number, q?: ScreenshotQuerySchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<ChartCacheScreenshotResponseSchema>> {
        return ChartsApiFp(this.configuration).apiV1ChartPkCacheScreenshotGet(pk, q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
     * @param {number} pk The chart ID
     * @param {string} [format] The format in which the data should be returned
     * @param {string} [type] The type in which the data should be returned
     * @param {boolean} [force] Should the queries be forced to load from the source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartPkDataGet(pk: number, format?: string, type?: string, force?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<ChartDataResponseSchema>> {
        return ChartsApiFp(this.configuration).apiV1ChartPkDataGet(pk, format, type, force, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a Chart.
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartPkDelete(pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return ChartsApiFp(this.configuration).apiV1ChartPkDelete(pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a chart detail information.
     * @param {number} pk 
     * @param {GetItemSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20011>> {
        return ChartsApiFp(this.configuration).apiV1ChartPkGet(pk, q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Changes a Chart.
     * @param {ChartRestApiPut} body Chart schema
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartPkPut(body: ChartRestApiPut, pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20012>> {
        return ChartsApiFp(this.configuration).apiV1ChartPkPut(body, pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a computed screenshot from cache.
     * @param {number} pk 
     * @param {string} digest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartPkScreenshotDigestGet(pk: number, digest: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return ChartsApiFp(this.configuration).apiV1ChartPkScreenshotDigestGet(pk, digest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Compute or get already computed chart thumbnail from cache.
     * @param {number} pk 
     * @param {string} digest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartPkThumbnailDigestGet(pk: number, digest: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return ChartsApiFp(this.configuration).apiV1ChartPkThumbnailDigestGet(pk, digest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Chart.
     * @param {ChartRestApiPost} body Chart schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartPost(body: ChartRestApiPost, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2012>> {
        return ChartsApiFp(this.configuration).apiV1ChartPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
     * @param {string} columnName 
     * @param {GetRelatedSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public async apiV1ChartRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<RelatedResponseSchema>> {
        return ChartsApiFp(this.configuration).apiV1ChartRelatedColumnNameGet(columnName, q, options).then((request) => request(this.axios, this.basePath));
    }
}
