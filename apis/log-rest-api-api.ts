/* tslint:disable */
/* eslint-disable */
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GetItemSchema } from '../models';
import { GetListSchema } from '../models';
import { GetRecentActivitySchema } from '../models';
import { InlineResponse20038 } from '../models';
import { InlineResponse20039 } from '../models';
import { InlineResponse20112 } from '../models';
import { InlineResponse400 } from '../models';
import { LogRestApiPost } from '../models';
import { RecentActivityResponseSchema } from '../models';
/**
 * LogRestApiApi - axios parameter creator
 * @export
 */
export const LogRestApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of models
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogGet: async (q?: GetListSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/log/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an item model
         * @param {number} pk 
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogPkGet: async (pk: number, q?: GetItemSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1LogPkGet.');
            }
            const localVarPath = `/api/v1/log/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LogRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogPost: async (body: LogRestApiPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1LogPost.');
            }
            const localVarPath = `/api/v1/log/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get recent activity data for a user
         * @param {number} userId The id of the user
         * @param {GetRecentActivitySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogRecentActivityUserIdGet: async (userId: number, q?: GetRecentActivitySchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1LogRecentActivityUserIdGet.');
            }
            const localVarPath = `/api/v1/log/recent_activity/{user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogRestApiApi - functional programming interface
 * @export
 */
export const LogRestApiApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get a list of models
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LogGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20038>>> {
            const localVarAxiosArgs = await LogRestApiApiAxiosParamCreator(configuration).apiV1LogGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an item model
         * @param {number} pk 
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LogPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20039>>> {
            const localVarAxiosArgs = await LogRestApiApiAxiosParamCreator(configuration).apiV1LogPkGet(pk, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {LogRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LogPost(body: LogRestApiPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20112>>> {
            const localVarAxiosArgs = await LogRestApiApiAxiosParamCreator(configuration).apiV1LogPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get recent activity data for a user
         * @param {number} userId The id of the user
         * @param {GetRecentActivitySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LogRecentActivityUserIdGet(userId: number, q?: GetRecentActivitySchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RecentActivityResponseSchema>>> {
            const localVarAxiosArgs = await LogRestApiApiAxiosParamCreator(configuration).apiV1LogRecentActivityUserIdGet(userId, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LogRestApiApi - factory interface
 * @export
 */
export const LogRestApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get a list of models
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LogGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20038>> {
            return LogRestApiApiFp(configuration).apiV1LogGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an item model
         * @param {number} pk 
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LogPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20039>> {
            return LogRestApiApiFp(configuration).apiV1LogPkGet(pk, q, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LogPost(body: LogRestApiPost, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20112>> {
            return LogRestApiApiFp(configuration).apiV1LogPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get recent activity data for a user
         * @param {number} userId The id of the user
         * @param {GetRecentActivitySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LogRecentActivityUserIdGet(userId: number, q?: GetRecentActivitySchema, options?: AxiosRequestConfig): Promise<AxiosResponse<RecentActivityResponseSchema>> {
            return LogRestApiApiFp(configuration).apiV1LogRecentActivityUserIdGet(userId, q, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogRestApiApi - object-oriented interface
 * @export
 * @class LogRestApiApi
 * @extends {BaseAPI}
 */
export class LogRestApiApi extends BaseAPI {
    /**
     * Get a list of models
     * @param {GetListSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogRestApiApi
     */
    public async apiV1LogGet(q?: GetListSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20038>> {
        return LogRestApiApiFp(this.configuration).apiV1LogGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an item model
     * @param {number} pk 
     * @param {GetItemSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogRestApiApi
     */
    public async apiV1LogPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20039>> {
        return LogRestApiApiFp(this.configuration).apiV1LogPkGet(pk, q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {LogRestApiPost} body Model schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogRestApiApi
     */
    public async apiV1LogPost(body: LogRestApiPost, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20112>> {
        return LogRestApiApiFp(this.configuration).apiV1LogPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get recent activity data for a user
     * @param {number} userId The id of the user
     * @param {GetRecentActivitySchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogRestApiApi
     */
    public async apiV1LogRecentActivityUserIdGet(userId: number, q?: GetRecentActivitySchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<RecentActivityResponseSchema>> {
        return LogRestApiApiFp(this.configuration).apiV1LogRecentActivityUserIdGet(userId, q, options).then((request) => request(this.axios, this.basePath));
    }
}
