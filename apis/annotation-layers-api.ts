/* tslint:disable */
/* eslint-disable */
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AnnotationLayerRestApiPost } from '../models';
import { AnnotationLayerRestApiPut } from '../models';
import { AnnotationRestApiPost } from '../models';
import { AnnotationRestApiPut } from '../models';
import { GetDeleteIdsSchema } from '../models';
import { GetInfoSchema } from '../models';
import { GetItemSchema } from '../models';
import { GetListSchema } from '../models';
import { GetRelatedSchema } from '../models';
import { InlineResponse2001 } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse2003 } from '../models';
import { InlineResponse2004 } from '../models';
import { InlineResponse2005 } from '../models';
import { InlineResponse2006 } from '../models';
import { InlineResponse2007 } from '../models';
import { InlineResponse201 } from '../models';
import { InlineResponse2011 } from '../models';
import { InlineResponse400 } from '../models';
import { RelatedResponseSchema } from '../models';
/**
 * AnnotationLayersApi - axios parameter creator
 * @export
 */
export const AnnotationLayersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes multiple annotation layers in a bulk operation.
         * @param {GetDeleteIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerDelete: async (q?: GetDeleteIdsSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/annotation_layer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerGet: async (q?: GetListSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/annotation_layer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerInfoGet: async (q?: GetInfoSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/annotation_layer/_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationAnnotationIdDelete: async (pk: number, annotationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdDelete.');
            }
            // verify required parameter 'annotationId' is not null or undefined
            if (annotationId === null || annotationId === undefined) {
                throw new RequiredError('annotationId','Required parameter annotationId was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdDelete.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}/annotation/{annotation_id}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"annotation_id"}}`, encodeURIComponent(String(annotationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationAnnotationIdGet: async (pk: number, annotationId: number, q?: GetItemSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdGet.');
            }
            // verify required parameter 'annotationId' is not null or undefined
            if (annotationId === null || annotationId === undefined) {
                throw new RequiredError('annotationId','Required parameter annotationId was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdGet.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}/annotation/{annotation_id}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"annotation_id"}}`, encodeURIComponent(String(annotationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an Annotation layer
         * @param {AnnotationRestApiPut} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationAnnotationIdPut: async (body: AnnotationRestApiPut, pk: number, annotationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdPut.');
            }
            // verify required parameter 'annotationId' is not null or undefined
            if (annotationId === null || annotationId === undefined) {
                throw new RequiredError('annotationId','Required parameter annotationId was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdPut.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}/annotation/{annotation_id}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"annotation_id"}}`, encodeURIComponent(String(annotationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes multiple annotation in a bulk operation.
         * @param {number} pk The annotation layer pk for this annotation
         * @param {GetDeleteIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationDelete: async (pk: number, q?: GetDeleteIdsSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkAnnotationDelete.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}/annotation/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {number} pk The annotation layer id for this annotation
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationGet: async (pk: number, q?: GetListSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkAnnotationGet.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}/annotation/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Annotation layer
         * @param {AnnotationRestApiPost} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationPost: async (body: AnnotationRestApiPost, pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1AnnotationLayerPkAnnotationPost.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkAnnotationPost.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}/annotation/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkDelete: async (pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkDelete.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Annotation layer
         * @param {number} pk 
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkGet: async (pk: number, q?: GetItemSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkGet.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an Annotation layer
         * @param {AnnotationLayerRestApiPut} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkPut: async (body: AnnotationLayerRestApiPut, pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1AnnotationLayerPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkPut.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Annotation layer
         * @param {AnnotationLayerRestApiPost} body Annotation Layer schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPost: async (body: AnnotationLayerRestApiPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1AnnotationLayerPost.');
            }
            const localVarPath = `/api/v1/annotation_layer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} columnName 
         * @param {GetRelatedSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerRelatedColumnNameGet: async (columnName: string, q?: GetRelatedSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName','Required parameter columnName was null or undefined when calling apiV1AnnotationLayerRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/annotation_layer/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnotationLayersApi - functional programming interface
 * @export
 */
export const AnnotationLayersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes multiple annotation layers in a bulk operation.
         * @param {GetDeleteIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerDelete(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerInfoGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk: number, annotationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk: number, annotationId: number, q?: GetItemSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2006>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an Annotation layer
         * @param {AnnotationRestApiPut} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body: AnnotationRestApiPut, pk: number, annotationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2007>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes multiple annotation in a bulk operation.
         * @param {number} pk The annotation layer pk for this annotation
         * @param {GetDeleteIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkAnnotationDelete(pk: number, q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerPkAnnotationDelete(pk, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {number} pk The annotation layer id for this annotation
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkAnnotationGet(pk: number, q?: GetListSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2005>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerPkAnnotationGet(pk, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create an Annotation layer
         * @param {AnnotationRestApiPost} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkAnnotationPost(body: AnnotationRestApiPost, pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2011>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerPkAnnotationPost(body, pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkDelete(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerPkDelete(pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an Annotation layer
         * @param {number} pk 
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2003>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerPkGet(pk, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an Annotation layer
         * @param {AnnotationLayerRestApiPut} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkPut(body: AnnotationLayerRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerPkPut(body, pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create an Annotation layer
         * @param {AnnotationLayerRestApiPost} body Annotation Layer schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPost(body: AnnotationLayerRestApiPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse201>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} columnName 
         * @param {GetRelatedSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RelatedResponseSchema>>> {
            const localVarAxiosArgs = await AnnotationLayersApiAxiosParamCreator(configuration).apiV1AnnotationLayerRelatedColumnNameGet(columnName, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AnnotationLayersApi - factory interface
 * @export
 */
export const AnnotationLayersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes multiple annotation layers in a bulk operation.
         * @param {GetDeleteIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerDelete(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerInfoGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk: number, annotationId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk: number, annotationId: number, q?: GetItemSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2006>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an Annotation layer
         * @param {AnnotationRestApiPut} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body: AnnotationRestApiPut, pk: number, annotationId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2007>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes multiple annotation in a bulk operation.
         * @param {number} pk The annotation layer pk for this annotation
         * @param {GetDeleteIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkAnnotationDelete(pk: number, q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerPkAnnotationDelete(pk, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {number} pk The annotation layer id for this annotation
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkAnnotationGet(pk: number, q?: GetListSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2005>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerPkAnnotationGet(pk, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Annotation layer
         * @param {AnnotationRestApiPost} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkAnnotationPost(body: AnnotationRestApiPost, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2011>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerPkAnnotationPost(body, pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerPkDelete(pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Annotation layer
         * @param {number} pk 
         * @param {GetItemSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2003>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerPkGet(pk, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an Annotation layer
         * @param {AnnotationLayerRestApiPut} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPkPut(body: AnnotationLayerRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerPkPut(body, pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Annotation layer
         * @param {AnnotationLayerRestApiPost} body Annotation Layer schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerPost(body: AnnotationLayerRestApiPost, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse201>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} columnName 
         * @param {GetRelatedSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnnotationLayerRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<RelatedResponseSchema>> {
            return AnnotationLayersApiFp(configuration).apiV1AnnotationLayerRelatedColumnNameGet(columnName, q, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnnotationLayersApi - object-oriented interface
 * @export
 * @class AnnotationLayersApi
 * @extends {BaseAPI}
 */
export class AnnotationLayersApi extends BaseAPI {
    /**
     * Deletes multiple annotation layers in a bulk operation.
     * @param {GetDeleteIdsSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerDelete(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {GetListSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerGet(q?: GetListSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get metadata information about this API resource
     * @param {GetInfoSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerInfoGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Annotation layer
     * @param {number} pk The annotation layer pk for this annotation
     * @param {number} annotationId The annotation pk for this annotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk: number, annotationId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Annotation layer
     * @param {number} pk The annotation layer pk for this annotation
     * @param {number} annotationId The annotation pk
     * @param {GetItemSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk: number, annotationId: number, q?: GetItemSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2006>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an Annotation layer
     * @param {AnnotationRestApiPut} body Annotation schema
     * @param {number} pk The annotation layer pk for this annotation
     * @param {number} annotationId The annotation pk for this annotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body: AnnotationRestApiPut, pk: number, annotationId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2007>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes multiple annotation in a bulk operation.
     * @param {number} pk The annotation layer pk for this annotation
     * @param {GetDeleteIdsSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerPkAnnotationDelete(pk: number, q?: GetDeleteIdsSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerPkAnnotationDelete(pk, q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {number} pk The annotation layer id for this annotation
     * @param {GetListSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerPkAnnotationGet(pk: number, q?: GetListSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2005>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerPkAnnotationGet(pk, q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Annotation layer
     * @param {AnnotationRestApiPost} body Annotation schema
     * @param {number} pk The annotation layer pk for this annotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerPkAnnotationPost(body: AnnotationRestApiPost, pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2011>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerPkAnnotationPost(body, pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Annotation layer
     * @param {number} pk The annotation layer pk for this annotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerPkDelete(pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerPkDelete(pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Annotation layer
     * @param {number} pk 
     * @param {GetItemSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerPkGet(pk: number, q?: GetItemSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2003>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerPkGet(pk, q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an Annotation layer
     * @param {AnnotationLayerRestApiPut} body Annotation schema
     * @param {number} pk The annotation layer pk for this annotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerPkPut(body: AnnotationLayerRestApiPut, pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerPkPut(body, pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Annotation layer
     * @param {AnnotationLayerRestApiPost} body Annotation Layer schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerPost(body: AnnotationLayerRestApiPost, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse201>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} columnName 
     * @param {GetRelatedSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    public async apiV1AnnotationLayerRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<RelatedResponseSchema>> {
        return AnnotationLayersApiFp(this.configuration).apiV1AnnotationLayerRelatedColumnNameGet(columnName, q, options).then((request) => request(this.axios, this.basePath));
    }
}
