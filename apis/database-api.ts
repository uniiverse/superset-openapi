/* tslint:disable */
/* eslint-disable */
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DatabaseFunctionNamesResponse } from '../models';
import { DatabaseRelatedObjectsResponse } from '../models';
import { DatabaseRestApiPost } from '../models';
import { DatabaseRestApiPut } from '../models';
import { DatabaseSchemasQuerySchema } from '../models';
import { DatabaseTablesQuerySchema } from '../models';
import { DatabaseTestConnectionSchema } from '../models';
import { DatabaseValidateParametersSchema } from '../models';
import { GetExportIdsSchema } from '../models';
import { GetInfoSchema } from '../models';
import { GetListSchema } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse20027 } from '../models';
import { InlineResponse20028 } from '../models';
import { InlineResponse20029 } from '../models';
import { InlineResponse20030 } from '../models';
import { InlineResponse20031 } from '../models';
import { InlineResponse2018 } from '../models';
import { InlineResponse400 } from '../models';
import { SchemasResponseSchema } from '../models';
import { SelectStarResponseSchema } from '../models';
import { TableExtraMetadataResponseSchema } from '../models';
import { TableMetadataResponseSchema } from '../models';
import { ValidateSQLRequest } from '../models';
/**
 * DatabaseApi - axios parameter creator
 * @export
 */
export const DatabaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get names of databases currently available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseAvailableGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/database/available/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Download database(s) and associated dataset(s) as a zip file
         * @param {GetExportIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseExportGet: async (q?: GetExportIdsSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/database/export/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of models
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseGet: async (q?: GetListSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/database/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Blob} formData 
         * @param {boolean} overwrite 
         * @param {string} passwords 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseImportPostForm: async (formData: Blob, overwrite: boolean, passwords: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formData' is not null or undefined
            if (formData === null || formData === undefined) {
                throw new RequiredError('formData','Required parameter formData was null or undefined when calling apiV1DatabaseImportPostForm.');
            }
            // verify required parameter 'overwrite' is not null or undefined
            if (overwrite === null || overwrite === undefined) {
                throw new RequiredError('overwrite','Required parameter overwrite was null or undefined when calling apiV1DatabaseImportPostForm.');
            }
            // verify required parameter 'passwords' is not null or undefined
            if (passwords === null || passwords === undefined) {
                throw new RequiredError('passwords','Required parameter passwords was null or undefined when calling apiV1DatabaseImportPostForm.');
            }
            const localVarPath = `/api/v1/database/import/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication jwt required


            if (formData !== undefined) { 
                localVarFormParams.append('formData', formData as any);
            }

            if (overwrite !== undefined) { 
                localVarFormParams.append('overwrite', overwrite as any);
            }

            if (passwords !== undefined) { 
                localVarFormParams.append('passwords', passwords as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseInfoGet: async (q?: GetInfoSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/database/_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Database.
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkDelete: async (pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DatabasePkDelete.');
            }
            const localVarPath = `/api/v1/database/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get function names supported by a database
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkFunctionNamesGet: async (pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DatabasePkFunctionNamesGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/function_names/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a database
         * @param {number} pk The database id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkGet: async (pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DatabasePkGet.');
            }
            const localVarPath = `/api/v1/database/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes a Database.
         * @param {DatabaseRestApiPut} body Database schema
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkPut: async (body: DatabaseRestApiPut, pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1DatabasePkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DatabasePkPut.');
            }
            const localVarPath = `/api/v1/database/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get charts and dashboards count associated to a database
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkRelatedObjectsGet: async (pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DatabasePkRelatedObjectsGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/related_objects/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all schemas from a database
         * @param {number} pk The database id
         * @param {DatabaseSchemasQuerySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSchemasGet: async (pk: number, q?: DatabaseSchemasQuerySchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DatabasePkSchemasGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/schemas/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get database select star for table
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSelectStarTableNameGet: async (pk: number, tableName: string, schemaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DatabasePkSelectStarTableNameGet.');
            }
            // verify required parameter 'tableName' is not null or undefined
            if (tableName === null || tableName === undefined) {
                throw new RequiredError('tableName','Required parameter tableName was null or undefined when calling apiV1DatabasePkSelectStarTableNameGet.');
            }
            // verify required parameter 'schemaName' is not null or undefined
            if (schemaName === null || schemaName === undefined) {
                throw new RequiredError('schemaName','Required parameter schemaName was null or undefined when calling apiV1DatabasePkSelectStarTableNameGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/select_star/{table_name}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"table_name"}}`, encodeURIComponent(String(tableName)))
                .replace(`{${"schema_name"}}`, encodeURIComponent(String(schemaName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get database select star for table
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSelectStarTableNameSchemaNameGet: async (pk: number, tableName: string, schemaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DatabasePkSelectStarTableNameSchemaNameGet.');
            }
            // verify required parameter 'tableName' is not null or undefined
            if (tableName === null || tableName === undefined) {
                throw new RequiredError('tableName','Required parameter tableName was null or undefined when calling apiV1DatabasePkSelectStarTableNameSchemaNameGet.');
            }
            // verify required parameter 'schemaName' is not null or undefined
            if (schemaName === null || schemaName === undefined) {
                throw new RequiredError('schemaName','Required parameter schemaName was null or undefined when calling apiV1DatabasePkSelectStarTableNameSchemaNameGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/select_star/{table_name}/{schema_name}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"table_name"}}`, encodeURIComponent(String(tableName)))
                .replace(`{${"schema_name"}}`, encodeURIComponent(String(schemaName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a SSH Tunnel.
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSshTunnelDelete: async (pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DatabasePkSshTunnelDelete.');
            }
            const localVarPath = `/api/v1/database/{pk}/ssh_tunnel/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Response depends on each DB engine spec normally focused on partitions
         * @summary Get table extra metadata
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkTableExtraTableNameSchemaNameGet: async (pk: number, tableName: string, schemaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DatabasePkTableExtraTableNameSchemaNameGet.');
            }
            // verify required parameter 'tableName' is not null or undefined
            if (tableName === null || tableName === undefined) {
                throw new RequiredError('tableName','Required parameter tableName was null or undefined when calling apiV1DatabasePkTableExtraTableNameSchemaNameGet.');
            }
            // verify required parameter 'schemaName' is not null or undefined
            if (schemaName === null || schemaName === undefined) {
                throw new RequiredError('schemaName','Required parameter schemaName was null or undefined when calling apiV1DatabasePkTableExtraTableNameSchemaNameGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/table_extra/{table_name}/{schema_name}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"table_name"}}`, encodeURIComponent(String(tableName)))
                .replace(`{${"schema_name"}}`, encodeURIComponent(String(schemaName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get database table metadata
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkTableTableNameSchemaNameGet: async (pk: number, tableName: string, schemaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DatabasePkTableTableNameSchemaNameGet.');
            }
            // verify required parameter 'tableName' is not null or undefined
            if (tableName === null || tableName === undefined) {
                throw new RequiredError('tableName','Required parameter tableName was null or undefined when calling apiV1DatabasePkTableTableNameSchemaNameGet.');
            }
            // verify required parameter 'schemaName' is not null or undefined
            if (schemaName === null || schemaName === undefined) {
                throw new RequiredError('schemaName','Required parameter schemaName was null or undefined when calling apiV1DatabasePkTableTableNameSchemaNameGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/table/{table_name}/{schema_name}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"table_name"}}`, encodeURIComponent(String(tableName)))
                .replace(`{${"schema_name"}}`, encodeURIComponent(String(schemaName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of tables for given database
         * @param {number} pk The database id
         * @param {DatabaseTablesQuerySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkTablesGet: async (pk: number, q?: DatabaseTablesQuerySchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DatabasePkTablesGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/tables/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates arbitrary SQL.
         * @summary Validates that arbitrary sql is acceptable for the given database
         * @param {ValidateSQLRequest} body Validate SQL request
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkValidateSqlPost: async (body: ValidateSQLRequest, pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1DatabasePkValidateSqlPost.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DatabasePkValidateSqlPost.');
            }
            const localVarPath = `/api/v1/database/{pk}/validate_sql/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Database.
         * @param {DatabaseRestApiPost} body Database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePost: async (body: DatabaseRestApiPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1DatabasePost.');
            }
            const localVarPath = `/api/v1/database/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Tests a database connection
         * @param {DatabaseTestConnectionSchema} body Database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseTestConnectionPost: async (body: DatabaseTestConnectionSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1DatabaseTestConnectionPost.');
            }
            const localVarPath = `/api/v1/database/test_connection/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates parameters used to connect to a database
         * @param {DatabaseValidateParametersSchema} body DB-specific parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseValidateParametersPost: async (body: DatabaseValidateParametersSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1DatabaseValidateParametersPost.');
            }
            const localVarPath = `/api/v1/database/validate_parameters/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatabaseApi - functional programming interface
 * @export
 */
export const DatabaseApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get names of databases currently available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseAvailableGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse20028>>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabaseAvailableGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Download database(s) and associated dataset(s) as a zip file
         * @param {GetExportIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabaseExportGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of models
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20027>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabaseGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Blob} formData 
         * @param {boolean} overwrite 
         * @param {string} passwords 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabaseImportPostForm(formData, overwrite, passwords, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabaseInfoGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a Database.
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkDelete(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePkDelete(pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get function names supported by a database
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkFunctionNamesGet(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DatabaseFunctionNamesResponse>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePkFunctionNamesGet(pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a database
         * @param {number} pk The database id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkGet(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePkGet(pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Changes a Database.
         * @param {DatabaseRestApiPut} body Database schema
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkPut(body: DatabaseRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20029>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePkPut(body, pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get charts and dashboards count associated to a database
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkRelatedObjectsGet(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DatabaseRelatedObjectsResponse>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePkRelatedObjectsGet(pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all schemas from a database
         * @param {number} pk The database id
         * @param {DatabaseSchemasQuerySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkSchemasGet(pk: number, q?: DatabaseSchemasQuerySchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SchemasResponseSchema>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePkSchemasGet(pk, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get database select star for table
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkSelectStarTableNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SelectStarResponseSchema>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePkSelectStarTableNameGet(pk, tableName, schemaName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get database select star for table
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SelectStarResponseSchema>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a SSH Tunnel.
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkSshTunnelDelete(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePkSshTunnelDelete(pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Response depends on each DB engine spec normally focused on partitions
         * @summary Get table extra metadata
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TableExtraMetadataResponseSchema>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk, tableName, schemaName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get database table metadata
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkTableTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TableMetadataResponseSchema>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePkTableTableNameSchemaNameGet(pk, tableName, schemaName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a list of tables for given database
         * @param {number} pk The database id
         * @param {DatabaseTablesQuerySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkTablesGet(pk: number, q?: DatabaseTablesQuerySchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20030>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePkTablesGet(pk, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Validates arbitrary SQL.
         * @summary Validates that arbitrary sql is acceptable for the given database
         * @param {ValidateSQLRequest} body Validate SQL request
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkValidateSqlPost(body: ValidateSQLRequest, pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20031>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePkValidateSqlPost(body, pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new Database.
         * @param {DatabaseRestApiPost} body Database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePost(body: DatabaseRestApiPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2018>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabasePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Tests a database connection
         * @param {DatabaseTestConnectionSchema} body Database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseTestConnectionPost(body: DatabaseTestConnectionSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabaseTestConnectionPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Validates parameters used to connect to a database
         * @param {DatabaseValidateParametersSchema} body DB-specific parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseValidateParametersPost(body: DatabaseValidateParametersSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await DatabaseApiAxiosParamCreator(configuration).apiV1DatabaseValidateParametersPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DatabaseApi - factory interface
 * @export
 */
export const DatabaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get names of databases currently available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseAvailableGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse20028>>> {
            return DatabaseApiFp(configuration).apiV1DatabaseAvailableGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Download database(s) and associated dataset(s) as a zip file
         * @param {GetExportIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return DatabaseApiFp(configuration).apiV1DatabaseExportGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of models
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20027>> {
            return DatabaseApiFp(configuration).apiV1DatabaseGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Blob} formData 
         * @param {boolean} overwrite 
         * @param {string} passwords 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return DatabaseApiFp(configuration).apiV1DatabaseImportPostForm(formData, overwrite, passwords, options).then((request) => request(axios, basePath));
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return DatabaseApiFp(configuration).apiV1DatabaseInfoGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Database.
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return DatabaseApiFp(configuration).apiV1DatabasePkDelete(pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Get function names supported by a database
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkFunctionNamesGet(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<DatabaseFunctionNamesResponse>> {
            return DatabaseApiFp(configuration).apiV1DatabasePkFunctionNamesGet(pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a database
         * @param {number} pk The database id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkGet(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DatabaseApiFp(configuration).apiV1DatabasePkGet(pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Changes a Database.
         * @param {DatabaseRestApiPut} body Database schema
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkPut(body: DatabaseRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20029>> {
            return DatabaseApiFp(configuration).apiV1DatabasePkPut(body, pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Get charts and dashboards count associated to a database
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkRelatedObjectsGet(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<DatabaseRelatedObjectsResponse>> {
            return DatabaseApiFp(configuration).apiV1DatabasePkRelatedObjectsGet(pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all schemas from a database
         * @param {number} pk The database id
         * @param {DatabaseSchemasQuerySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkSchemasGet(pk: number, q?: DatabaseSchemasQuerySchema, options?: AxiosRequestConfig): Promise<AxiosResponse<SchemasResponseSchema>> {
            return DatabaseApiFp(configuration).apiV1DatabasePkSchemasGet(pk, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Get database select star for table
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkSelectStarTableNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SelectStarResponseSchema>> {
            return DatabaseApiFp(configuration).apiV1DatabasePkSelectStarTableNameGet(pk, tableName, schemaName, options).then((request) => request(axios, basePath));
        },
        /**
         * Get database select star for table
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SelectStarResponseSchema>> {
            return DatabaseApiFp(configuration).apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a SSH Tunnel.
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkSshTunnelDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return DatabaseApiFp(configuration).apiV1DatabasePkSshTunnelDelete(pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Response depends on each DB engine spec normally focused on partitions
         * @summary Get table extra metadata
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TableExtraMetadataResponseSchema>> {
            return DatabaseApiFp(configuration).apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk, tableName, schemaName, options).then((request) => request(axios, basePath));
        },
        /**
         * Get database table metadata
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkTableTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TableMetadataResponseSchema>> {
            return DatabaseApiFp(configuration).apiV1DatabasePkTableTableNameSchemaNameGet(pk, tableName, schemaName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of tables for given database
         * @param {number} pk The database id
         * @param {DatabaseTablesQuerySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkTablesGet(pk: number, q?: DatabaseTablesQuerySchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20030>> {
            return DatabaseApiFp(configuration).apiV1DatabasePkTablesGet(pk, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates arbitrary SQL.
         * @summary Validates that arbitrary sql is acceptable for the given database
         * @param {ValidateSQLRequest} body Validate SQL request
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePkValidateSqlPost(body: ValidateSQLRequest, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20031>> {
            return DatabaseApiFp(configuration).apiV1DatabasePkValidateSqlPost(body, pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Database.
         * @param {DatabaseRestApiPost} body Database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabasePost(body: DatabaseRestApiPost, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2018>> {
            return DatabaseApiFp(configuration).apiV1DatabasePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Tests a database connection
         * @param {DatabaseTestConnectionSchema} body Database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseTestConnectionPost(body: DatabaseTestConnectionSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return DatabaseApiFp(configuration).apiV1DatabaseTestConnectionPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates parameters used to connect to a database
         * @param {DatabaseValidateParametersSchema} body DB-specific parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DatabaseValidateParametersPost(body: DatabaseValidateParametersSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return DatabaseApiFp(configuration).apiV1DatabaseValidateParametersPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DatabaseApi - object-oriented interface
 * @export
 * @class DatabaseApi
 * @extends {BaseAPI}
 */
export class DatabaseApi extends BaseAPI {
    /**
     * Get names of databases currently available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabaseAvailableGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse20028>>> {
        return DatabaseApiFp(this.configuration).apiV1DatabaseAvailableGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Download database(s) and associated dataset(s) as a zip file
     * @param {GetExportIdsSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabaseExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return DatabaseApiFp(this.configuration).apiV1DatabaseExportGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of models
     * @param {GetListSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabaseGet(q?: GetListSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20027>> {
        return DatabaseApiFp(this.configuration).apiV1DatabaseGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Blob} formData 
     * @param {boolean} overwrite 
     * @param {string} passwords 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabaseImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return DatabaseApiFp(this.configuration).apiV1DatabaseImportPostForm(formData, overwrite, passwords, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get metadata information about this API resource
     * @param {GetInfoSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabaseInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return DatabaseApiFp(this.configuration).apiV1DatabaseInfoGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a Database.
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePkDelete(pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePkDelete(pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get function names supported by a database
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePkFunctionNamesGet(pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<DatabaseFunctionNamesResponse>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePkFunctionNamesGet(pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a database
     * @param {number} pk The database id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePkGet(pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePkGet(pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Changes a Database.
     * @param {DatabaseRestApiPut} body Database schema
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePkPut(body: DatabaseRestApiPut, pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20029>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePkPut(body, pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get charts and dashboards count associated to a database
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePkRelatedObjectsGet(pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<DatabaseRelatedObjectsResponse>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePkRelatedObjectsGet(pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all schemas from a database
     * @param {number} pk The database id
     * @param {DatabaseSchemasQuerySchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePkSchemasGet(pk: number, q?: DatabaseSchemasQuerySchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<SchemasResponseSchema>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePkSchemasGet(pk, q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get database select star for table
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePkSelectStarTableNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SelectStarResponseSchema>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePkSelectStarTableNameGet(pk, tableName, schemaName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get database select star for table
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SelectStarResponseSchema>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a SSH Tunnel.
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePkSshTunnelDelete(pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePkSshTunnelDelete(pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Response depends on each DB engine spec normally focused on partitions
     * @summary Get table extra metadata
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TableExtraMetadataResponseSchema>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk, tableName, schemaName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get database table metadata
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePkTableTableNameSchemaNameGet(pk: number, tableName: string, schemaName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TableMetadataResponseSchema>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePkTableTableNameSchemaNameGet(pk, tableName, schemaName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get a list of tables for given database
     * @param {number} pk The database id
     * @param {DatabaseTablesQuerySchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePkTablesGet(pk: number, q?: DatabaseTablesQuerySchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20030>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePkTablesGet(pk, q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validates arbitrary SQL.
     * @summary Validates that arbitrary sql is acceptable for the given database
     * @param {ValidateSQLRequest} body Validate SQL request
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePkValidateSqlPost(body: ValidateSQLRequest, pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20031>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePkValidateSqlPost(body, pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Database.
     * @param {DatabaseRestApiPost} body Database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabasePost(body: DatabaseRestApiPost, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2018>> {
        return DatabaseApiFp(this.configuration).apiV1DatabasePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tests a database connection
     * @param {DatabaseTestConnectionSchema} body Database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabaseTestConnectionPost(body: DatabaseTestConnectionSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return DatabaseApiFp(this.configuration).apiV1DatabaseTestConnectionPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validates parameters used to connect to a database
     * @param {DatabaseValidateParametersSchema} body DB-specific parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public async apiV1DatabaseValidateParametersPost(body: DatabaseValidateParametersSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return DatabaseApiFp(this.configuration).apiV1DatabaseValidateParametersPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
