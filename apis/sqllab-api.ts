/* tslint:disable */
/* eslint-disable */
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ExecutePayloadSchema } from '../models';
import { InlineResponse400 } from '../models';
import { InlineResponse410 } from '../models';
import { QueryExecutionResponseSchema } from '../models';
import { SqlLabGetResultsSchema } from '../models';
/**
 * SQLLabApi - axios parameter creator
 * @export
 */
export const SQLLabApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Starts the execution of a SQL query
         * @param {ExecutePayloadSchema} body SQL query and params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabExecutePost: async (body: ExecutePayloadSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1SqllabExecutePost.');
            }
            const localVarPath = `/api/v1/sqllab/execute/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Exports the SQL query results to a CSV
         * @param {number} clientId The SQL query result identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabExportClientIdGet: async (clientId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId','Required parameter clientId was null or undefined when calling apiV1SqllabExportClientIdGet.');
            }
            const localVarPath = `/api/v1/sqllab/export/{client_id}/`
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the result of a SQL query execution
         * @param {SqlLabGetResultsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabResultsGet: async (q?: SqlLabGetResultsSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sqllab/results/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SQLLabApi - functional programming interface
 * @export
 */
export const SQLLabApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Starts the execution of a SQL query
         * @param {ExecutePayloadSchema} body SQL query and params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SqllabExecutePost(body: ExecutePayloadSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<QueryExecutionResponseSchema>>> {
            const localVarAxiosArgs = await SQLLabApiAxiosParamCreator(configuration).apiV1SqllabExecutePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Exports the SQL query results to a CSV
         * @param {number} clientId The SQL query result identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SqllabExportClientIdGet(clientId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await SQLLabApiAxiosParamCreator(configuration).apiV1SqllabExportClientIdGet(clientId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the result of a SQL query execution
         * @param {SqlLabGetResultsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SqllabResultsGet(q?: SqlLabGetResultsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<QueryExecutionResponseSchema>>> {
            const localVarAxiosArgs = await SQLLabApiAxiosParamCreator(configuration).apiV1SqllabResultsGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SQLLabApi - factory interface
 * @export
 */
export const SQLLabApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Starts the execution of a SQL query
         * @param {ExecutePayloadSchema} body SQL query and params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SqllabExecutePost(body: ExecutePayloadSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<QueryExecutionResponseSchema>> {
            return SQLLabApiFp(configuration).apiV1SqllabExecutePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Exports the SQL query results to a CSV
         * @param {number} clientId The SQL query result identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SqllabExportClientIdGet(clientId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return SQLLabApiFp(configuration).apiV1SqllabExportClientIdGet(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the result of a SQL query execution
         * @param {SqlLabGetResultsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SqllabResultsGet(q?: SqlLabGetResultsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<QueryExecutionResponseSchema>> {
            return SQLLabApiFp(configuration).apiV1SqllabResultsGet(q, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SQLLabApi - object-oriented interface
 * @export
 * @class SQLLabApi
 * @extends {BaseAPI}
 */
export class SQLLabApi extends BaseAPI {
    /**
     * Starts the execution of a SQL query
     * @param {ExecutePayloadSchema} body SQL query and params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SQLLabApi
     */
    public async apiV1SqllabExecutePost(body: ExecutePayloadSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<QueryExecutionResponseSchema>> {
        return SQLLabApiFp(this.configuration).apiV1SqllabExecutePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Exports the SQL query results to a CSV
     * @param {number} clientId The SQL query result identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SQLLabApi
     */
    public async apiV1SqllabExportClientIdGet(clientId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return SQLLabApiFp(this.configuration).apiV1SqllabExportClientIdGet(clientId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Gets the result of a SQL query execution
     * @param {SqlLabGetResultsSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SQLLabApi
     */
    public async apiV1SqllabResultsGet(q?: SqlLabGetResultsSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<QueryExecutionResponseSchema>> {
        return SQLLabApiFp(this.configuration).apiV1SqllabResultsGet(q, options).then((request) => request(this.axios, this.basePath));
    }
}
