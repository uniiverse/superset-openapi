/* tslint:disable */
/* eslint-disable */
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DashboardRestApiPost } from '../models';
import { DashboardRestApiPut } from '../models';
import { EmbeddedDashboardConfig } from '../models';
import { GetDeleteIdsSchema } from '../models';
import { GetExportIdsSchema } from '../models';
import { GetFavStarIdsSchema } from '../models';
import { GetInfoSchema } from '../models';
import { GetListSchema } from '../models';
import { GetRelatedSchema } from '../models';
import { InlineResponse20016 } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse20020 } from '../models';
import { InlineResponse20021 } from '../models';
import { InlineResponse20022 } from '../models';
import { InlineResponse20023 } from '../models';
import { InlineResponse20024 } from '../models';
import { InlineResponse2014 } from '../models';
import { InlineResponse400 } from '../models';
import { RelatedResponseSchema } from '../models';
import { ThumbnailQuerySchema } from '../models';
/**
 * DashboardsApi - axios parameter creator
 * @export
 */
export const DashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes multiple Dashboards in a bulk operation.
         * @param {GetDeleteIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDelete: async (q?: GetDeleteIdsSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Exports multiple Dashboards and downloads them as YAML files.
         * @param {GetExportIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardExportGet: async (q?: GetExportIdsSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/export/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardFavoriteStatusGet: async (q?: GetFavStarIdsSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/favorite_status/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardGet: async (q?: GetListSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the chart definitions for a given dashboard
         * @param {string} idOrSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugChartsGet: async (idOrSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug','Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugChartsGet.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}/charts`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
         * @param {string} idOrSlug Either the id of the dashboard, or its slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugDatasetsGet: async (idOrSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug','Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugDatasetsGet.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}/datasets`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a dashboard's embedded configuration.
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedDelete: async (idOrSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug','Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugEmbeddedDelete.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}/embedded`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the dashboard's embedded configuration
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedGet: async (idOrSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug','Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugEmbeddedGet.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}/embedded`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets a dashboard's embedded configuration.
         * @param {EmbeddedDashboardConfig} body The embedded configuration to set
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedPost: async (body: EmbeddedDashboardConfig, idOrSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1DashboardIdOrSlugEmbeddedPost.');
            }
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug','Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugEmbeddedPost.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}/embedded`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets a dashboard's embedded configuration.
         * @param {EmbeddedDashboardConfig} body The embedded configuration to set
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedPut: async (body: EmbeddedDashboardConfig, idOrSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1DashboardIdOrSlugEmbeddedPut.');
            }
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug','Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugEmbeddedPut.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}/embedded`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a dashboard detail information.
         * @param {string} idOrSlug Either the id of the dashboard, or its slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugGet: async (idOrSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug','Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugGet.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Blob} formData 
         * @param {boolean} overwrite 
         * @param {string} passwords 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardImportPostForm: async (formData: Blob, overwrite: boolean, passwords: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formData' is not null or undefined
            if (formData === null || formData === undefined) {
                throw new RequiredError('formData','Required parameter formData was null or undefined when calling apiV1DashboardImportPostForm.');
            }
            // verify required parameter 'overwrite' is not null or undefined
            if (overwrite === null || overwrite === undefined) {
                throw new RequiredError('overwrite','Required parameter overwrite was null or undefined when calling apiV1DashboardImportPostForm.');
            }
            // verify required parameter 'passwords' is not null or undefined
            if (passwords === null || passwords === undefined) {
                throw new RequiredError('passwords','Required parameter passwords was null or undefined when calling apiV1DashboardImportPostForm.');
            }
            const localVarPath = `/api/v1/dashboard/import/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication jwt required


            if (formData !== undefined) { 
                localVarFormParams.append('formData', formData as any);
            }

            if (overwrite !== undefined) { 
                localVarFormParams.append('overwrite', overwrite as any);
            }

            if (passwords !== undefined) { 
                localVarFormParams.append('passwords', passwords as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Several metadata information about dashboard API endpoints.
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardInfoGet: async (q?: GetInfoSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Dashboard.
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkDelete: async (pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DashboardPkDelete.');
            }
            const localVarPath = `/api/v1/dashboard/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes a Dashboard.
         * @param {DashboardRestApiPut} body Dashboard schema
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkPut: async (body: DashboardRestApiPut, pk: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1DashboardPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DashboardPkPut.');
            }
            const localVarPath = `/api/v1/dashboard/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Compute async or get already computed dashboard thumbnail from cache.
         * @param {number} pk 
         * @param {string} digest A hex digest that makes this dashboard unique
         * @param {ThumbnailQuerySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkThumbnailDigestGet: async (pk: number, digest: string, q?: ThumbnailQuerySchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk','Required parameter pk was null or undefined when calling apiV1DashboardPkThumbnailDigestGet.');
            }
            // verify required parameter 'digest' is not null or undefined
            if (digest === null || digest === undefined) {
                throw new RequiredError('digest','Required parameter digest was null or undefined when calling apiV1DashboardPkThumbnailDigestGet.');
            }
            const localVarPath = `/api/v1/dashboard/{pk}/thumbnail/{digest}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"digest"}}`, encodeURIComponent(String(digest)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Dashboard.
         * @param {DashboardRestApiPost} body Dashboard schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPost: async (body: DashboardRestApiPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1DashboardPost.');
            }
            const localVarPath = `/api/v1/dashboard/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all possible owners for a dashboard.
         * @param {string} columnName 
         * @param {GetRelatedSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardRelatedColumnNameGet: async (columnName: string, q?: GetRelatedSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName','Required parameter columnName was null or undefined when calling apiV1DashboardRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/dashboard/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardsApi - functional programming interface
 * @export
 */
export const DashboardsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes multiple Dashboards in a bulk operation.
         * @param {GetDeleteIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardDelete(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Exports multiple Dashboards and downloads them as YAML files.
         * @param {GetExportIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardExportGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardFavoriteStatusGet(q?: GetFavStarIdsSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetFavStarIdsSchema>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardFavoriteStatusGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20016>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the chart definitions for a given dashboard
         * @param {string} idOrSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugChartsGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20021>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardIdOrSlugChartsGet(idOrSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
         * @param {string} idOrSlug Either the id of the dashboard, or its slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugDatasetsGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20022>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardIdOrSlugDatasetsGet(idOrSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Removes a dashboard's embedded configuration.
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the dashboard's embedded configuration
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20023>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets a dashboard's embedded configuration.
         * @param {EmbeddedDashboardConfig} body The embedded configuration to set
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugEmbeddedPost(body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20023>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardIdOrSlugEmbeddedPost(body, idOrSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets a dashboard's embedded configuration.
         * @param {EmbeddedDashboardConfig} body The embedded configuration to set
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugEmbeddedPut(body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20023>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardIdOrSlugEmbeddedPut(body, idOrSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a dashboard detail information.
         * @param {string} idOrSlug Either the id of the dashboard, or its slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20020>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardIdOrSlugGet(idOrSlug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Blob} formData 
         * @param {boolean} overwrite 
         * @param {string} passwords 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardImportPostForm(formData, overwrite, passwords, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Several metadata information about dashboard API endpoints.
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardInfoGet(q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a Dashboard.
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardPkDelete(pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse400>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardPkDelete(pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Changes a Dashboard.
         * @param {DashboardRestApiPut} body Dashboard schema
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardPkPut(body: DashboardRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20024>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardPkPut(body, pk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Compute async or get already computed dashboard thumbnail from cache.
         * @param {number} pk 
         * @param {string} digest A hex digest that makes this dashboard unique
         * @param {ThumbnailQuerySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardPkThumbnailDigestGet(pk: number, digest: string, q?: ThumbnailQuerySchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardPkThumbnailDigestGet(pk, digest, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new Dashboard.
         * @param {DashboardRestApiPost} body Dashboard schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardPost(body: DashboardRestApiPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2014>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of all possible owners for a dashboard.
         * @param {string} columnName 
         * @param {GetRelatedSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RelatedResponseSchema>>> {
            const localVarAxiosArgs = await DashboardsApiAxiosParamCreator(configuration).apiV1DashboardRelatedColumnNameGet(columnName, q, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DashboardsApi - factory interface
 * @export
 */
export const DashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes multiple Dashboards in a bulk operation.
         * @param {GetDeleteIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return DashboardsApiFp(configuration).apiV1DashboardDelete(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Exports multiple Dashboards and downloads them as YAML files.
         * @param {GetExportIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DashboardsApiFp(configuration).apiV1DashboardExportGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardFavoriteStatusGet(q?: GetFavStarIdsSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<GetFavStarIdsSchema>> {
            return DashboardsApiFp(configuration).apiV1DashboardFavoriteStatusGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardGet(q?: GetListSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20016>> {
            return DashboardsApiFp(configuration).apiV1DashboardGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the chart definitions for a given dashboard
         * @param {string} idOrSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugChartsGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20021>> {
            return DashboardsApiFp(configuration).apiV1DashboardIdOrSlugChartsGet(idOrSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
         * @param {string} idOrSlug Either the id of the dashboard, or its slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugDatasetsGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20022>> {
            return DashboardsApiFp(configuration).apiV1DashboardIdOrSlugDatasetsGet(idOrSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a dashboard's embedded configuration.
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return DashboardsApiFp(configuration).apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the dashboard's embedded configuration
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20023>> {
            return DashboardsApiFp(configuration).apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets a dashboard's embedded configuration.
         * @param {EmbeddedDashboardConfig} body The embedded configuration to set
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugEmbeddedPost(body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20023>> {
            return DashboardsApiFp(configuration).apiV1DashboardIdOrSlugEmbeddedPost(body, idOrSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets a dashboard's embedded configuration.
         * @param {EmbeddedDashboardConfig} body The embedded configuration to set
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugEmbeddedPut(body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20023>> {
            return DashboardsApiFp(configuration).apiV1DashboardIdOrSlugEmbeddedPut(body, idOrSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a dashboard detail information.
         * @param {string} idOrSlug Either the id of the dashboard, or its slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardIdOrSlugGet(idOrSlug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20020>> {
            return DashboardsApiFp(configuration).apiV1DashboardIdOrSlugGet(idOrSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Blob} formData 
         * @param {boolean} overwrite 
         * @param {string} passwords 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return DashboardsApiFp(configuration).apiV1DashboardImportPostForm(formData, overwrite, passwords, options).then((request) => request(axios, basePath));
        },
        /**
         * Several metadata information about dashboard API endpoints.
         * @param {GetInfoSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return DashboardsApiFp(configuration).apiV1DashboardInfoGet(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Dashboard.
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardPkDelete(pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse400>> {
            return DashboardsApiFp(configuration).apiV1DashboardPkDelete(pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Changes a Dashboard.
         * @param {DashboardRestApiPut} body Dashboard schema
         * @param {number} pk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardPkPut(body: DashboardRestApiPut, pk: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20024>> {
            return DashboardsApiFp(configuration).apiV1DashboardPkPut(body, pk, options).then((request) => request(axios, basePath));
        },
        /**
         * Compute async or get already computed dashboard thumbnail from cache.
         * @param {number} pk 
         * @param {string} digest A hex digest that makes this dashboard unique
         * @param {ThumbnailQuerySchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardPkThumbnailDigestGet(pk: number, digest: string, q?: ThumbnailQuerySchema, options?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> {
            return DashboardsApiFp(configuration).apiV1DashboardPkThumbnailDigestGet(pk, digest, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dashboard.
         * @param {DashboardRestApiPost} body Dashboard schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardPost(body: DashboardRestApiPost, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2014>> {
            return DashboardsApiFp(configuration).apiV1DashboardPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all possible owners for a dashboard.
         * @param {string} columnName 
         * @param {GetRelatedSchema} [q] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<RelatedResponseSchema>> {
            return DashboardsApiFp(configuration).apiV1DashboardRelatedColumnNameGet(columnName, q, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardsApi - object-oriented interface
 * @export
 * @class DashboardsApi
 * @extends {BaseAPI}
 */
export class DashboardsApi extends BaseAPI {
    /**
     * Deletes multiple Dashboards in a bulk operation.
     * @param {GetDeleteIdsSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardDelete(q?: GetDeleteIdsSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardDelete(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Exports multiple Dashboards and downloads them as YAML files.
     * @param {GetExportIdsSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardExportGet(q?: GetExportIdsSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardExportGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Check favorited dashboards for current user
     * @param {GetFavStarIdsSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardFavoriteStatusGet(q?: GetFavStarIdsSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetFavStarIdsSchema>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardFavoriteStatusGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardGet(q?: GetListSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20016>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the chart definitions for a given dashboard
     * @param {string} idOrSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardIdOrSlugChartsGet(idOrSlug: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20021>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardIdOrSlugChartsGet(idOrSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
     * @param {string} idOrSlug Either the id of the dashboard, or its slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardIdOrSlugDatasetsGet(idOrSlug: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20022>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardIdOrSlugDatasetsGet(idOrSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes a dashboard's embedded configuration.
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the dashboard's embedded configuration
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20023>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets a dashboard's embedded configuration.
     * @param {EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardIdOrSlugEmbeddedPost(body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20023>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardIdOrSlugEmbeddedPost(body, idOrSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets a dashboard's embedded configuration.
     * @param {EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardIdOrSlugEmbeddedPut(body: EmbeddedDashboardConfig, idOrSlug: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20023>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardIdOrSlugEmbeddedPut(body, idOrSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a dashboard detail information.
     * @param {string} idOrSlug Either the id of the dashboard, or its slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardIdOrSlugGet(idOrSlug: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20020>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardIdOrSlugGet(idOrSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Blob} formData 
     * @param {boolean} overwrite 
     * @param {string} passwords 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardImportPostForm(formData: Blob, overwrite: boolean, passwords: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardImportPostForm(formData, overwrite, passwords, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Several metadata information about dashboard API endpoints.
     * @param {GetInfoSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardInfoGet(q?: GetInfoSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardInfoGet(q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a Dashboard.
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardPkDelete(pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse400>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardPkDelete(pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Changes a Dashboard.
     * @param {DashboardRestApiPut} body Dashboard schema
     * @param {number} pk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardPkPut(body: DashboardRestApiPut, pk: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20024>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardPkPut(body, pk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Compute async or get already computed dashboard thumbnail from cache.
     * @param {number} pk 
     * @param {string} digest A hex digest that makes this dashboard unique
     * @param {ThumbnailQuerySchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardPkThumbnailDigestGet(pk: number, digest: string, q?: ThumbnailQuerySchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blob>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardPkThumbnailDigestGet(pk, digest, q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Dashboard.
     * @param {DashboardRestApiPost} body Dashboard schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardPost(body: DashboardRestApiPost, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2014>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of all possible owners for a dashboard.
     * @param {string} columnName 
     * @param {GetRelatedSchema} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public async apiV1DashboardRelatedColumnNameGet(columnName: string, q?: GetRelatedSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<RelatedResponseSchema>> {
        return DashboardsApiFp(this.configuration).apiV1DashboardRelatedColumnNameGet(columnName, q, options).then((request) => request(this.axios, this.basePath));
    }
}
