/* tslint:disable */
/* eslint-disable */
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ExploreContextSchema } from '../models';
import { InlineResponse400 } from '../models';
/**
 * ExploreApi - axios parameter creator
 * @export
 */
export const ExploreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.<br/><br/>\\nThe information can be assembled from:<br/> - The cache using a form_data_key<br/> - The metadata database using a permalink_key<br/> - Build from scratch using dataset or slice identifiers.
         * @summary Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.
         * @param {string} [formDataKey] 
         * @param {string} [permalinkKey] 
         * @param {number} [sliceId] 
         * @param {number} [datasourceId] 
         * @param {string} [datasourceType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreGet: async (formDataKey?: string, permalinkKey?: string, sliceId?: number, datasourceId?: number, datasourceType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/explore/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (formDataKey !== undefined) {
                localVarQueryParameter['form_data_key'] = formDataKey;
            }

            if (permalinkKey !== undefined) {
                localVarQueryParameter['permalink_key'] = permalinkKey;
            }

            if (sliceId !== undefined) {
                localVarQueryParameter['slice_id'] = sliceId;
            }

            if (datasourceId !== undefined) {
                localVarQueryParameter['datasource_id'] = datasourceId;
            }

            if (datasourceType !== undefined) {
                localVarQueryParameter['datasource_type'] = datasourceType;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExploreApi - functional programming interface
 * @export
 */
export const ExploreApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.<br/><br/>\\nThe information can be assembled from:<br/> - The cache using a form_data_key<br/> - The metadata database using a permalink_key<br/> - Build from scratch using dataset or slice identifiers.
         * @summary Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.
         * @param {string} [formDataKey] 
         * @param {string} [permalinkKey] 
         * @param {number} [sliceId] 
         * @param {number} [datasourceId] 
         * @param {string} [datasourceType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExploreGet(formDataKey?: string, permalinkKey?: string, sliceId?: number, datasourceId?: number, datasourceType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExploreContextSchema>>> {
            const localVarAxiosArgs = await ExploreApiAxiosParamCreator(configuration).apiV1ExploreGet(formDataKey, permalinkKey, sliceId, datasourceId, datasourceType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ExploreApi - factory interface
 * @export
 */
export const ExploreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.<br/><br/>\\nThe information can be assembled from:<br/> - The cache using a form_data_key<br/> - The metadata database using a permalink_key<br/> - Build from scratch using dataset or slice identifiers.
         * @summary Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.
         * @param {string} [formDataKey] 
         * @param {string} [permalinkKey] 
         * @param {number} [sliceId] 
         * @param {number} [datasourceId] 
         * @param {string} [datasourceType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExploreGet(formDataKey?: string, permalinkKey?: string, sliceId?: number, datasourceId?: number, datasourceType?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ExploreContextSchema>> {
            return ExploreApiFp(configuration).apiV1ExploreGet(formDataKey, permalinkKey, sliceId, datasourceId, datasourceType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExploreApi - object-oriented interface
 * @export
 * @class ExploreApi
 * @extends {BaseAPI}
 */
export class ExploreApi extends BaseAPI {
    /**
     * Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.<br/><br/>\\nThe information can be assembled from:<br/> - The cache using a form_data_key<br/> - The metadata database using a permalink_key<br/> - Build from scratch using dataset or slice identifiers.
     * @summary Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.
     * @param {string} [formDataKey] 
     * @param {string} [permalinkKey] 
     * @param {number} [sliceId] 
     * @param {number} [datasourceId] 
     * @param {string} [datasourceType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExploreApi
     */
    public async apiV1ExploreGet(formDataKey?: string, permalinkKey?: string, sliceId?: number, datasourceId?: number, datasourceType?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExploreContextSchema>> {
        return ExploreApiFp(this.configuration).apiV1ExploreGet(formDataKey, permalinkKey, sliceId, datasourceId, datasourceType, options).then((request) => request(this.axios, this.basePath));
    }
}
