/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ReportExecutionLogRestApiGetList', function() {
      beforeEach(function() {
        instance = new Superset.ReportExecutionLogRestApiGetList();
      });

      it('should create an instance of ReportExecutionLogRestApiGetList', function() {
        // TODO: update the code to test ReportExecutionLogRestApiGetList
        expect(instance).to.be.a(Superset.ReportExecutionLogRestApiGetList);
      });

      it('should have the property endDttm (base name: "end_dttm")', function() {
        // TODO: update the code to test the property endDttm
        expect(instance).to.have.property('endDttm');
        // expect(instance.endDttm).to.be(expectedValueLiteral);
      });

      it('should have the property errorMessage (base name: "error_message")', function() {
        // TODO: update the code to test the property errorMessage
        expect(instance).to.have.property('errorMessage');
        // expect(instance.errorMessage).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property scheduledDttm (base name: "scheduled_dttm")', function() {
        // TODO: update the code to test the property scheduledDttm
        expect(instance).to.have.property('scheduledDttm');
        // expect(instance.scheduledDttm).to.be(expectedValueLiteral);
      });

      it('should have the property startDttm (base name: "start_dttm")', function() {
        // TODO: update the code to test the property startDttm
        expect(instance).to.have.property('startDttm');
        // expect(instance.startDttm).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property uuid (base name: "uuid")', function() {
        // TODO: update the code to test the property uuid
        expect(instance).to.have.property('uuid');
        // expect(instance.uuid).to.be(expectedValueLiteral);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

      it('should have the property valueRowJson (base name: "value_row_json")', function() {
        // TODO: update the code to test the property valueRowJson
        expect(instance).to.have.property('valueRowJson');
        // expect(instance.valueRowJson).to.be(expectedValueLiteral);
      });

    });
  });

}));
