/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ReportScheduleRestApiPost', function() {
      beforeEach(function() {
        instance = new Superset.ReportScheduleRestApiPost();
      });

      it('should create an instance of ReportScheduleRestApiPost', function() {
        // TODO: update the code to test ReportScheduleRestApiPost
        expect(instance).to.be.a(Superset.ReportScheduleRestApiPost);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property chart (base name: "chart")', function() {
        // TODO: update the code to test the property chart
        expect(instance).to.have.property('chart');
        // expect(instance.chart).to.be(expectedValueLiteral);
      });

      it('should have the property contextMarkdown (base name: "context_markdown")', function() {
        // TODO: update the code to test the property contextMarkdown
        expect(instance).to.have.property('contextMarkdown');
        // expect(instance.contextMarkdown).to.be(expectedValueLiteral);
      });

      it('should have the property creationMethod (base name: "creation_method")', function() {
        // TODO: update the code to test the property creationMethod
        expect(instance).to.have.property('creationMethod');
        // expect(instance.creationMethod).to.be(expectedValueLiteral);
      });

      it('should have the property crontab (base name: "crontab")', function() {
        // TODO: update the code to test the property crontab
        expect(instance).to.have.property('crontab');
        // expect(instance.crontab).to.be(expectedValueLiteral);
      });

      it('should have the property dashboard (base name: "dashboard")', function() {
        // TODO: update the code to test the property dashboard
        expect(instance).to.have.property('dashboard');
        // expect(instance.dashboard).to.be(expectedValueLiteral);
      });

      it('should have the property database (base name: "database")', function() {
        // TODO: update the code to test the property database
        expect(instance).to.have.property('database');
        // expect(instance.database).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property extra (base name: "extra")', function() {
        // TODO: update the code to test the property extra
        expect(instance).to.have.property('extra');
        // expect(instance.extra).to.be(expectedValueLiteral);
      });

      it('should have the property forceScreenshot (base name: "force_screenshot")', function() {
        // TODO: update the code to test the property forceScreenshot
        expect(instance).to.have.property('forceScreenshot');
        // expect(instance.forceScreenshot).to.be(expectedValueLiteral);
      });

      it('should have the property gracePeriod (base name: "grace_period")', function() {
        // TODO: update the code to test the property gracePeriod
        expect(instance).to.have.property('gracePeriod');
        // expect(instance.gracePeriod).to.be(expectedValueLiteral);
      });

      it('should have the property logRetention (base name: "log_retention")', function() {
        // TODO: update the code to test the property logRetention
        expect(instance).to.have.property('logRetention');
        // expect(instance.logRetention).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property owners (base name: "owners")', function() {
        // TODO: update the code to test the property owners
        expect(instance).to.have.property('owners');
        // expect(instance.owners).to.be(expectedValueLiteral);
      });

      it('should have the property recipients (base name: "recipients")', function() {
        // TODO: update the code to test the property recipients
        expect(instance).to.have.property('recipients');
        // expect(instance.recipients).to.be(expectedValueLiteral);
      });

      it('should have the property reportFormat (base name: "report_format")', function() {
        // TODO: update the code to test the property reportFormat
        expect(instance).to.have.property('reportFormat');
        // expect(instance.reportFormat).to.be(expectedValueLiteral);
      });

      it('should have the property selectedTabs (base name: "selected_tabs")', function() {
        // TODO: update the code to test the property selectedTabs
        expect(instance).to.have.property('selectedTabs');
        // expect(instance.selectedTabs).to.be(expectedValueLiteral);
      });

      it('should have the property sql (base name: "sql")', function() {
        // TODO: update the code to test the property sql
        expect(instance).to.have.property('sql');
        // expect(instance.sql).to.be(expectedValueLiteral);
      });

      it('should have the property timezone (base name: "timezone")', function() {
        // TODO: update the code to test the property timezone
        expect(instance).to.have.property('timezone');
        // expect(instance.timezone).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property validatorConfigJson (base name: "validator_config_json")', function() {
        // TODO: update the code to test the property validatorConfigJson
        expect(instance).to.have.property('validatorConfigJson');
        // expect(instance.validatorConfigJson).to.be(expectedValueLiteral);
      });

      it('should have the property validatorType (base name: "validator_type")', function() {
        // TODO: update the code to test the property validatorType
        expect(instance).to.have.property('validatorType');
        // expect(instance.validatorType).to.be(expectedValueLiteral);
      });

      it('should have the property workingTimeout (base name: "working_timeout")', function() {
        // TODO: update the code to test the property workingTimeout
        expect(instance).to.have.property('workingTimeout');
        // expect(instance.workingTimeout).to.be(expectedValueLiteral);
      });

    });
  });

}));
