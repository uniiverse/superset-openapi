/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Datasource', function() {
      beforeEach(function() {
        instance = new Superset.Datasource();
      });

      it('should create an instance of Datasource', function() {
        // TODO: update the code to test Datasource
        expect(instance).to.be.a(Superset.Datasource);
      });

      it('should have the property databaseName (base name: "database_name")', function() {
        // TODO: update the code to test the property databaseName
        expect(instance).to.have.property('databaseName');
        // expect(instance.databaseName).to.be(expectedValueLiteral);
      });

      it('should have the property datasourceName (base name: "datasource_name")', function() {
        // TODO: update the code to test the property datasourceName
        expect(instance).to.have.property('datasourceName');
        // expect(instance.datasourceName).to.be(expectedValueLiteral);
      });

      it('should have the property datasourceType (base name: "datasource_type")', function() {
        // TODO: update the code to test the property datasourceType
        expect(instance).to.have.property('datasourceType');
        // expect(instance.datasourceType).to.be(expectedValueLiteral);
      });

      it('should have the property schema (base name: "schema")', function() {
        // TODO: update the code to test the property schema
        expect(instance).to.have.property('schema');
        // expect(instance.schema).to.be(expectedValueLiteral);
      });

    });
  });

}));
