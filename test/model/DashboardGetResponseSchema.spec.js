/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DashboardGetResponseSchema', function() {
      beforeEach(function() {
        instance = new Superset.DashboardGetResponseSchema();
      });

      it('should create an instance of DashboardGetResponseSchema', function() {
        // TODO: update the code to test DashboardGetResponseSchema
        expect(instance).to.be.a(Superset.DashboardGetResponseSchema);
      });

      it('should have the property certificationDetails (base name: "certification_details")', function() {
        // TODO: update the code to test the property certificationDetails
        expect(instance).to.have.property('certificationDetails');
        // expect(instance.certificationDetails).to.be(expectedValueLiteral);
      });

      it('should have the property certifiedBy (base name: "certified_by")', function() {
        // TODO: update the code to test the property certifiedBy
        expect(instance).to.have.property('certifiedBy');
        // expect(instance.certifiedBy).to.be(expectedValueLiteral);
      });

      it('should have the property changedBy (base name: "changed_by")', function() {
        // TODO: update the code to test the property changedBy
        expect(instance).to.have.property('changedBy');
        // expect(instance.changedBy).to.be(expectedValueLiteral);
      });

      it('should have the property changedByName (base name: "changed_by_name")', function() {
        // TODO: update the code to test the property changedByName
        expect(instance).to.have.property('changedByName');
        // expect(instance.changedByName).to.be(expectedValueLiteral);
      });

      it('should have the property changedByUrl (base name: "changed_by_url")', function() {
        // TODO: update the code to test the property changedByUrl
        expect(instance).to.have.property('changedByUrl');
        // expect(instance.changedByUrl).to.be(expectedValueLiteral);
      });

      it('should have the property changedOn (base name: "changed_on")', function() {
        // TODO: update the code to test the property changedOn
        expect(instance).to.have.property('changedOn');
        // expect(instance.changedOn).to.be(expectedValueLiteral);
      });

      it('should have the property changedOnDeltaHumanized (base name: "changed_on_delta_humanized")', function() {
        // TODO: update the code to test the property changedOnDeltaHumanized
        expect(instance).to.have.property('changedOnDeltaHumanized');
        // expect(instance.changedOnDeltaHumanized).to.be(expectedValueLiteral);
      });

      it('should have the property charts (base name: "charts")', function() {
        // TODO: update the code to test the property charts
        expect(instance).to.have.property('charts');
        // expect(instance.charts).to.be(expectedValueLiteral);
      });

      it('should have the property css (base name: "css")', function() {
        // TODO: update the code to test the property css
        expect(instance).to.have.property('css');
        // expect(instance.css).to.be(expectedValueLiteral);
      });

      it('should have the property dashboardTitle (base name: "dashboard_title")', function() {
        // TODO: update the code to test the property dashboardTitle
        expect(instance).to.have.property('dashboardTitle');
        // expect(instance.dashboardTitle).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property isManagedExternally (base name: "is_managed_externally")', function() {
        // TODO: update the code to test the property isManagedExternally
        expect(instance).to.have.property('isManagedExternally');
        // expect(instance.isManagedExternally).to.be(expectedValueLiteral);
      });

      it('should have the property jsonMetadata (base name: "json_metadata")', function() {
        // TODO: update the code to test the property jsonMetadata
        expect(instance).to.have.property('jsonMetadata');
        // expect(instance.jsonMetadata).to.be(expectedValueLiteral);
      });

      it('should have the property owners (base name: "owners")', function() {
        // TODO: update the code to test the property owners
        expect(instance).to.have.property('owners');
        // expect(instance.owners).to.be(expectedValueLiteral);
      });

      it('should have the property positionJson (base name: "position_json")', function() {
        // TODO: update the code to test the property positionJson
        expect(instance).to.have.property('positionJson');
        // expect(instance.positionJson).to.be(expectedValueLiteral);
      });

      it('should have the property published (base name: "published")', function() {
        // TODO: update the code to test the property published
        expect(instance).to.have.property('published');
        // expect(instance.published).to.be(expectedValueLiteral);
      });

      it('should have the property roles (base name: "roles")', function() {
        // TODO: update the code to test the property roles
        expect(instance).to.have.property('roles');
        // expect(instance.roles).to.be(expectedValueLiteral);
      });

      it('should have the property slug (base name: "slug")', function() {
        // TODO: update the code to test the property slug
        expect(instance).to.have.property('slug');
        // expect(instance.slug).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

      it('should have the property thumbnailUrl (base name: "thumbnail_url")', function() {
        // TODO: update the code to test the property thumbnailUrl
        expect(instance).to.have.property('thumbnailUrl');
        // expect(instance.thumbnailUrl).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

    });
  });

}));
