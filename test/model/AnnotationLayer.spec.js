/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AnnotationLayer', function() {
      beforeEach(function() {
        instance = new Superset.AnnotationLayer();
      });

      it('should create an instance of AnnotationLayer', function() {
        // TODO: update the code to test AnnotationLayer
        expect(instance).to.be.a(Superset.AnnotationLayer);
      });

      it('should have the property annotationType (base name: "annotationType")', function() {
        // TODO: update the code to test the property annotationType
        expect(instance).to.have.property('annotationType');
        // expect(instance.annotationType).to.be(expectedValueLiteral);
      });

      it('should have the property color (base name: "color")', function() {
        // TODO: update the code to test the property color
        expect(instance).to.have.property('color');
        // expect(instance.color).to.be(expectedValueLiteral);
      });

      it('should have the property descriptionColumns (base name: "descriptionColumns")', function() {
        // TODO: update the code to test the property descriptionColumns
        expect(instance).to.have.property('descriptionColumns');
        // expect(instance.descriptionColumns).to.be(expectedValueLiteral);
      });

      it('should have the property hideLine (base name: "hideLine")', function() {
        // TODO: update the code to test the property hideLine
        expect(instance).to.have.property('hideLine');
        // expect(instance.hideLine).to.be(expectedValueLiteral);
      });

      it('should have the property intervalEndColumn (base name: "intervalEndColumn")', function() {
        // TODO: update the code to test the property intervalEndColumn
        expect(instance).to.have.property('intervalEndColumn');
        // expect(instance.intervalEndColumn).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property opacity (base name: "opacity")', function() {
        // TODO: update the code to test the property opacity
        expect(instance).to.have.property('opacity');
        // expect(instance.opacity).to.be(expectedValueLiteral);
      });

      it('should have the property overrides (base name: "overrides")', function() {
        // TODO: update the code to test the property overrides
        expect(instance).to.have.property('overrides');
        // expect(instance.overrides).to.be(expectedValueLiteral);
      });

      it('should have the property show (base name: "show")', function() {
        // TODO: update the code to test the property show
        expect(instance).to.have.property('show');
        // expect(instance.show).to.be(expectedValueLiteral);
      });

      it('should have the property showLabel (base name: "showLabel")', function() {
        // TODO: update the code to test the property showLabel
        expect(instance).to.have.property('showLabel');
        // expect(instance.showLabel).to.be(expectedValueLiteral);
      });

      it('should have the property showMarkers (base name: "showMarkers")', function() {
        // TODO: update the code to test the property showMarkers
        expect(instance).to.have.property('showMarkers');
        // expect(instance.showMarkers).to.be(expectedValueLiteral);
      });

      it('should have the property sourceType (base name: "sourceType")', function() {
        // TODO: update the code to test the property sourceType
        expect(instance).to.have.property('sourceType');
        // expect(instance.sourceType).to.be(expectedValueLiteral);
      });

      it('should have the property style (base name: "style")', function() {
        // TODO: update the code to test the property style
        expect(instance).to.have.property('style');
        // expect(instance.style).to.be(expectedValueLiteral);
      });

      it('should have the property timeColumn (base name: "timeColumn")', function() {
        // TODO: update the code to test the property timeColumn
        expect(instance).to.have.property('timeColumn');
        // expect(instance.timeColumn).to.be(expectedValueLiteral);
      });

      it('should have the property titleColumn (base name: "titleColumn")', function() {
        // TODO: update the code to test the property titleColumn
        expect(instance).to.have.property('titleColumn');
        // expect(instance.titleColumn).to.be(expectedValueLiteral);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

      it('should have the property width (base name: "width")', function() {
        // TODO: update the code to test the property width
        expect(instance).to.have.property('width');
        // expect(instance.width).to.be(expectedValueLiteral);
      });

    });
  });

}));
