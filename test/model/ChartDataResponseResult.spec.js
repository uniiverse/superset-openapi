/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ChartDataResponseResult', function() {
      beforeEach(function() {
        instance = new Superset.ChartDataResponseResult();
      });

      it('should create an instance of ChartDataResponseResult', function() {
        // TODO: update the code to test ChartDataResponseResult
        expect(instance).to.be.a(Superset.ChartDataResponseResult);
      });

      it('should have the property annotationData (base name: "annotation_data")', function() {
        // TODO: update the code to test the property annotationData
        expect(instance).to.have.property('annotationData');
        // expect(instance.annotationData).to.be(expectedValueLiteral);
      });

      it('should have the property appliedFilters (base name: "applied_filters")', function() {
        // TODO: update the code to test the property appliedFilters
        expect(instance).to.have.property('appliedFilters');
        // expect(instance.appliedFilters).to.be(expectedValueLiteral);
      });

      it('should have the property cacheKey (base name: "cache_key")', function() {
        // TODO: update the code to test the property cacheKey
        expect(instance).to.have.property('cacheKey');
        // expect(instance.cacheKey).to.be(expectedValueLiteral);
      });

      it('should have the property cacheTimeout (base name: "cache_timeout")', function() {
        // TODO: update the code to test the property cacheTimeout
        expect(instance).to.have.property('cacheTimeout');
        // expect(instance.cacheTimeout).to.be(expectedValueLiteral);
      });

      it('should have the property cachedDttm (base name: "cached_dttm")', function() {
        // TODO: update the code to test the property cachedDttm
        expect(instance).to.have.property('cachedDttm');
        // expect(instance.cachedDttm).to.be(expectedValueLiteral);
      });

      it('should have the property colnames (base name: "colnames")', function() {
        // TODO: update the code to test the property colnames
        expect(instance).to.have.property('colnames');
        // expect(instance.colnames).to.be(expectedValueLiteral);
      });

      it('should have the property coltypes (base name: "coltypes")', function() {
        // TODO: update the code to test the property coltypes
        expect(instance).to.have.property('coltypes');
        // expect(instance.coltypes).to.be(expectedValueLiteral);
      });

      it('should have the property data (base name: "data")', function() {
        // TODO: update the code to test the property data
        expect(instance).to.have.property('data');
        // expect(instance.data).to.be(expectedValueLiteral);
      });

      it('should have the property error (base name: "error")', function() {
        // TODO: update the code to test the property error
        expect(instance).to.have.property('error');
        // expect(instance.error).to.be(expectedValueLiteral);
      });

      it('should have the property fromDttm (base name: "from_dttm")', function() {
        // TODO: update the code to test the property fromDttm
        expect(instance).to.have.property('fromDttm');
        // expect(instance.fromDttm).to.be(expectedValueLiteral);
      });

      it('should have the property isCached (base name: "is_cached")', function() {
        // TODO: update the code to test the property isCached
        expect(instance).to.have.property('isCached');
        // expect(instance.isCached).to.be(expectedValueLiteral);
      });

      it('should have the property query (base name: "query")', function() {
        // TODO: update the code to test the property query
        expect(instance).to.have.property('query');
        // expect(instance.query).to.be(expectedValueLiteral);
      });

      it('should have the property rejectedFilters (base name: "rejected_filters")', function() {
        // TODO: update the code to test the property rejectedFilters
        expect(instance).to.have.property('rejectedFilters');
        // expect(instance.rejectedFilters).to.be(expectedValueLiteral);
      });

      it('should have the property rowcount (base name: "rowcount")', function() {
        // TODO: update the code to test the property rowcount
        expect(instance).to.have.property('rowcount');
        // expect(instance.rowcount).to.be(expectedValueLiteral);
      });

      it('should have the property stacktrace (base name: "stacktrace")', function() {
        // TODO: update the code to test the property stacktrace
        expect(instance).to.have.property('stacktrace');
        // expect(instance.stacktrace).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property toDttm (base name: "to_dttm")', function() {
        // TODO: update the code to test the property toDttm
        expect(instance).to.have.property('toDttm');
        // expect(instance.toDttm).to.be(expectedValueLiteral);
      });

    });
  });

}));
