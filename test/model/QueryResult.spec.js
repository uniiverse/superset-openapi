/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('QueryResult', function() {
      beforeEach(function() {
        instance = new Superset.QueryResult();
      });

      it('should create an instance of QueryResult', function() {
        // TODO: update the code to test QueryResult
        expect(instance).to.be.a(Superset.QueryResult);
      });

      it('should have the property changedOn (base name: "changedOn")', function() {
        // TODO: update the code to test the property changedOn
        expect(instance).to.have.property('changedOn');
        // expect(instance.changedOn).to.be(expectedValueLiteral);
      });

      it('should have the property changedOn (base name: "changed_on")', function() {
        // TODO: update the code to test the property changedOn
        expect(instance).to.have.property('changedOn');
        // expect(instance.changedOn).to.be(expectedValueLiteral);
      });

      it('should have the property ctas (base name: "ctas")', function() {
        // TODO: update the code to test the property ctas
        expect(instance).to.have.property('ctas');
        // expect(instance.ctas).to.be(expectedValueLiteral);
      });

      it('should have the property db (base name: "db")', function() {
        // TODO: update the code to test the property db
        expect(instance).to.have.property('db');
        // expect(instance.db).to.be(expectedValueLiteral);
      });

      it('should have the property dbId (base name: "dbId")', function() {
        // TODO: update the code to test the property dbId
        expect(instance).to.have.property('dbId');
        // expect(instance.dbId).to.be(expectedValueLiteral);
      });

      it('should have the property endDttm (base name: "endDttm")', function() {
        // TODO: update the code to test the property endDttm
        expect(instance).to.have.property('endDttm');
        // expect(instance.endDttm).to.be(expectedValueLiteral);
      });

      it('should have the property errorMessage (base name: "errorMessage")', function() {
        // TODO: update the code to test the property errorMessage
        expect(instance).to.have.property('errorMessage');
        // expect(instance.errorMessage).to.be(expectedValueLiteral);
      });

      it('should have the property executedSql (base name: "executedSql")', function() {
        // TODO: update the code to test the property executedSql
        expect(instance).to.have.property('executedSql');
        // expect(instance.executedSql).to.be(expectedValueLiteral);
      });

      it('should have the property extra (base name: "extra")', function() {
        // TODO: update the code to test the property extra
        expect(instance).to.have.property('extra');
        // expect(instance.extra).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property limit (base name: "limit")', function() {
        // TODO: update the code to test the property limit
        expect(instance).to.have.property('limit');
        // expect(instance.limit).to.be(expectedValueLiteral);
      });

      it('should have the property limitingFactor (base name: "limitingFactor")', function() {
        // TODO: update the code to test the property limitingFactor
        expect(instance).to.have.property('limitingFactor');
        // expect(instance.limitingFactor).to.be(expectedValueLiteral);
      });

      it('should have the property progress (base name: "progress")', function() {
        // TODO: update the code to test the property progress
        expect(instance).to.have.property('progress');
        // expect(instance.progress).to.be(expectedValueLiteral);
      });

      it('should have the property queryId (base name: "queryId")', function() {
        // TODO: update the code to test the property queryId
        expect(instance).to.have.property('queryId');
        // expect(instance.queryId).to.be(expectedValueLiteral);
      });

      it('should have the property resultsKey (base name: "resultsKey")', function() {
        // TODO: update the code to test the property resultsKey
        expect(instance).to.have.property('resultsKey');
        // expect(instance.resultsKey).to.be(expectedValueLiteral);
      });

      it('should have the property rows (base name: "rows")', function() {
        // TODO: update the code to test the property rows
        expect(instance).to.have.property('rows');
        // expect(instance.rows).to.be(expectedValueLiteral);
      });

      it('should have the property schema (base name: "schema")', function() {
        // TODO: update the code to test the property schema
        expect(instance).to.have.property('schema');
        // expect(instance.schema).to.be(expectedValueLiteral);
      });

      it('should have the property serverId (base name: "serverId")', function() {
        // TODO: update the code to test the property serverId
        expect(instance).to.have.property('serverId');
        // expect(instance.serverId).to.be(expectedValueLiteral);
      });

      it('should have the property sql (base name: "sql")', function() {
        // TODO: update the code to test the property sql
        expect(instance).to.have.property('sql');
        // expect(instance.sql).to.be(expectedValueLiteral);
      });

      it('should have the property sqlEditorId (base name: "sqlEditorId")', function() {
        // TODO: update the code to test the property sqlEditorId
        expect(instance).to.have.property('sqlEditorId');
        // expect(instance.sqlEditorId).to.be(expectedValueLiteral);
      });

      it('should have the property startDttm (base name: "startDttm")', function() {
        // TODO: update the code to test the property startDttm
        expect(instance).to.have.property('startDttm');
        // expect(instance.startDttm).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property tab (base name: "tab")', function() {
        // TODO: update the code to test the property tab
        expect(instance).to.have.property('tab');
        // expect(instance.tab).to.be(expectedValueLiteral);
      });

      it('should have the property tempSchema (base name: "tempSchema")', function() {
        // TODO: update the code to test the property tempSchema
        expect(instance).to.have.property('tempSchema');
        // expect(instance.tempSchema).to.be(expectedValueLiteral);
      });

      it('should have the property tempTable (base name: "tempTable")', function() {
        // TODO: update the code to test the property tempTable
        expect(instance).to.have.property('tempTable');
        // expect(instance.tempTable).to.be(expectedValueLiteral);
      });

      it('should have the property trackingUrl (base name: "trackingUrl")', function() {
        // TODO: update the code to test the property trackingUrl
        expect(instance).to.have.property('trackingUrl');
        // expect(instance.trackingUrl).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "user")', function() {
        // TODO: update the code to test the property user
        expect(instance).to.have.property('user');
        // expect(instance.user).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

    });
  });

}));
