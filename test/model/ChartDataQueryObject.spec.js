/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ChartDataQueryObject', function() {
      beforeEach(function() {
        instance = new Superset.ChartDataQueryObject();
      });

      it('should create an instance of ChartDataQueryObject', function() {
        // TODO: update the code to test ChartDataQueryObject
        expect(instance).to.be.a(Superset.ChartDataQueryObject);
      });

      it('should have the property annotationLayers (base name: "annotation_layers")', function() {
        // TODO: update the code to test the property annotationLayers
        expect(instance).to.have.property('annotationLayers');
        // expect(instance.annotationLayers).to.be(expectedValueLiteral);
      });

      it('should have the property appliedTimeExtras (base name: "applied_time_extras")', function() {
        // TODO: update the code to test the property appliedTimeExtras
        expect(instance).to.have.property('appliedTimeExtras');
        // expect(instance.appliedTimeExtras).to.be(expectedValueLiteral);
      });

      it('should have the property applyFetchValuesPredicate (base name: "apply_fetch_values_predicate")', function() {
        // TODO: update the code to test the property applyFetchValuesPredicate
        expect(instance).to.have.property('applyFetchValuesPredicate');
        // expect(instance.applyFetchValuesPredicate).to.be(expectedValueLiteral);
      });

      it('should have the property columns (base name: "columns")', function() {
        // TODO: update the code to test the property columns
        expect(instance).to.have.property('columns');
        // expect(instance.columns).to.be(expectedValueLiteral);
      });

      it('should have the property datasource (base name: "datasource")', function() {
        // TODO: update the code to test the property datasource
        expect(instance).to.have.property('datasource');
        // expect(instance.datasource).to.be(expectedValueLiteral);
      });

      it('should have the property druidTimeOrigin (base name: "druid_time_origin")', function() {
        // TODO: update the code to test the property druidTimeOrigin
        expect(instance).to.have.property('druidTimeOrigin');
        // expect(instance.druidTimeOrigin).to.be(expectedValueLiteral);
      });

      it('should have the property extras (base name: "extras")', function() {
        // TODO: update the code to test the property extras
        expect(instance).to.have.property('extras');
        // expect(instance.extras).to.be(expectedValueLiteral);
      });

      it('should have the property filters (base name: "filters")', function() {
        // TODO: update the code to test the property filters
        expect(instance).to.have.property('filters');
        // expect(instance.filters).to.be(expectedValueLiteral);
      });

      it('should have the property granularity (base name: "granularity")', function() {
        // TODO: update the code to test the property granularity
        expect(instance).to.have.property('granularity');
        // expect(instance.granularity).to.be(expectedValueLiteral);
      });

      it('should have the property granularitySqla (base name: "granularity_sqla")', function() {
        // TODO: update the code to test the property granularitySqla
        expect(instance).to.have.property('granularitySqla');
        // expect(instance.granularitySqla).to.be(expectedValueLiteral);
      });

      it('should have the property groupby (base name: "groupby")', function() {
        // TODO: update the code to test the property groupby
        expect(instance).to.have.property('groupby');
        // expect(instance.groupby).to.be(expectedValueLiteral);
      });

      it('should have the property having (base name: "having")', function() {
        // TODO: update the code to test the property having
        expect(instance).to.have.property('having');
        // expect(instance.having).to.be(expectedValueLiteral);
      });

      it('should have the property havingFilters (base name: "having_filters")', function() {
        // TODO: update the code to test the property havingFilters
        expect(instance).to.have.property('havingFilters');
        // expect(instance.havingFilters).to.be(expectedValueLiteral);
      });

      it('should have the property isRowcount (base name: "is_rowcount")', function() {
        // TODO: update the code to test the property isRowcount
        expect(instance).to.have.property('isRowcount');
        // expect(instance.isRowcount).to.be(expectedValueLiteral);
      });

      it('should have the property isTimeseries (base name: "is_timeseries")', function() {
        // TODO: update the code to test the property isTimeseries
        expect(instance).to.have.property('isTimeseries');
        // expect(instance.isTimeseries).to.be(expectedValueLiteral);
      });

      it('should have the property metrics (base name: "metrics")', function() {
        // TODO: update the code to test the property metrics
        expect(instance).to.have.property('metrics');
        // expect(instance.metrics).to.be(expectedValueLiteral);
      });

      it('should have the property orderDesc (base name: "order_desc")', function() {
        // TODO: update the code to test the property orderDesc
        expect(instance).to.have.property('orderDesc');
        // expect(instance.orderDesc).to.be(expectedValueLiteral);
      });

      it('should have the property orderby (base name: "orderby")', function() {
        // TODO: update the code to test the property orderby
        expect(instance).to.have.property('orderby');
        // expect(instance.orderby).to.be(expectedValueLiteral);
      });

      it('should have the property postProcessing (base name: "post_processing")', function() {
        // TODO: update the code to test the property postProcessing
        expect(instance).to.have.property('postProcessing');
        // expect(instance.postProcessing).to.be(expectedValueLiteral);
      });

      it('should have the property resultType (base name: "result_type")', function() {
        // TODO: update the code to test the property resultType
        expect(instance).to.have.property('resultType');
        // expect(instance.resultType).to.be(expectedValueLiteral);
      });

      it('should have the property rowLimit (base name: "row_limit")', function() {
        // TODO: update the code to test the property rowLimit
        expect(instance).to.have.property('rowLimit');
        // expect(instance.rowLimit).to.be(expectedValueLiteral);
      });

      it('should have the property rowOffset (base name: "row_offset")', function() {
        // TODO: update the code to test the property rowOffset
        expect(instance).to.have.property('rowOffset');
        // expect(instance.rowOffset).to.be(expectedValueLiteral);
      });

      it('should have the property seriesColumns (base name: "series_columns")', function() {
        // TODO: update the code to test the property seriesColumns
        expect(instance).to.have.property('seriesColumns');
        // expect(instance.seriesColumns).to.be(expectedValueLiteral);
      });

      it('should have the property seriesLimit (base name: "series_limit")', function() {
        // TODO: update the code to test the property seriesLimit
        expect(instance).to.have.property('seriesLimit');
        // expect(instance.seriesLimit).to.be(expectedValueLiteral);
      });

      it('should have the property seriesLimitMetric (base name: "series_limit_metric")', function() {
        // TODO: update the code to test the property seriesLimitMetric
        expect(instance).to.have.property('seriesLimitMetric');
        // expect(instance.seriesLimitMetric).to.be(expectedValueLiteral);
      });

      it('should have the property timeOffsets (base name: "time_offsets")', function() {
        // TODO: update the code to test the property timeOffsets
        expect(instance).to.have.property('timeOffsets');
        // expect(instance.timeOffsets).to.be(expectedValueLiteral);
      });

      it('should have the property timeRange (base name: "time_range")', function() {
        // TODO: update the code to test the property timeRange
        expect(instance).to.have.property('timeRange');
        // expect(instance.timeRange).to.be(expectedValueLiteral);
      });

      it('should have the property timeShift (base name: "time_shift")', function() {
        // TODO: update the code to test the property timeShift
        expect(instance).to.have.property('timeShift');
        // expect(instance.timeShift).to.be(expectedValueLiteral);
      });

      it('should have the property timeseriesLimit (base name: "timeseries_limit")', function() {
        // TODO: update the code to test the property timeseriesLimit
        expect(instance).to.have.property('timeseriesLimit');
        // expect(instance.timeseriesLimit).to.be(expectedValueLiteral);
      });

      it('should have the property timeseriesLimitMetric (base name: "timeseries_limit_metric")', function() {
        // TODO: update the code to test the property timeseriesLimitMetric
        expect(instance).to.have.property('timeseriesLimitMetric');
        // expect(instance.timeseriesLimitMetric).to.be(expectedValueLiteral);
      });

      it('should have the property urlParams (base name: "url_params")', function() {
        // TODO: update the code to test the property urlParams
        expect(instance).to.have.property('urlParams');
        // expect(instance.urlParams).to.be(expectedValueLiteral);
      });

      it('should have the property where (base name: "where")', function() {
        // TODO: update the code to test the property where
        expect(instance).to.have.property('where');
        // expect(instance.where).to.be(expectedValueLiteral);
      });

    });
  });

}));
