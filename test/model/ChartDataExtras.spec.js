/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ChartDataExtras', function() {
      beforeEach(function() {
        instance = new Superset.ChartDataExtras();
      });

      it('should create an instance of ChartDataExtras', function() {
        // TODO: update the code to test ChartDataExtras
        expect(instance).to.be.a(Superset.ChartDataExtras);
      });

      it('should have the property having (base name: "having")', function() {
        // TODO: update the code to test the property having
        expect(instance).to.have.property('having');
        // expect(instance.having).to.be(expectedValueLiteral);
      });

      it('should have the property havingDruid (base name: "having_druid")', function() {
        // TODO: update the code to test the property havingDruid
        expect(instance).to.have.property('havingDruid');
        // expect(instance.havingDruid).to.be(expectedValueLiteral);
      });

      it('should have the property relativeEnd (base name: "relative_end")', function() {
        // TODO: update the code to test the property relativeEnd
        expect(instance).to.have.property('relativeEnd');
        // expect(instance.relativeEnd).to.be(expectedValueLiteral);
      });

      it('should have the property relativeStart (base name: "relative_start")', function() {
        // TODO: update the code to test the property relativeStart
        expect(instance).to.have.property('relativeStart');
        // expect(instance.relativeStart).to.be(expectedValueLiteral);
      });

      it('should have the property timeGrainSqla (base name: "time_grain_sqla")', function() {
        // TODO: update the code to test the property timeGrainSqla
        expect(instance).to.have.property('timeGrainSqla');
        // expect(instance.timeGrainSqla).to.be(expectedValueLiteral);
      });

      it('should have the property where (base name: "where")', function() {
        // TODO: update the code to test the property where
        expect(instance).to.have.property('where');
        // expect(instance.where).to.be(expectedValueLiteral);
      });

    });
  });

}));
