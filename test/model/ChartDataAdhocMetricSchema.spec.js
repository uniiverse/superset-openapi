/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ChartDataAdhocMetricSchema', function() {
      beforeEach(function() {
        instance = new Superset.ChartDataAdhocMetricSchema();
      });

      it('should create an instance of ChartDataAdhocMetricSchema', function() {
        // TODO: update the code to test ChartDataAdhocMetricSchema
        expect(instance).to.be.a(Superset.ChartDataAdhocMetricSchema);
      });

      it('should have the property aggregate (base name: "aggregate")', function() {
        // TODO: update the code to test the property aggregate
        expect(instance).to.have.property('aggregate');
        // expect(instance.aggregate).to.be(expectedValueLiteral);
      });

      it('should have the property column (base name: "column")', function() {
        // TODO: update the code to test the property column
        expect(instance).to.have.property('column');
        // expect(instance.column).to.be(expectedValueLiteral);
      });

      it('should have the property expressionType (base name: "expressionType")', function() {
        // TODO: update the code to test the property expressionType
        expect(instance).to.have.property('expressionType');
        // expect(instance.expressionType).to.be(expectedValueLiteral);
      });

      it('should have the property hasCustomLabel (base name: "hasCustomLabel")', function() {
        // TODO: update the code to test the property hasCustomLabel
        expect(instance).to.have.property('hasCustomLabel');
        // expect(instance.hasCustomLabel).to.be(expectedValueLiteral);
      });

      it('should have the property isExtra (base name: "isExtra")', function() {
        // TODO: update the code to test the property isExtra
        expect(instance).to.have.property('isExtra');
        // expect(instance.isExtra).to.be(expectedValueLiteral);
      });

      it('should have the property label (base name: "label")', function() {
        // TODO: update the code to test the property label
        expect(instance).to.have.property('label');
        // expect(instance.label).to.be(expectedValueLiteral);
      });

      it('should have the property optionName (base name: "optionName")', function() {
        // TODO: update the code to test the property optionName
        expect(instance).to.have.property('optionName');
        // expect(instance.optionName).to.be(expectedValueLiteral);
      });

      it('should have the property sqlExpression (base name: "sqlExpression")', function() {
        // TODO: update the code to test the property sqlExpression
        expect(instance).to.have.property('sqlExpression');
        // expect(instance.sqlExpression).to.be(expectedValueLiteral);
      });

      it('should have the property timeGrain (base name: "timeGrain")', function() {
        // TODO: update the code to test the property timeGrain
        expect(instance).to.have.property('timeGrain');
        // expect(instance.timeGrain).to.be(expectedValueLiteral);
      });

    });
  });

}));
