/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('QueryRestApiGetList', function() {
      beforeEach(function() {
        instance = new Superset.QueryRestApiGetList();
      });

      it('should create an instance of QueryRestApiGetList', function() {
        // TODO: update the code to test QueryRestApiGetList
        expect(instance).to.be.a(Superset.QueryRestApiGetList);
      });

      it('should have the property changedOn (base name: "changed_on")', function() {
        // TODO: update the code to test the property changedOn
        expect(instance).to.have.property('changedOn');
        // expect(instance.changedOn).to.be(expectedValueLiteral);
      });

      it('should have the property database (base name: "database")', function() {
        // TODO: update the code to test the property database
        expect(instance).to.have.property('database');
        // expect(instance.database).to.be(expectedValueLiteral);
      });

      it('should have the property endTime (base name: "end_time")', function() {
        // TODO: update the code to test the property endTime
        expect(instance).to.have.property('endTime');
        // expect(instance.endTime).to.be(expectedValueLiteral);
      });

      it('should have the property executedSql (base name: "executed_sql")', function() {
        // TODO: update the code to test the property executedSql
        expect(instance).to.have.property('executedSql');
        // expect(instance.executedSql).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property rows (base name: "rows")', function() {
        // TODO: update the code to test the property rows
        expect(instance).to.have.property('rows');
        // expect(instance.rows).to.be(expectedValueLiteral);
      });

      it('should have the property schema (base name: "schema")', function() {
        // TODO: update the code to test the property schema
        expect(instance).to.have.property('schema');
        // expect(instance.schema).to.be(expectedValueLiteral);
      });

      it('should have the property sql (base name: "sql")', function() {
        // TODO: update the code to test the property sql
        expect(instance).to.have.property('sql');
        // expect(instance.sql).to.be(expectedValueLiteral);
      });

      it('should have the property sqlTables (base name: "sql_tables")', function() {
        // TODO: update the code to test the property sqlTables
        expect(instance).to.have.property('sqlTables');
        // expect(instance.sqlTables).to.be(expectedValueLiteral);
      });

      it('should have the property startTime (base name: "start_time")', function() {
        // TODO: update the code to test the property startTime
        expect(instance).to.have.property('startTime');
        // expect(instance.startTime).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property tabName (base name: "tab_name")', function() {
        // TODO: update the code to test the property tabName
        expect(instance).to.have.property('tabName');
        // expect(instance.tabName).to.be(expectedValueLiteral);
      });

      it('should have the property tmpTableName (base name: "tmp_table_name")', function() {
        // TODO: update the code to test the property tmpTableName
        expect(instance).to.have.property('tmpTableName');
        // expect(instance.tmpTableName).to.be(expectedValueLiteral);
      });

      it('should have the property trackingUrl (base name: "tracking_url")', function() {
        // TODO: update the code to test the property trackingUrl
        expect(instance).to.have.property('trackingUrl');
        // expect(instance.trackingUrl).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "user")', function() {
        // TODO: update the code to test the property user
        expect(instance).to.have.property('user');
        // expect(instance.user).to.be(expectedValueLiteral);
      });

    });
  });

}));
