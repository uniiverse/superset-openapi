/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ReportScheduleRestApiGetList', function() {
      beforeEach(function() {
        instance = new Superset.ReportScheduleRestApiGetList();
      });

      it('should create an instance of ReportScheduleRestApiGetList', function() {
        // TODO: update the code to test ReportScheduleRestApiGetList
        expect(instance).to.be.a(Superset.ReportScheduleRestApiGetList);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property changedBy (base name: "changed_by")', function() {
        // TODO: update the code to test the property changedBy
        expect(instance).to.have.property('changedBy');
        // expect(instance.changedBy).to.be(expectedValueLiteral);
      });

      it('should have the property changedOn (base name: "changed_on")', function() {
        // TODO: update the code to test the property changedOn
        expect(instance).to.have.property('changedOn');
        // expect(instance.changedOn).to.be(expectedValueLiteral);
      });

      it('should have the property changedOnDeltaHumanized (base name: "changed_on_delta_humanized")', function() {
        // TODO: update the code to test the property changedOnDeltaHumanized
        expect(instance).to.have.property('changedOnDeltaHumanized');
        // expect(instance.changedOnDeltaHumanized).to.be(expectedValueLiteral);
      });

      it('should have the property chartId (base name: "chart_id")', function() {
        // TODO: update the code to test the property chartId
        expect(instance).to.have.property('chartId');
        // expect(instance.chartId).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "created_by")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property createdOn (base name: "created_on")', function() {
        // TODO: update the code to test the property createdOn
        expect(instance).to.have.property('createdOn');
        // expect(instance.createdOn).to.be(expectedValueLiteral);
      });

      it('should have the property creationMethod (base name: "creation_method")', function() {
        // TODO: update the code to test the property creationMethod
        expect(instance).to.have.property('creationMethod');
        // expect(instance.creationMethod).to.be(expectedValueLiteral);
      });

      it('should have the property crontab (base name: "crontab")', function() {
        // TODO: update the code to test the property crontab
        expect(instance).to.have.property('crontab');
        // expect(instance.crontab).to.be(expectedValueLiteral);
      });

      it('should have the property crontabHumanized (base name: "crontab_humanized")', function() {
        // TODO: update the code to test the property crontabHumanized
        expect(instance).to.have.property('crontabHumanized');
        // expect(instance.crontabHumanized).to.be(expectedValueLiteral);
      });

      it('should have the property dashboardId (base name: "dashboard_id")', function() {
        // TODO: update the code to test the property dashboardId
        expect(instance).to.have.property('dashboardId');
        // expect(instance.dashboardId).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property extra (base name: "extra")', function() {
        // TODO: update the code to test the property extra
        expect(instance).to.have.property('extra');
        // expect(instance.extra).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property lastEvalDttm (base name: "last_eval_dttm")', function() {
        // TODO: update the code to test the property lastEvalDttm
        expect(instance).to.have.property('lastEvalDttm');
        // expect(instance.lastEvalDttm).to.be(expectedValueLiteral);
      });

      it('should have the property lastState (base name: "last_state")', function() {
        // TODO: update the code to test the property lastState
        expect(instance).to.have.property('lastState');
        // expect(instance.lastState).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property owners (base name: "owners")', function() {
        // TODO: update the code to test the property owners
        expect(instance).to.have.property('owners');
        // expect(instance.owners).to.be(expectedValueLiteral);
      });

      it('should have the property recipients (base name: "recipients")', function() {
        // TODO: update the code to test the property recipients
        expect(instance).to.have.property('recipients');
        // expect(instance.recipients).to.be(expectedValueLiteral);
      });

      it('should have the property timezone (base name: "timezone")', function() {
        // TODO: update the code to test the property timezone
        expect(instance).to.have.property('timezone');
        // expect(instance.timezone).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

    });
  });

}));
