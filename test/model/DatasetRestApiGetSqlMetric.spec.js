/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DatasetRestApiGetSqlMetric', function() {
      beforeEach(function() {
        instance = new Superset.DatasetRestApiGetSqlMetric();
      });

      it('should create an instance of DatasetRestApiGetSqlMetric', function() {
        // TODO: update the code to test DatasetRestApiGetSqlMetric
        expect(instance).to.be.a(Superset.DatasetRestApiGetSqlMetric);
      });

      it('should have the property changedOn (base name: "changed_on")', function() {
        // TODO: update the code to test the property changedOn
        expect(instance).to.have.property('changedOn');
        // expect(instance.changedOn).to.be(expectedValueLiteral);
      });

      it('should have the property createdOn (base name: "created_on")', function() {
        // TODO: update the code to test the property createdOn
        expect(instance).to.have.property('createdOn');
        // expect(instance.createdOn).to.be(expectedValueLiteral);
      });

      it('should have the property d3format (base name: "d3format")', function() {
        // TODO: update the code to test the property d3format
        expect(instance).to.have.property('d3format');
        // expect(instance.d3format).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property expression (base name: "expression")', function() {
        // TODO: update the code to test the property expression
        expect(instance).to.have.property('expression');
        // expect(instance.expression).to.be(expectedValueLiteral);
      });

      it('should have the property extra (base name: "extra")', function() {
        // TODO: update the code to test the property extra
        expect(instance).to.have.property('extra');
        // expect(instance.extra).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property metricName (base name: "metric_name")', function() {
        // TODO: update the code to test the property metricName
        expect(instance).to.have.property('metricName');
        // expect(instance.metricName).to.be(expectedValueLiteral);
      });

      it('should have the property metricType (base name: "metric_type")', function() {
        // TODO: update the code to test the property metricType
        expect(instance).to.have.property('metricType');
        // expect(instance.metricType).to.be(expectedValueLiteral);
      });

      it('should have the property verboseName (base name: "verbose_name")', function() {
        // TODO: update the code to test the property verboseName
        expect(instance).to.have.property('verboseName');
        // expect(instance.verboseName).to.be(expectedValueLiteral);
      });

      it('should have the property warningText (base name: "warning_text")', function() {
        // TODO: update the code to test the property warningText
        expect(instance).to.have.property('warningText');
        // expect(instance.warningText).to.be(expectedValueLiteral);
      });

    });
  });

}));
