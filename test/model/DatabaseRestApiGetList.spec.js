/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DatabaseRestApiGetList', function() {
      beforeEach(function() {
        instance = new Superset.DatabaseRestApiGetList();
      });

      it('should create an instance of DatabaseRestApiGetList', function() {
        // TODO: update the code to test DatabaseRestApiGetList
        expect(instance).to.be.a(Superset.DatabaseRestApiGetList);
      });

      it('should have the property allowCtas (base name: "allow_ctas")', function() {
        // TODO: update the code to test the property allowCtas
        expect(instance).to.have.property('allowCtas');
        // expect(instance.allowCtas).to.be(expectedValueLiteral);
      });

      it('should have the property allowCvas (base name: "allow_cvas")', function() {
        // TODO: update the code to test the property allowCvas
        expect(instance).to.have.property('allowCvas');
        // expect(instance.allowCvas).to.be(expectedValueLiteral);
      });

      it('should have the property allowDml (base name: "allow_dml")', function() {
        // TODO: update the code to test the property allowDml
        expect(instance).to.have.property('allowDml');
        // expect(instance.allowDml).to.be(expectedValueLiteral);
      });

      it('should have the property allowFileUpload (base name: "allow_file_upload")', function() {
        // TODO: update the code to test the property allowFileUpload
        expect(instance).to.have.property('allowFileUpload');
        // expect(instance.allowFileUpload).to.be(expectedValueLiteral);
      });

      it('should have the property allowRunAsync (base name: "allow_run_async")', function() {
        // TODO: update the code to test the property allowRunAsync
        expect(instance).to.have.property('allowRunAsync');
        // expect(instance.allowRunAsync).to.be(expectedValueLiteral);
      });

      it('should have the property allowsCostEstimate (base name: "allows_cost_estimate")', function() {
        // TODO: update the code to test the property allowsCostEstimate
        expect(instance).to.have.property('allowsCostEstimate');
        // expect(instance.allowsCostEstimate).to.be(expectedValueLiteral);
      });

      it('should have the property allowsSubquery (base name: "allows_subquery")', function() {
        // TODO: update the code to test the property allowsSubquery
        expect(instance).to.have.property('allowsSubquery');
        // expect(instance.allowsSubquery).to.be(expectedValueLiteral);
      });

      it('should have the property allowsVirtualTableExplore (base name: "allows_virtual_table_explore")', function() {
        // TODO: update the code to test the property allowsVirtualTableExplore
        expect(instance).to.have.property('allowsVirtualTableExplore');
        // expect(instance.allowsVirtualTableExplore).to.be(expectedValueLiteral);
      });

      it('should have the property backend (base name: "backend")', function() {
        // TODO: update the code to test the property backend
        expect(instance).to.have.property('backend');
        // expect(instance.backend).to.be(expectedValueLiteral);
      });

      it('should have the property changedOn (base name: "changed_on")', function() {
        // TODO: update the code to test the property changedOn
        expect(instance).to.have.property('changedOn');
        // expect(instance.changedOn).to.be(expectedValueLiteral);
      });

      it('should have the property changedOnDeltaHumanized (base name: "changed_on_delta_humanized")', function() {
        // TODO: update the code to test the property changedOnDeltaHumanized
        expect(instance).to.have.property('changedOnDeltaHumanized');
        // expect(instance.changedOnDeltaHumanized).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "created_by")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property databaseName (base name: "database_name")', function() {
        // TODO: update the code to test the property databaseName
        expect(instance).to.have.property('databaseName');
        // expect(instance.databaseName).to.be(expectedValueLiteral);
      });

      it('should have the property disableDataPreview (base name: "disable_data_preview")', function() {
        // TODO: update the code to test the property disableDataPreview
        expect(instance).to.have.property('disableDataPreview');
        // expect(instance.disableDataPreview).to.be(expectedValueLiteral);
      });

      it('should have the property engineInformation (base name: "engine_information")', function() {
        // TODO: update the code to test the property engineInformation
        expect(instance).to.have.property('engineInformation');
        // expect(instance.engineInformation).to.be(expectedValueLiteral);
      });

      it('should have the property exploreDatabaseId (base name: "explore_database_id")', function() {
        // TODO: update the code to test the property exploreDatabaseId
        expect(instance).to.have.property('exploreDatabaseId');
        // expect(instance.exploreDatabaseId).to.be(expectedValueLiteral);
      });

      it('should have the property exposeInSqllab (base name: "expose_in_sqllab")', function() {
        // TODO: update the code to test the property exposeInSqllab
        expect(instance).to.have.property('exposeInSqllab');
        // expect(instance.exposeInSqllab).to.be(expectedValueLiteral);
      });

      it('should have the property extra (base name: "extra")', function() {
        // TODO: update the code to test the property extra
        expect(instance).to.have.property('extra');
        // expect(instance.extra).to.be(expectedValueLiteral);
      });

      it('should have the property forceCtasSchema (base name: "force_ctas_schema")', function() {
        // TODO: update the code to test the property forceCtasSchema
        expect(instance).to.have.property('forceCtasSchema');
        // expect(instance.forceCtasSchema).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property uuid (base name: "uuid")', function() {
        // TODO: update the code to test the property uuid
        expect(instance).to.have.property('uuid');
        // expect(instance.uuid).to.be(expectedValueLiteral);
      });

    });
  });

}));
