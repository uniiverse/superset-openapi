/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DatasetRestApiGetList', function() {
      beforeEach(function() {
        instance = new Superset.DatasetRestApiGetList();
      });

      it('should create an instance of DatasetRestApiGetList', function() {
        // TODO: update the code to test DatasetRestApiGetList
        expect(instance).to.be.a(Superset.DatasetRestApiGetList);
      });

      it('should have the property changedBy (base name: "changed_by")', function() {
        // TODO: update the code to test the property changedBy
        expect(instance).to.have.property('changedBy');
        // expect(instance.changedBy).to.be(expectedValueLiteral);
      });

      it('should have the property changedByName (base name: "changed_by_name")', function() {
        // TODO: update the code to test the property changedByName
        expect(instance).to.have.property('changedByName');
        // expect(instance.changedByName).to.be(expectedValueLiteral);
      });

      it('should have the property changedByUrl (base name: "changed_by_url")', function() {
        // TODO: update the code to test the property changedByUrl
        expect(instance).to.have.property('changedByUrl');
        // expect(instance.changedByUrl).to.be(expectedValueLiteral);
      });

      it('should have the property changedOnDeltaHumanized (base name: "changed_on_delta_humanized")', function() {
        // TODO: update the code to test the property changedOnDeltaHumanized
        expect(instance).to.have.property('changedOnDeltaHumanized');
        // expect(instance.changedOnDeltaHumanized).to.be(expectedValueLiteral);
      });

      it('should have the property changedOnUtc (base name: "changed_on_utc")', function() {
        // TODO: update the code to test the property changedOnUtc
        expect(instance).to.have.property('changedOnUtc');
        // expect(instance.changedOnUtc).to.be(expectedValueLiteral);
      });

      it('should have the property database (base name: "database")', function() {
        // TODO: update the code to test the property database
        expect(instance).to.have.property('database');
        // expect(instance.database).to.be(expectedValueLiteral);
      });

      it('should have the property datasourceType (base name: "datasource_type")', function() {
        // TODO: update the code to test the property datasourceType
        expect(instance).to.have.property('datasourceType');
        // expect(instance.datasourceType).to.be(expectedValueLiteral);
      });

      it('should have the property defaultEndpoint (base name: "default_endpoint")', function() {
        // TODO: update the code to test the property defaultEndpoint
        expect(instance).to.have.property('defaultEndpoint');
        // expect(instance.defaultEndpoint).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property exploreUrl (base name: "explore_url")', function() {
        // TODO: update the code to test the property exploreUrl
        expect(instance).to.have.property('exploreUrl');
        // expect(instance.exploreUrl).to.be(expectedValueLiteral);
      });

      it('should have the property extra (base name: "extra")', function() {
        // TODO: update the code to test the property extra
        expect(instance).to.have.property('extra');
        // expect(instance.extra).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property kind (base name: "kind")', function() {
        // TODO: update the code to test the property kind
        expect(instance).to.have.property('kind');
        // expect(instance.kind).to.be(expectedValueLiteral);
      });

      it('should have the property owners (base name: "owners")', function() {
        // TODO: update the code to test the property owners
        expect(instance).to.have.property('owners');
        // expect(instance.owners).to.be(expectedValueLiteral);
      });

      it('should have the property schema (base name: "schema")', function() {
        // TODO: update the code to test the property schema
        expect(instance).to.have.property('schema');
        // expect(instance.schema).to.be(expectedValueLiteral);
      });

      it('should have the property sql (base name: "sql")', function() {
        // TODO: update the code to test the property sql
        expect(instance).to.have.property('sql');
        // expect(instance.sql).to.be(expectedValueLiteral);
      });

      it('should have the property tableName (base name: "table_name")', function() {
        // TODO: update the code to test the property tableName
        expect(instance).to.have.property('tableName');
        // expect(instance.tableName).to.be(expectedValueLiteral);
      });

    });
  });

}));
