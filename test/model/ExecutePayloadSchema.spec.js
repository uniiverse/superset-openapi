/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ExecutePayloadSchema', function() {
      beforeEach(function() {
        instance = new Superset.ExecutePayloadSchema();
      });

      it('should create an instance of ExecutePayloadSchema', function() {
        // TODO: update the code to test ExecutePayloadSchema
        expect(instance).to.be.a(Superset.ExecutePayloadSchema);
      });

      it('should have the property clientId (base name: "client_id")', function() {
        // TODO: update the code to test the property clientId
        expect(instance).to.have.property('clientId');
        // expect(instance.clientId).to.be(expectedValueLiteral);
      });

      it('should have the property ctasMethod (base name: "ctas_method")', function() {
        // TODO: update the code to test the property ctasMethod
        expect(instance).to.have.property('ctasMethod');
        // expect(instance.ctasMethod).to.be(expectedValueLiteral);
      });

      it('should have the property databaseId (base name: "database_id")', function() {
        // TODO: update the code to test the property databaseId
        expect(instance).to.have.property('databaseId');
        // expect(instance.databaseId).to.be(expectedValueLiteral);
      });

      it('should have the property expandData (base name: "expand_data")', function() {
        // TODO: update the code to test the property expandData
        expect(instance).to.have.property('expandData');
        // expect(instance.expandData).to.be(expectedValueLiteral);
      });

      it('should have the property json (base name: "json")', function() {
        // TODO: update the code to test the property json
        expect(instance).to.have.property('json');
        // expect(instance.json).to.be(expectedValueLiteral);
      });

      it('should have the property queryLimit (base name: "queryLimit")', function() {
        // TODO: update the code to test the property queryLimit
        expect(instance).to.have.property('queryLimit');
        // expect(instance.queryLimit).to.be(expectedValueLiteral);
      });

      it('should have the property runAsync (base name: "runAsync")', function() {
        // TODO: update the code to test the property runAsync
        expect(instance).to.have.property('runAsync');
        // expect(instance.runAsync).to.be(expectedValueLiteral);
      });

      it('should have the property schema (base name: "schema")', function() {
        // TODO: update the code to test the property schema
        expect(instance).to.have.property('schema');
        // expect(instance.schema).to.be(expectedValueLiteral);
      });

      it('should have the property selectAsCta (base name: "select_as_cta")', function() {
        // TODO: update the code to test the property selectAsCta
        expect(instance).to.have.property('selectAsCta');
        // expect(instance.selectAsCta).to.be(expectedValueLiteral);
      });

      it('should have the property sql (base name: "sql")', function() {
        // TODO: update the code to test the property sql
        expect(instance).to.have.property('sql');
        // expect(instance.sql).to.be(expectedValueLiteral);
      });

      it('should have the property sqlEditorId (base name: "sql_editor_id")', function() {
        // TODO: update the code to test the property sqlEditorId
        expect(instance).to.have.property('sqlEditorId');
        // expect(instance.sqlEditorId).to.be(expectedValueLiteral);
      });

      it('should have the property tab (base name: "tab")', function() {
        // TODO: update the code to test the property tab
        expect(instance).to.have.property('tab');
        // expect(instance.tab).to.be(expectedValueLiteral);
      });

      it('should have the property templateParams (base name: "templateParams")', function() {
        // TODO: update the code to test the property templateParams
        expect(instance).to.have.property('templateParams');
        // expect(instance.templateParams).to.be(expectedValueLiteral);
      });

      it('should have the property tmpTableName (base name: "tmp_table_name")', function() {
        // TODO: update the code to test the property tmpTableName
        expect(instance).to.have.property('tmpTableName');
        // expect(instance.tmpTableName).to.be(expectedValueLiteral);
      });

    });
  });

}));
