/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Slice', function() {
      beforeEach(function() {
        instance = new Superset.Slice();
      });

      it('should create an instance of Slice', function() {
        // TODO: update the code to test Slice
        expect(instance).to.be.a(Superset.Slice);
      });

      it('should have the property cacheTimeout (base name: "cache_timeout")', function() {
        // TODO: update the code to test the property cacheTimeout
        expect(instance).to.have.property('cacheTimeout');
        // expect(instance.cacheTimeout).to.be(expectedValueLiteral);
      });

      it('should have the property certificationDetails (base name: "certification_details")', function() {
        // TODO: update the code to test the property certificationDetails
        expect(instance).to.have.property('certificationDetails');
        // expect(instance.certificationDetails).to.be(expectedValueLiteral);
      });

      it('should have the property certifiedBy (base name: "certified_by")', function() {
        // TODO: update the code to test the property certifiedBy
        expect(instance).to.have.property('certifiedBy');
        // expect(instance.certifiedBy).to.be(expectedValueLiteral);
      });

      it('should have the property changedOn (base name: "changed_on")', function() {
        // TODO: update the code to test the property changedOn
        expect(instance).to.have.property('changedOn');
        // expect(instance.changedOn).to.be(expectedValueLiteral);
      });

      it('should have the property changedOnHumanized (base name: "changed_on_humanized")', function() {
        // TODO: update the code to test the property changedOnHumanized
        expect(instance).to.have.property('changedOnHumanized');
        // expect(instance.changedOnHumanized).to.be(expectedValueLiteral);
      });

      it('should have the property datasource (base name: "datasource")', function() {
        // TODO: update the code to test the property datasource
        expect(instance).to.have.property('datasource');
        // expect(instance.datasource).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property descriptionMarkeddown (base name: "description_markeddown")', function() {
        // TODO: update the code to test the property descriptionMarkeddown
        expect(instance).to.have.property('descriptionMarkeddown');
        // expect(instance.descriptionMarkeddown).to.be(expectedValueLiteral);
      });

      it('should have the property editUrl (base name: "edit_url")', function() {
        // TODO: update the code to test the property editUrl
        expect(instance).to.have.property('editUrl');
        // expect(instance.editUrl).to.be(expectedValueLiteral);
      });

      it('should have the property formData (base name: "form_data")', function() {
        // TODO: update the code to test the property formData
        expect(instance).to.have.property('formData');
        // expect(instance.formData).to.be(expectedValueLiteral);
      });

      it('should have the property isManagedExternally (base name: "is_managed_externally")', function() {
        // TODO: update the code to test the property isManagedExternally
        expect(instance).to.have.property('isManagedExternally');
        // expect(instance.isManagedExternally).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

      it('should have the property owners (base name: "owners")', function() {
        // TODO: update the code to test the property owners
        expect(instance).to.have.property('owners');
        // expect(instance.owners).to.be(expectedValueLiteral);
      });

      it('should have the property queryContext (base name: "query_context")', function() {
        // TODO: update the code to test the property queryContext
        expect(instance).to.have.property('queryContext');
        // expect(instance.queryContext).to.be(expectedValueLiteral);
      });

      it('should have the property sliceId (base name: "slice_id")', function() {
        // TODO: update the code to test the property sliceId
        expect(instance).to.have.property('sliceId');
        // expect(instance.sliceId).to.be(expectedValueLiteral);
      });

      it('should have the property sliceName (base name: "slice_name")', function() {
        // TODO: update the code to test the property sliceName
        expect(instance).to.have.property('sliceName');
        // expect(instance.sliceName).to.be(expectedValueLiteral);
      });

      it('should have the property sliceUrl (base name: "slice_url")', function() {
        // TODO: update the code to test the property sliceUrl
        expect(instance).to.have.property('sliceUrl');
        // expect(instance.sliceUrl).to.be(expectedValueLiteral);
      });

    });
  });

}));
