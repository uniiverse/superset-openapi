/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('RLSRestApiPut', function() {
      beforeEach(function() {
        instance = new Superset.RLSRestApiPut();
      });

      it('should create an instance of RLSRestApiPut', function() {
        // TODO: update the code to test RLSRestApiPut
        expect(instance).to.be.a(Superset.RLSRestApiPut);
      });

      it('should have the property clause (base name: "clause")', function() {
        // TODO: update the code to test the property clause
        expect(instance).to.have.property('clause');
        // expect(instance.clause).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property filterType (base name: "filter_type")', function() {
        // TODO: update the code to test the property filterType
        expect(instance).to.have.property('filterType');
        // expect(instance.filterType).to.be(expectedValueLiteral);
      });

      it('should have the property groupKey (base name: "group_key")', function() {
        // TODO: update the code to test the property groupKey
        expect(instance).to.have.property('groupKey');
        // expect(instance.groupKey).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property roles (base name: "roles")', function() {
        // TODO: update the code to test the property roles
        expect(instance).to.have.property('roles');
        // expect(instance.roles).to.be(expectedValueLiteral);
      });

      it('should have the property tables (base name: "tables")', function() {
        // TODO: update the code to test the property tables
        expect(instance).to.have.property('tables');
        // expect(instance.tables).to.be(expectedValueLiteral);
      });

    });
  });

}));
