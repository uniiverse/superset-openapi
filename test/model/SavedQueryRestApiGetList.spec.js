/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SavedQueryRestApiGetList', function() {
      beforeEach(function() {
        instance = new Superset.SavedQueryRestApiGetList();
      });

      it('should create an instance of SavedQueryRestApiGetList', function() {
        // TODO: update the code to test SavedQueryRestApiGetList
        expect(instance).to.be.a(Superset.SavedQueryRestApiGetList);
      });

      it('should have the property changedOnDeltaHumanized (base name: "changed_on_delta_humanized")', function() {
        // TODO: update the code to test the property changedOnDeltaHumanized
        expect(instance).to.have.property('changedOnDeltaHumanized');
        // expect(instance.changedOnDeltaHumanized).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "created_by")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property createdOn (base name: "created_on")', function() {
        // TODO: update the code to test the property createdOn
        expect(instance).to.have.property('createdOn');
        // expect(instance.createdOn).to.be(expectedValueLiteral);
      });

      it('should have the property database (base name: "database")', function() {
        // TODO: update the code to test the property database
        expect(instance).to.have.property('database');
        // expect(instance.database).to.be(expectedValueLiteral);
      });

      it('should have the property dbId (base name: "db_id")', function() {
        // TODO: update the code to test the property dbId
        expect(instance).to.have.property('dbId');
        // expect(instance.dbId).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property extra (base name: "extra")', function() {
        // TODO: update the code to test the property extra
        expect(instance).to.have.property('extra');
        // expect(instance.extra).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property label (base name: "label")', function() {
        // TODO: update the code to test the property label
        expect(instance).to.have.property('label');
        // expect(instance.label).to.be(expectedValueLiteral);
      });

      it('should have the property lastRunDeltaHumanized (base name: "last_run_delta_humanized")', function() {
        // TODO: update the code to test the property lastRunDeltaHumanized
        expect(instance).to.have.property('lastRunDeltaHumanized');
        // expect(instance.lastRunDeltaHumanized).to.be(expectedValueLiteral);
      });

      it('should have the property rows (base name: "rows")', function() {
        // TODO: update the code to test the property rows
        expect(instance).to.have.property('rows');
        // expect(instance.rows).to.be(expectedValueLiteral);
      });

      it('should have the property schema (base name: "schema")', function() {
        // TODO: update the code to test the property schema
        expect(instance).to.have.property('schema');
        // expect(instance.schema).to.be(expectedValueLiteral);
      });

      it('should have the property sql (base name: "sql")', function() {
        // TODO: update the code to test the property sql
        expect(instance).to.have.property('sql');
        // expect(instance.sql).to.be(expectedValueLiteral);
      });

      it('should have the property sqlTables (base name: "sql_tables")', function() {
        // TODO: update the code to test the property sqlTables
        expect(instance).to.have.property('sqlTables');
        // expect(instance.sqlTables).to.be(expectedValueLiteral);
      });

    });
  });

}));
