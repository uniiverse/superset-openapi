/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TableMetadataOptionsResponse', function() {
      beforeEach(function() {
        instance = new Superset.TableMetadataOptionsResponse();
      });

      it('should create an instance of TableMetadataOptionsResponse', function() {
        // TODO: update the code to test TableMetadataOptionsResponse
        expect(instance).to.be.a(Superset.TableMetadataOptionsResponse);
      });

      it('should have the property deferrable (base name: "deferrable")', function() {
        // TODO: update the code to test the property deferrable
        expect(instance).to.have.property('deferrable');
        // expect(instance.deferrable).to.be(expectedValueLiteral);
      });

      it('should have the property initially (base name: "initially")', function() {
        // TODO: update the code to test the property initially
        expect(instance).to.have.property('initially');
        // expect(instance.initially).to.be(expectedValueLiteral);
      });

      it('should have the property match (base name: "match")', function() {
        // TODO: update the code to test the property match
        expect(instance).to.have.property('match');
        // expect(instance.match).to.be(expectedValueLiteral);
      });

      it('should have the property ondelete (base name: "ondelete")', function() {
        // TODO: update the code to test the property ondelete
        expect(instance).to.have.property('ondelete');
        // expect(instance.ondelete).to.be(expectedValueLiteral);
      });

      it('should have the property onupdate (base name: "onupdate")', function() {
        // TODO: update the code to test the property onupdate
        expect(instance).to.have.property('onupdate');
        // expect(instance.onupdate).to.be(expectedValueLiteral);
      });

    });
  });

}));
