/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Dataset', function() {
      beforeEach(function() {
        instance = new Superset.Dataset();
      });

      it('should create an instance of Dataset', function() {
        // TODO: update the code to test Dataset
        expect(instance).to.be.a(Superset.Dataset);
      });

      it('should have the property cacheTimeout (base name: "cache_timeout")', function() {
        // TODO: update the code to test the property cacheTimeout
        expect(instance).to.have.property('cacheTimeout');
        // expect(instance.cacheTimeout).to.be(expectedValueLiteral);
      });

      it('should have the property columnFormats (base name: "column_formats")', function() {
        // TODO: update the code to test the property columnFormats
        expect(instance).to.have.property('columnFormats');
        // expect(instance.columnFormats).to.be(expectedValueLiteral);
      });

      it('should have the property columns (base name: "columns")', function() {
        // TODO: update the code to test the property columns
        expect(instance).to.have.property('columns');
        // expect(instance.columns).to.be(expectedValueLiteral);
      });

      it('should have the property database (base name: "database")', function() {
        // TODO: update the code to test the property database
        expect(instance).to.have.property('database');
        // expect(instance.database).to.be(expectedValueLiteral);
      });

      it('should have the property datasourceName (base name: "datasource_name")', function() {
        // TODO: update the code to test the property datasourceName
        expect(instance).to.have.property('datasourceName');
        // expect(instance.datasourceName).to.be(expectedValueLiteral);
      });

      it('should have the property defaultEndpoint (base name: "default_endpoint")', function() {
        // TODO: update the code to test the property defaultEndpoint
        expect(instance).to.have.property('defaultEndpoint');
        // expect(instance.defaultEndpoint).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property editUrl (base name: "edit_url")', function() {
        // TODO: update the code to test the property editUrl
        expect(instance).to.have.property('editUrl');
        // expect(instance.editUrl).to.be(expectedValueLiteral);
      });

      it('should have the property extra (base name: "extra")', function() {
        // TODO: update the code to test the property extra
        expect(instance).to.have.property('extra');
        // expect(instance.extra).to.be(expectedValueLiteral);
      });

      it('should have the property fetchValuesPredicate (base name: "fetch_values_predicate")', function() {
        // TODO: update the code to test the property fetchValuesPredicate
        expect(instance).to.have.property('fetchValuesPredicate');
        // expect(instance.fetchValuesPredicate).to.be(expectedValueLiteral);
      });

      it('should have the property filterSelect (base name: "filter_select")', function() {
        // TODO: update the code to test the property filterSelect
        expect(instance).to.have.property('filterSelect');
        // expect(instance.filterSelect).to.be(expectedValueLiteral);
      });

      it('should have the property filterSelectEnabled (base name: "filter_select_enabled")', function() {
        // TODO: update the code to test the property filterSelectEnabled
        expect(instance).to.have.property('filterSelectEnabled');
        // expect(instance.filterSelectEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property granularitySqla (base name: "granularity_sqla")', function() {
        // TODO: update the code to test the property granularitySqla
        expect(instance).to.have.property('granularitySqla');
        // expect(instance.granularitySqla).to.be(expectedValueLiteral);
      });

      it('should have the property healthCheckMessage (base name: "health_check_message")', function() {
        // TODO: update the code to test the property healthCheckMessage
        expect(instance).to.have.property('healthCheckMessage');
        // expect(instance.healthCheckMessage).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property isSqllabView (base name: "is_sqllab_view")', function() {
        // TODO: update the code to test the property isSqllabView
        expect(instance).to.have.property('isSqllabView');
        // expect(instance.isSqllabView).to.be(expectedValueLiteral);
      });

      it('should have the property mainDttmCol (base name: "main_dttm_col")', function() {
        // TODO: update the code to test the property mainDttmCol
        expect(instance).to.have.property('mainDttmCol');
        // expect(instance.mainDttmCol).to.be(expectedValueLiteral);
      });

      it('should have the property metrics (base name: "metrics")', function() {
        // TODO: update the code to test the property metrics
        expect(instance).to.have.property('metrics');
        // expect(instance.metrics).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property offset (base name: "offset")', function() {
        // TODO: update the code to test the property offset
        expect(instance).to.have.property('offset');
        // expect(instance.offset).to.be(expectedValueLiteral);
      });

      it('should have the property orderByChoices (base name: "order_by_choices")', function() {
        // TODO: update the code to test the property orderByChoices
        expect(instance).to.have.property('orderByChoices');
        // expect(instance.orderByChoices).to.be(expectedValueLiteral);
      });

      it('should have the property owners (base name: "owners")', function() {
        // TODO: update the code to test the property owners
        expect(instance).to.have.property('owners');
        // expect(instance.owners).to.be(expectedValueLiteral);
      });

      it('should have the property params (base name: "params")', function() {
        // TODO: update the code to test the property params
        expect(instance).to.have.property('params');
        // expect(instance.params).to.be(expectedValueLiteral);
      });

      it('should have the property perm (base name: "perm")', function() {
        // TODO: update the code to test the property perm
        expect(instance).to.have.property('perm');
        // expect(instance.perm).to.be(expectedValueLiteral);
      });

      it('should have the property schema (base name: "schema")', function() {
        // TODO: update the code to test the property schema
        expect(instance).to.have.property('schema');
        // expect(instance.schema).to.be(expectedValueLiteral);
      });

      it('should have the property selectStar (base name: "select_star")', function() {
        // TODO: update the code to test the property selectStar
        expect(instance).to.have.property('selectStar');
        // expect(instance.selectStar).to.be(expectedValueLiteral);
      });

      it('should have the property sql (base name: "sql")', function() {
        // TODO: update the code to test the property sql
        expect(instance).to.have.property('sql');
        // expect(instance.sql).to.be(expectedValueLiteral);
      });

      it('should have the property tableName (base name: "table_name")', function() {
        // TODO: update the code to test the property tableName
        expect(instance).to.have.property('tableName');
        // expect(instance.tableName).to.be(expectedValueLiteral);
      });

      it('should have the property templateParams (base name: "template_params")', function() {
        // TODO: update the code to test the property templateParams
        expect(instance).to.have.property('templateParams');
        // expect(instance.templateParams).to.be(expectedValueLiteral);
      });

      it('should have the property timeGrainSqla (base name: "time_grain_sqla")', function() {
        // TODO: update the code to test the property timeGrainSqla
        expect(instance).to.have.property('timeGrainSqla');
        // expect(instance.timeGrainSqla).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property uid (base name: "uid")', function() {
        // TODO: update the code to test the property uid
        expect(instance).to.have.property('uid');
        // expect(instance.uid).to.be(expectedValueLiteral);
      });

      it('should have the property verboseMap (base name: "verbose_map")', function() {
        // TODO: update the code to test the property verboseMap
        expect(instance).to.have.property('verboseMap');
        // expect(instance.verboseMap).to.be(expectedValueLiteral);
      });

    });
  });

}));
