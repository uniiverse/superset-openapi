/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ChartRestApiGetList', function() {
      beforeEach(function() {
        instance = new Superset.ChartRestApiGetList();
      });

      it('should create an instance of ChartRestApiGetList', function() {
        // TODO: update the code to test ChartRestApiGetList
        expect(instance).to.be.a(Superset.ChartRestApiGetList);
      });

      it('should have the property cacheTimeout (base name: "cache_timeout")', function() {
        // TODO: update the code to test the property cacheTimeout
        expect(instance).to.have.property('cacheTimeout');
        // expect(instance.cacheTimeout).to.be(expectedValueLiteral);
      });

      it('should have the property certificationDetails (base name: "certification_details")', function() {
        // TODO: update the code to test the property certificationDetails
        expect(instance).to.have.property('certificationDetails');
        // expect(instance.certificationDetails).to.be(expectedValueLiteral);
      });

      it('should have the property certifiedBy (base name: "certified_by")', function() {
        // TODO: update the code to test the property certifiedBy
        expect(instance).to.have.property('certifiedBy');
        // expect(instance.certifiedBy).to.be(expectedValueLiteral);
      });

      it('should have the property changedBy (base name: "changed_by")', function() {
        // TODO: update the code to test the property changedBy
        expect(instance).to.have.property('changedBy');
        // expect(instance.changedBy).to.be(expectedValueLiteral);
      });

      it('should have the property changedByName (base name: "changed_by_name")', function() {
        // TODO: update the code to test the property changedByName
        expect(instance).to.have.property('changedByName');
        // expect(instance.changedByName).to.be(expectedValueLiteral);
      });

      it('should have the property changedByUrl (base name: "changed_by_url")', function() {
        // TODO: update the code to test the property changedByUrl
        expect(instance).to.have.property('changedByUrl');
        // expect(instance.changedByUrl).to.be(expectedValueLiteral);
      });

      it('should have the property changedOnDeltaHumanized (base name: "changed_on_delta_humanized")', function() {
        // TODO: update the code to test the property changedOnDeltaHumanized
        expect(instance).to.have.property('changedOnDeltaHumanized');
        // expect(instance.changedOnDeltaHumanized).to.be(expectedValueLiteral);
      });

      it('should have the property changedOnDttm (base name: "changed_on_dttm")', function() {
        // TODO: update the code to test the property changedOnDttm
        expect(instance).to.have.property('changedOnDttm');
        // expect(instance.changedOnDttm).to.be(expectedValueLiteral);
      });

      it('should have the property changedOnUtc (base name: "changed_on_utc")', function() {
        // TODO: update the code to test the property changedOnUtc
        expect(instance).to.have.property('changedOnUtc');
        // expect(instance.changedOnUtc).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "created_by")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property createdByName (base name: "created_by_name")', function() {
        // TODO: update the code to test the property createdByName
        expect(instance).to.have.property('createdByName');
        // expect(instance.createdByName).to.be(expectedValueLiteral);
      });

      it('should have the property createdByUrl (base name: "created_by_url")', function() {
        // TODO: update the code to test the property createdByUrl
        expect(instance).to.have.property('createdByUrl');
        // expect(instance.createdByUrl).to.be(expectedValueLiteral);
      });

      it('should have the property createdOnDeltaHumanized (base name: "created_on_delta_humanized")', function() {
        // TODO: update the code to test the property createdOnDeltaHumanized
        expect(instance).to.have.property('createdOnDeltaHumanized');
        // expect(instance.createdOnDeltaHumanized).to.be(expectedValueLiteral);
      });

      it('should have the property dashboards (base name: "dashboards")', function() {
        // TODO: update the code to test the property dashboards
        expect(instance).to.have.property('dashboards');
        // expect(instance.dashboards).to.be(expectedValueLiteral);
      });

      it('should have the property datasourceId (base name: "datasource_id")', function() {
        // TODO: update the code to test the property datasourceId
        expect(instance).to.have.property('datasourceId');
        // expect(instance.datasourceId).to.be(expectedValueLiteral);
      });

      it('should have the property datasourceNameText (base name: "datasource_name_text")', function() {
        // TODO: update the code to test the property datasourceNameText
        expect(instance).to.have.property('datasourceNameText');
        // expect(instance.datasourceNameText).to.be(expectedValueLiteral);
      });

      it('should have the property datasourceType (base name: "datasource_type")', function() {
        // TODO: update the code to test the property datasourceType
        expect(instance).to.have.property('datasourceType');
        // expect(instance.datasourceType).to.be(expectedValueLiteral);
      });

      it('should have the property datasourceUrl (base name: "datasource_url")', function() {
        // TODO: update the code to test the property datasourceUrl
        expect(instance).to.have.property('datasourceUrl');
        // expect(instance.datasourceUrl).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property descriptionMarkeddown (base name: "description_markeddown")', function() {
        // TODO: update the code to test the property descriptionMarkeddown
        expect(instance).to.have.property('descriptionMarkeddown');
        // expect(instance.descriptionMarkeddown).to.be(expectedValueLiteral);
      });

      it('should have the property editUrl (base name: "edit_url")', function() {
        // TODO: update the code to test the property editUrl
        expect(instance).to.have.property('editUrl');
        // expect(instance.editUrl).to.be(expectedValueLiteral);
      });

      it('should have the property formData (base name: "form_data")', function() {
        // TODO: update the code to test the property formData
        expect(instance).to.have.property('formData');
        // expect(instance.formData).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property isManagedExternally (base name: "is_managed_externally")', function() {
        // TODO: update the code to test the property isManagedExternally
        expect(instance).to.have.property('isManagedExternally');
        // expect(instance.isManagedExternally).to.be(expectedValueLiteral);
      });

      it('should have the property lastSavedAt (base name: "last_saved_at")', function() {
        // TODO: update the code to test the property lastSavedAt
        expect(instance).to.have.property('lastSavedAt');
        // expect(instance.lastSavedAt).to.be(expectedValueLiteral);
      });

      it('should have the property lastSavedBy (base name: "last_saved_by")', function() {
        // TODO: update the code to test the property lastSavedBy
        expect(instance).to.have.property('lastSavedBy');
        // expect(instance.lastSavedBy).to.be(expectedValueLiteral);
      });

      it('should have the property owners (base name: "owners")', function() {
        // TODO: update the code to test the property owners
        expect(instance).to.have.property('owners');
        // expect(instance.owners).to.be(expectedValueLiteral);
      });

      it('should have the property params (base name: "params")', function() {
        // TODO: update the code to test the property params
        expect(instance).to.have.property('params');
        // expect(instance.params).to.be(expectedValueLiteral);
      });

      it('should have the property sliceName (base name: "slice_name")', function() {
        // TODO: update the code to test the property sliceName
        expect(instance).to.have.property('sliceName');
        // expect(instance.sliceName).to.be(expectedValueLiteral);
      });

      it('should have the property sliceUrl (base name: "slice_url")', function() {
        // TODO: update the code to test the property sliceUrl
        expect(instance).to.have.property('sliceUrl');
        // expect(instance.sliceUrl).to.be(expectedValueLiteral);
      });

      it('should have the property table (base name: "table")', function() {
        // TODO: update the code to test the property table
        expect(instance).to.have.property('table');
        // expect(instance.table).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

      it('should have the property thumbnailUrl (base name: "thumbnail_url")', function() {
        // TODO: update the code to test the property thumbnailUrl
        expect(instance).to.have.property('thumbnailUrl');
        // expect(instance.thumbnailUrl).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property vizType (base name: "viz_type")', function() {
        // TODO: update the code to test the property vizType
        expect(instance).to.have.property('vizType');
        // expect(instance.vizType).to.be(expectedValueLiteral);
      });

    });
  });

}));
