/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Superset.AnnotationLayersApi();
  });

  describe('(package)', function() {
    describe('AnnotationLayersApi', function() {
      describe('apiV1AnnotationLayerDelete', function() {
        it('should call apiV1AnnotationLayerDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerDelete call and complete the assertions
          /*
          var opts = {};

          instance.apiV1AnnotationLayerDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1AnnotationLayerGet', function() {
        it('should call apiV1AnnotationLayerGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1AnnotationLayerGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2001);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1AnnotationLayerInfoGet', function() {
        it('should call apiV1AnnotationLayerInfoGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerInfoGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1AnnotationLayerInfoGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1AnnotationLayerPkAnnotationAnnotationIdDelete', function() {
        it('should call apiV1AnnotationLayerPkAnnotationAnnotationIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerPkAnnotationAnnotationIdDelete call and complete the assertions
          /*

          instance.apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1AnnotationLayerPkAnnotationAnnotationIdGet', function() {
        it('should call apiV1AnnotationLayerPkAnnotationAnnotationIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerPkAnnotationAnnotationIdGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2006);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1AnnotationLayerPkAnnotationAnnotationIdPut', function() {
        it('should call apiV1AnnotationLayerPkAnnotationAnnotationIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerPkAnnotationAnnotationIdPut call and complete the assertions
          /*

          instance.apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2007);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1AnnotationLayerPkAnnotationDelete', function() {
        it('should call apiV1AnnotationLayerPkAnnotationDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerPkAnnotationDelete call and complete the assertions
          /*
          var opts = {};

          instance.apiV1AnnotationLayerPkAnnotationDelete(pk, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1AnnotationLayerPkAnnotationGet', function() {
        it('should call apiV1AnnotationLayerPkAnnotationGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerPkAnnotationGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1AnnotationLayerPkAnnotationGet(pk, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2005);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1AnnotationLayerPkAnnotationPost', function() {
        it('should call apiV1AnnotationLayerPkAnnotationPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerPkAnnotationPost call and complete the assertions
          /*

          instance.apiV1AnnotationLayerPkAnnotationPost(body, pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2011);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1AnnotationLayerPkDelete', function() {
        it('should call apiV1AnnotationLayerPkDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerPkDelete call and complete the assertions
          /*

          instance.apiV1AnnotationLayerPkDelete(pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1AnnotationLayerPkGet', function() {
        it('should call apiV1AnnotationLayerPkGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerPkGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1AnnotationLayerPkGet(pk, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2003);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1AnnotationLayerPkPut', function() {
        it('should call apiV1AnnotationLayerPkPut successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerPkPut call and complete the assertions
          /*

          instance.apiV1AnnotationLayerPkPut(body, pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2004);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1AnnotationLayerPost', function() {
        it('should call apiV1AnnotationLayerPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerPost call and complete the assertions
          /*

          instance.apiV1AnnotationLayerPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse201);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1AnnotationLayerRelatedColumnNameGet', function() {
        it('should call apiV1AnnotationLayerRelatedColumnNameGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1AnnotationLayerRelatedColumnNameGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1AnnotationLayerRelatedColumnNameGet(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.RelatedResponseSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
