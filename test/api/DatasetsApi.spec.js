/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Superset.DatasetsApi();
  });

  describe('(package)', function() {
    describe('DatasetsApi', function() {
      describe('apiV1DatasetDelete', function() {
        it('should call apiV1DatasetDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetDelete call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DatasetDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetDistinctColumnNameGet', function() {
        it('should call apiV1DatasetDistinctColumnNameGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetDistinctColumnNameGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DatasetDistinctColumnNameGet(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.DistincResponseSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetDuplicatePost', function() {
        it('should call apiV1DatasetDuplicatePost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetDuplicatePost call and complete the assertions
          /*

          instance.apiV1DatasetDuplicatePost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20110);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetExportGet', function() {
        it('should call apiV1DatasetExportGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetExportGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DatasetExportGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetGet', function() {
        it('should call apiV1DatasetGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DatasetGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20034);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetGetOrCreatePost', function() {
        it('should call apiV1DatasetGetOrCreatePost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetGetOrCreatePost call and complete the assertions
          /*

          instance.apiV1DatasetGetOrCreatePost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20035);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetImportPost', function() {
        it('should call apiV1DatasetImportPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetImportPost call and complete the assertions
          /*

          instance.apiV1DatasetImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, syncColumns, syncMetrics, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetInfoGet', function() {
        it('should call apiV1DatasetInfoGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetInfoGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DatasetInfoGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetPkColumnColumnIdDelete', function() {
        it('should call apiV1DatasetPkColumnColumnIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetPkColumnColumnIdDelete call and complete the assertions
          /*

          instance.apiV1DatasetPkColumnColumnIdDelete(pk, columnId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetPkDelete', function() {
        it('should call apiV1DatasetPkDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetPkDelete call and complete the assertions
          /*

          instance.apiV1DatasetPkDelete(pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetPkGet', function() {
        it('should call apiV1DatasetPkGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetPkGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DatasetPkGet(pk, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20036);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetPkMetricMetricIdDelete', function() {
        it('should call apiV1DatasetPkMetricMetricIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetPkMetricMetricIdDelete call and complete the assertions
          /*

          instance.apiV1DatasetPkMetricMetricIdDelete(pk, metricId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetPkPut', function() {
        it('should call apiV1DatasetPkPut successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetPkPut call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DatasetPkPut(body, pk, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20037);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetPkRefreshPut', function() {
        it('should call apiV1DatasetPkRefreshPut successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetPkRefreshPut call and complete the assertions
          /*

          instance.apiV1DatasetPkRefreshPut(pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetPkRelatedObjectsGet', function() {
        it('should call apiV1DatasetPkRelatedObjectsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetPkRelatedObjectsGet call and complete the assertions
          /*

          instance.apiV1DatasetPkRelatedObjectsGet(pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.DatasetRelatedObjectsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetPost', function() {
        it('should call apiV1DatasetPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetPost call and complete the assertions
          /*

          instance.apiV1DatasetPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2019);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DatasetRelatedColumnNameGet', function() {
        it('should call apiV1DatasetRelatedColumnNameGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DatasetRelatedColumnNameGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DatasetRelatedColumnNameGet(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.RelatedResponseSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
