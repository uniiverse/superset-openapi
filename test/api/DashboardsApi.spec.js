/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Superset.DashboardsApi();
  });

  describe('(package)', function() {
    describe('DashboardsApi', function() {
      describe('apiV1DashboardDelete', function() {
        it('should call apiV1DashboardDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardDelete call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DashboardDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardExportGet', function() {
        it('should call apiV1DashboardExportGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardExportGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DashboardExportGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardFavoriteStatusGet', function() {
        it('should call apiV1DashboardFavoriteStatusGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardFavoriteStatusGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DashboardFavoriteStatusGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.GetFavStarIdsSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardGet', function() {
        it('should call apiV1DashboardGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DashboardGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20017);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardIdOrSlugChartsGet', function() {
        it('should call apiV1DashboardIdOrSlugChartsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardIdOrSlugChartsGet call and complete the assertions
          /*

          instance.apiV1DashboardIdOrSlugChartsGet(idOrSlug, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20022);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardIdOrSlugCopyPost', function() {
        it('should call apiV1DashboardIdOrSlugCopyPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardIdOrSlugCopyPost call and complete the assertions
          /*

          instance.apiV1DashboardIdOrSlugCopyPost(body, idOrSlug, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20023);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardIdOrSlugDatasetsGet', function() {
        it('should call apiV1DashboardIdOrSlugDatasetsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardIdOrSlugDatasetsGet call and complete the assertions
          /*

          instance.apiV1DashboardIdOrSlugDatasetsGet(idOrSlug, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20024);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardIdOrSlugEmbeddedDelete', function() {
        it('should call apiV1DashboardIdOrSlugEmbeddedDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardIdOrSlugEmbeddedDelete call and complete the assertions
          /*

          instance.apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardIdOrSlugEmbeddedGet', function() {
        it('should call apiV1DashboardIdOrSlugEmbeddedGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardIdOrSlugEmbeddedGet call and complete the assertions
          /*

          instance.apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20025);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardIdOrSlugEmbeddedPost', function() {
        it('should call apiV1DashboardIdOrSlugEmbeddedPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardIdOrSlugEmbeddedPost call and complete the assertions
          /*

          instance.apiV1DashboardIdOrSlugEmbeddedPost(body, idOrSlug, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20025);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardIdOrSlugEmbeddedPut', function() {
        it('should call apiV1DashboardIdOrSlugEmbeddedPut successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardIdOrSlugEmbeddedPut call and complete the assertions
          /*

          instance.apiV1DashboardIdOrSlugEmbeddedPut(body, idOrSlug, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20025);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardIdOrSlugGet', function() {
        it('should call apiV1DashboardIdOrSlugGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardIdOrSlugGet call and complete the assertions
          /*

          instance.apiV1DashboardIdOrSlugGet(idOrSlug, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20021);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardImportPost', function() {
        it('should call apiV1DashboardImportPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardImportPost call and complete the assertions
          /*

          instance.apiV1DashboardImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardInfoGet', function() {
        it('should call apiV1DashboardInfoGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardInfoGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DashboardInfoGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardPkDelete', function() {
        it('should call apiV1DashboardPkDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardPkDelete call and complete the assertions
          /*

          instance.apiV1DashboardPkDelete(pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardPkFavoritesDelete', function() {
        it('should call apiV1DashboardPkFavoritesDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardPkFavoritesDelete call and complete the assertions
          /*

          instance.apiV1DashboardPkFavoritesDelete(pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20013);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardPkFavoritesPost', function() {
        it('should call apiV1DashboardPkFavoritesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardPkFavoritesPost call and complete the assertions
          /*

          instance.apiV1DashboardPkFavoritesPost(pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20013);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardPkPut', function() {
        it('should call apiV1DashboardPkPut successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardPkPut call and complete the assertions
          /*

          instance.apiV1DashboardPkPut(body, pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20026);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardPkThumbnailDigestGet', function() {
        it('should call apiV1DashboardPkThumbnailDigestGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardPkThumbnailDigestGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DashboardPkThumbnailDigestGet(pk, digest, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardPost', function() {
        it('should call apiV1DashboardPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardPost call and complete the assertions
          /*

          instance.apiV1DashboardPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2014);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1DashboardRelatedColumnNameGet', function() {
        it('should call apiV1DashboardRelatedColumnNameGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1DashboardRelatedColumnNameGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1DashboardRelatedColumnNameGet(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.RelatedResponseSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
