/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Superset.ReportSchedulesApi();
  });

  describe('(package)', function() {
    describe('ReportSchedulesApi', function() {
      describe('apiV1ReportDelete', function() {
        it('should call apiV1ReportDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ReportDelete call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ReportDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ReportGet', function() {
        it('should call apiV1ReportGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ReportGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ReportGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20048);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ReportInfoGet', function() {
        it('should call apiV1ReportInfoGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ReportInfoGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ReportInfoGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ReportPkDelete', function() {
        it('should call apiV1ReportPkDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ReportPkDelete call and complete the assertions
          /*

          instance.apiV1ReportPkDelete(pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ReportPkGet', function() {
        it('should call apiV1ReportPkGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ReportPkGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ReportPkGet(pk, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20049);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ReportPkLogGet', function() {
        it('should call apiV1ReportPkLogGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ReportPkLogGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ReportPkLogGet(pk, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20051);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ReportPkLogLogIdGet', function() {
        it('should call apiV1ReportPkLogLogIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ReportPkLogLogIdGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ReportPkLogLogIdGet(pk, logId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20052);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ReportPkPut', function() {
        it('should call apiV1ReportPkPut successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ReportPkPut call and complete the assertions
          /*

          instance.apiV1ReportPkPut(body, pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20050);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ReportPost', function() {
        it('should call apiV1ReportPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ReportPost call and complete the assertions
          /*

          instance.apiV1ReportPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20113);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ReportRelatedColumnNameGet', function() {
        it('should call apiV1ReportRelatedColumnNameGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ReportRelatedColumnNameGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ReportRelatedColumnNameGet(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.RelatedResponseSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
