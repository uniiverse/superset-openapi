/*
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Superset);
  }
}(this, function(expect, Superset) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Superset.ChartsApi();
  });

  describe('(package)', function() {
    describe('ChartsApi', function() {
      describe('apiV1ChartDataCacheKeyGet', function() {
        it('should call apiV1ChartDataCacheKeyGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartDataCacheKeyGet call and complete the assertions
          /*

          instance.apiV1ChartDataCacheKeyGet(cacheKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.ChartDataResponseSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartDataPost', function() {
        it('should call apiV1ChartDataPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartDataPost call and complete the assertions
          /*

          instance.apiV1ChartDataPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.ChartDataResponseSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartDelete', function() {
        it('should call apiV1ChartDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartDelete call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ChartDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartExportGet', function() {
        it('should call apiV1ChartExportGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartExportGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ChartExportGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartFavoriteStatusGet', function() {
        it('should call apiV1ChartFavoriteStatusGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartFavoriteStatusGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ChartFavoriteStatusGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.GetFavStarIdsSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartGet', function() {
        it('should call apiV1ChartGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ChartGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20010);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartImportPost', function() {
        it('should call apiV1ChartImportPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartImportPost call and complete the assertions
          /*

          instance.apiV1ChartImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartInfoGet', function() {
        it('should call apiV1ChartInfoGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartInfoGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ChartInfoGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartPkCacheScreenshotGet', function() {
        it('should call apiV1ChartPkCacheScreenshotGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartPkCacheScreenshotGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ChartPkCacheScreenshotGet(pk, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.ChartCacheScreenshotResponseSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartPkDataGet', function() {
        it('should call apiV1ChartPkDataGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartPkDataGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ChartPkDataGet(pk, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.ChartDataResponseSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartPkDelete', function() {
        it('should call apiV1ChartPkDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartPkDelete call and complete the assertions
          /*

          instance.apiV1ChartPkDelete(pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse400);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartPkFavoritesDelete', function() {
        it('should call apiV1ChartPkFavoritesDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartPkFavoritesDelete call and complete the assertions
          /*

          instance.apiV1ChartPkFavoritesDelete(pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20013);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartPkFavoritesPost', function() {
        it('should call apiV1ChartPkFavoritesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartPkFavoritesPost call and complete the assertions
          /*

          instance.apiV1ChartPkFavoritesPost(pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20013);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartPkGet', function() {
        it('should call apiV1ChartPkGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartPkGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ChartPkGet(pk, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20011);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartPkPut', function() {
        it('should call apiV1ChartPkPut successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartPkPut call and complete the assertions
          /*

          instance.apiV1ChartPkPut(body, pk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse20012);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartPkScreenshotDigestGet', function() {
        it('should call apiV1ChartPkScreenshotDigestGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartPkScreenshotDigestGet call and complete the assertions
          /*

          instance.apiV1ChartPkScreenshotDigestGet(pk, digest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartPkThumbnailDigestGet', function() {
        it('should call apiV1ChartPkThumbnailDigestGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartPkThumbnailDigestGet call and complete the assertions
          /*

          instance.apiV1ChartPkThumbnailDigestGet(pk, digest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartPost', function() {
        it('should call apiV1ChartPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartPost call and complete the assertions
          /*

          instance.apiV1ChartPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.InlineResponse2012);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiV1ChartRelatedColumnNameGet', function() {
        it('should call apiV1ChartRelatedColumnNameGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiV1ChartRelatedColumnNameGet call and complete the assertions
          /*
          var opts = {};

          instance.apiV1ChartRelatedColumnNameGet(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Superset.RelatedResponseSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
