"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Superset
 * Superset
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvailableDomainsApiFp = exports.AvailableDomainsApiFetchParamCreator = exports.AsyncEventsRestApiApi = exports.AsyncEventsRestApiApiFactory = exports.AsyncEventsRestApiApiFp = exports.AsyncEventsRestApiApiFetchParamCreator = exports.AnnotationLayersApi = exports.AnnotationLayersApiFactory = exports.AnnotationLayersApiFp = exports.AnnotationLayersApiFetchParamCreator = exports.AdvancedDataTypeApi = exports.AdvancedDataTypeApiFactory = exports.AdvancedDataTypeApiFp = exports.AdvancedDataTypeApiFetchParamCreator = exports.ValidatorConfigJSON = exports.SecurityLoginBody = exports.ReportScheduleRestApiPut = exports.ReportScheduleRestApiPost = exports.ReportRecipient = exports.RLSRestApiPut = exports.RLSRestApiPost = exports.RLSRestApiGetList = exports.RLSRestApiGet = exports.InlineResponse410Errors = exports.GetListSchema = exports.GetItemSchema = exports.GetInfoSchema = exports.FormDataPutSchema = exports.FormDataPostSchema = exports.FilterSetRestApiPut = exports.FilterSetRestApiPost = exports.Datasource = exports.ChartRestApiPut = exports.ChartRestApiPost = exports.ChartDataRollingOptionsSchema = exports.ChartDataRestApiPut = exports.ChartDataRestApiPost = exports.ChartDataResponseResult = exports.ChartDataProphetOptionsSchema = exports.ChartDataPostProcessingOperation = exports.ChartDataFilter = exports.ChartDataExtras = exports.ChartDataDatasource = exports.ChartDataContributionOptionsSchema = exports.ChartDataBoxplotOptionsSchema = exports.ChartDataAdhocMetricSchema = exports.AnnotationLayer = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = void 0;
exports.ExploreApi = exports.ExploreApiFactory = exports.ExploreApiFp = exports.ExploreApiFetchParamCreator = exports.EmbeddedDashboardApi = exports.EmbeddedDashboardApiFactory = exports.EmbeddedDashboardApiFp = exports.EmbeddedDashboardApiFetchParamCreator = exports.DatasourcesApi = exports.DatasourcesApiFactory = exports.DatasourcesApiFp = exports.DatasourcesApiFetchParamCreator = exports.DatasetsApi = exports.DatasetsApiFactory = exports.DatasetsApiFp = exports.DatasetsApiFetchParamCreator = exports.DatabaseApi = exports.DatabaseApiFactory = exports.DatabaseApiFp = exports.DatabaseApiFetchParamCreator = exports.DashboardsApi = exports.DashboardsApiFactory = exports.DashboardsApiFp = exports.DashboardsApiFetchParamCreator = exports.DashboardPermanentLinkApi = exports.DashboardPermanentLinkApiFactory = exports.DashboardPermanentLinkApiFp = exports.DashboardPermanentLinkApiFetchParamCreator = exports.DashboardFilterStateApi = exports.DashboardFilterStateApiFactory = exports.DashboardFilterStateApiFp = exports.DashboardFilterStateApiFetchParamCreator = exports.CurrentUserApi = exports.CurrentUserApiFactory = exports.CurrentUserApiFp = exports.CurrentUserApiFetchParamCreator = exports.ChartsApi = exports.ChartsApiFactory = exports.ChartsApiFp = exports.ChartsApiFetchParamCreator = exports.CacheRestApiApi = exports.CacheRestApiApiFactory = exports.CacheRestApiApiFp = exports.CacheRestApiApiFetchParamCreator = exports.CSSTemplatesApi = exports.CSSTemplatesApiFactory = exports.CSSTemplatesApiFp = exports.CSSTemplatesApiFetchParamCreator = exports.AvailableDomainsApi = exports.AvailableDomainsApiFactory = void 0;
exports.TagsApiFp = exports.TagsApiFetchParamCreator = exports.SecurityApi = exports.SecurityApiFactory = exports.SecurityApiFp = exports.SecurityApiFetchParamCreator = exports.SQLLabApi = exports.SQLLabApiFactory = exports.SQLLabApiFp = exports.SQLLabApiFetchParamCreator = exports.RowLevelSecurityApi = exports.RowLevelSecurityApiFactory = exports.RowLevelSecurityApiFp = exports.RowLevelSecurityApiFetchParamCreator = exports.ReportSchedulesApi = exports.ReportSchedulesApiFactory = exports.ReportSchedulesApiFp = exports.ReportSchedulesApiFetchParamCreator = exports.QueriesApi = exports.QueriesApiFactory = exports.QueriesApiFp = exports.QueriesApiFetchParamCreator = exports.OpenApiApi = exports.OpenApiApiFactory = exports.OpenApiApiFp = exports.OpenApiApiFetchParamCreator = exports.MenuApi = exports.MenuApiFactory = exports.MenuApiFp = exports.MenuApiFetchParamCreator = exports.LogRestApiApi = exports.LogRestApiApiFactory = exports.LogRestApiApiFp = exports.LogRestApiApiFetchParamCreator = exports.ImportexportApi = exports.ImportexportApiFactory = exports.ImportexportApiFp = exports.ImportexportApiFetchParamCreator = exports.FilterSetRestApiApi = exports.FilterSetRestApiApiFactory = exports.FilterSetRestApiApiFp = exports.FilterSetRestApiApiFetchParamCreator = exports.ExplorePermanentLinkApi = exports.ExplorePermanentLinkApiFactory = exports.ExplorePermanentLinkApiFp = exports.ExplorePermanentLinkApiFetchParamCreator = exports.ExploreFormDataApi = exports.ExploreFormDataApiFactory = exports.ExploreFormDataApiFp = exports.ExploreFormDataApiFetchParamCreator = void 0;
exports.TagsApi = exports.TagsApiFactory = void 0;
const url = __importStar(require("url"));
const isomorphicFetch = __importStar(require("isomorphic-fetch"));
const BASE_PATH = "http://localhost:8088/".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = isomorphicFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
exports.RequiredError = RequiredError;
/**
 * @export
 * @namespace AnnotationLayer
 */
var AnnotationLayer;
(function (AnnotationLayer) {
    /**
     * @export
     * @enum {string}
     */
    let AnnotationTypeEnum;
    (function (AnnotationTypeEnum) {
        AnnotationTypeEnum[AnnotationTypeEnum["FORMULA"] = 'FORMULA'] = "FORMULA";
        AnnotationTypeEnum[AnnotationTypeEnum["INTERVAL"] = 'INTERVAL'] = "INTERVAL";
        AnnotationTypeEnum[AnnotationTypeEnum["EVENT"] = 'EVENT'] = "EVENT";
        AnnotationTypeEnum[AnnotationTypeEnum["TIMESERIES"] = 'TIME_SERIES'] = "TIMESERIES";
    })(AnnotationTypeEnum = AnnotationLayer.AnnotationTypeEnum || (AnnotationLayer.AnnotationTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let OpacityEnum;
    (function (OpacityEnum) {
        OpacityEnum[OpacityEnum["Empty"] = ''] = "Empty";
        OpacityEnum[OpacityEnum["OpacityLow"] = 'opacityLow'] = "OpacityLow";
        OpacityEnum[OpacityEnum["OpacityMedium"] = 'opacityMedium'] = "OpacityMedium";
        OpacityEnum[OpacityEnum["OpacityHigh"] = 'opacityHigh'] = "OpacityHigh";
    })(OpacityEnum = AnnotationLayer.OpacityEnum || (AnnotationLayer.OpacityEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let SourceTypeEnum;
    (function (SourceTypeEnum) {
        SourceTypeEnum[SourceTypeEnum["Empty"] = ''] = "Empty";
        SourceTypeEnum[SourceTypeEnum["Line"] = 'line'] = "Line";
        SourceTypeEnum[SourceTypeEnum["NATIVE"] = 'NATIVE'] = "NATIVE";
        SourceTypeEnum[SourceTypeEnum["Table"] = 'table'] = "Table";
    })(SourceTypeEnum = AnnotationLayer.SourceTypeEnum || (AnnotationLayer.SourceTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let StyleEnum;
    (function (StyleEnum) {
        StyleEnum[StyleEnum["Dashed"] = 'dashed'] = "Dashed";
        StyleEnum[StyleEnum["Dotted"] = 'dotted'] = "Dotted";
        StyleEnum[StyleEnum["Solid"] = 'solid'] = "Solid";
        StyleEnum[StyleEnum["LongDashed"] = 'longDashed'] = "LongDashed";
    })(StyleEnum = AnnotationLayer.StyleEnum || (AnnotationLayer.StyleEnum = {}));
})(AnnotationLayer = exports.AnnotationLayer || (exports.AnnotationLayer = {}));
/**
 * @export
 * @namespace ChartDataAdhocMetricSchema
 */
var ChartDataAdhocMetricSchema;
(function (ChartDataAdhocMetricSchema) {
    /**
     * @export
     * @enum {string}
     */
    let AggregateEnum;
    (function (AggregateEnum) {
        AggregateEnum[AggregateEnum["AVG"] = 'AVG'] = "AVG";
        AggregateEnum[AggregateEnum["COUNT"] = 'COUNT'] = "COUNT";
        AggregateEnum[AggregateEnum["COUNTDISTINCT"] = 'COUNT_DISTINCT'] = "COUNTDISTINCT";
        AggregateEnum[AggregateEnum["MAX"] = 'MAX'] = "MAX";
        AggregateEnum[AggregateEnum["MIN"] = 'MIN'] = "MIN";
        AggregateEnum[AggregateEnum["SUM"] = 'SUM'] = "SUM";
    })(AggregateEnum = ChartDataAdhocMetricSchema.AggregateEnum || (ChartDataAdhocMetricSchema.AggregateEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let ExpressionTypeEnum;
    (function (ExpressionTypeEnum) {
        ExpressionTypeEnum[ExpressionTypeEnum["SIMPLE"] = 'SIMPLE'] = "SIMPLE";
        ExpressionTypeEnum[ExpressionTypeEnum["SQL"] = 'SQL'] = "SQL";
    })(ExpressionTypeEnum = ChartDataAdhocMetricSchema.ExpressionTypeEnum || (ChartDataAdhocMetricSchema.ExpressionTypeEnum = {}));
})(ChartDataAdhocMetricSchema = exports.ChartDataAdhocMetricSchema || (exports.ChartDataAdhocMetricSchema = {}));
/**
 * @export
 * @namespace ChartDataBoxplotOptionsSchema
 */
var ChartDataBoxplotOptionsSchema;
(function (ChartDataBoxplotOptionsSchema) {
    /**
     * @export
     * @enum {string}
     */
    let WhiskerTypeEnum;
    (function (WhiskerTypeEnum) {
        WhiskerTypeEnum[WhiskerTypeEnum["Tukey"] = 'tukey'] = "Tukey";
        WhiskerTypeEnum[WhiskerTypeEnum["Minmax"] = 'min/max'] = "Minmax";
        WhiskerTypeEnum[WhiskerTypeEnum["Percentile"] = 'percentile'] = "Percentile";
    })(WhiskerTypeEnum = ChartDataBoxplotOptionsSchema.WhiskerTypeEnum || (ChartDataBoxplotOptionsSchema.WhiskerTypeEnum = {}));
})(ChartDataBoxplotOptionsSchema = exports.ChartDataBoxplotOptionsSchema || (exports.ChartDataBoxplotOptionsSchema = {}));
/**
 * @export
 * @namespace ChartDataContributionOptionsSchema
 */
var ChartDataContributionOptionsSchema;
(function (ChartDataContributionOptionsSchema) {
    /**
     * @export
     * @enum {string}
     */
    let OrientationEnum;
    (function (OrientationEnum) {
        OrientationEnum[OrientationEnum["Row"] = 'row'] = "Row";
        OrientationEnum[OrientationEnum["Column"] = 'column'] = "Column";
    })(OrientationEnum = ChartDataContributionOptionsSchema.OrientationEnum || (ChartDataContributionOptionsSchema.OrientationEnum = {}));
})(ChartDataContributionOptionsSchema = exports.ChartDataContributionOptionsSchema || (exports.ChartDataContributionOptionsSchema = {}));
/**
 * @export
 * @namespace ChartDataDatasource
 */
var ChartDataDatasource;
(function (ChartDataDatasource) {
    /**
     * @export
     * @enum {string}
     */
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["SlTable"] = 'sl_table'] = "SlTable";
        TypeEnum[TypeEnum["Table"] = 'table'] = "Table";
        TypeEnum[TypeEnum["Dataset"] = 'dataset'] = "Dataset";
        TypeEnum[TypeEnum["Query"] = 'query'] = "Query";
        TypeEnum[TypeEnum["SavedQuery"] = 'saved_query'] = "SavedQuery";
        TypeEnum[TypeEnum["View"] = 'view'] = "View";
    })(TypeEnum = ChartDataDatasource.TypeEnum || (ChartDataDatasource.TypeEnum = {}));
})(ChartDataDatasource = exports.ChartDataDatasource || (exports.ChartDataDatasource = {}));
/**
 * @export
 * @namespace ChartDataExtras
 */
var ChartDataExtras;
(function (ChartDataExtras) {
    /**
     * @export
     * @enum {string}
     */
    let RelativeEndEnum;
    (function (RelativeEndEnum) {
        RelativeEndEnum[RelativeEndEnum["Today"] = 'today'] = "Today";
        RelativeEndEnum[RelativeEndEnum["Now"] = 'now'] = "Now";
    })(RelativeEndEnum = ChartDataExtras.RelativeEndEnum || (ChartDataExtras.RelativeEndEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let RelativeStartEnum;
    (function (RelativeStartEnum) {
        RelativeStartEnum[RelativeStartEnum["Today"] = 'today'] = "Today";
        RelativeStartEnum[RelativeStartEnum["Now"] = 'now'] = "Now";
    })(RelativeStartEnum = ChartDataExtras.RelativeStartEnum || (ChartDataExtras.RelativeStartEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let TimeGrainSqlaEnum;
    (function (TimeGrainSqlaEnum) {
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["PT1S"] = 'PT1S'] = "PT1S";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["PT5S"] = 'PT5S'] = "PT5S";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["PT30S"] = 'PT30S'] = "PT30S";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["PT1M"] = 'PT1M'] = "PT1M";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["PT5M"] = 'PT5M'] = "PT5M";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["PT10M"] = 'PT10M'] = "PT10M";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["PT15M"] = 'PT15M'] = "PT15M";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["PT30M"] = 'PT30M'] = "PT30M";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["PT1H"] = 'PT1H'] = "PT1H";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["PT6H"] = 'PT6H'] = "PT6H";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["P1D"] = 'P1D'] = "P1D";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["P1W"] = 'P1W'] = "P1W";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["P1M"] = 'P1M'] = "P1M";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["P3M"] = 'P3M'] = "P3M";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["P1Y"] = 'P1Y'] = "P1Y";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["_19691228T000000ZP1W"] = '1969-12-28T00:00:00Z/P1W'] = "_19691228T000000ZP1W";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["_19691229T000000ZP1W"] = '1969-12-29T00:00:00Z/P1W'] = "_19691229T000000ZP1W";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["P1W19700103T000000Z"] = 'P1W/1970-01-03T00:00:00Z'] = "P1W19700103T000000Z";
        TimeGrainSqlaEnum[TimeGrainSqlaEnum["P1W19700104T000000Z"] = 'P1W/1970-01-04T00:00:00Z'] = "P1W19700104T000000Z";
    })(TimeGrainSqlaEnum = ChartDataExtras.TimeGrainSqlaEnum || (ChartDataExtras.TimeGrainSqlaEnum = {}));
})(ChartDataExtras = exports.ChartDataExtras || (exports.ChartDataExtras = {}));
/**
 * @export
 * @namespace ChartDataFilter
 */
var ChartDataFilter;
(function (ChartDataFilter) {
    /**
     * @export
     * @enum {string}
     */
    let OpEnum;
    (function (OpEnum) {
        OpEnum[OpEnum["Equal"] = '=='] = "Equal";
        OpEnum[OpEnum["NotEqual"] = '!='] = "NotEqual";
        OpEnum[OpEnum["GreaterThan"] = '>'] = "GreaterThan";
        OpEnum[OpEnum["LessThan"] = '<'] = "LessThan";
        OpEnum[OpEnum["GreaterThanOrEqualTo"] = '>='] = "GreaterThanOrEqualTo";
        OpEnum[OpEnum["LessThanOrEqualTo"] = '<='] = "LessThanOrEqualTo";
        OpEnum[OpEnum["LIKE"] = 'LIKE'] = "LIKE";
        OpEnum[OpEnum["ILIKE"] = 'ILIKE'] = "ILIKE";
        OpEnum[OpEnum["ISNULL"] = 'IS NULL'] = "ISNULL";
        OpEnum[OpEnum["ISNOTNULL"] = 'IS NOT NULL'] = "ISNOTNULL";
        OpEnum[OpEnum["IN"] = 'IN'] = "IN";
        OpEnum[OpEnum["NOTIN"] = 'NOT IN'] = "NOTIN";
        OpEnum[OpEnum["REGEX"] = 'REGEX'] = "REGEX";
        OpEnum[OpEnum["ISTRUE"] = 'IS TRUE'] = "ISTRUE";
        OpEnum[OpEnum["ISFALSE"] = 'IS FALSE'] = "ISFALSE";
        OpEnum[OpEnum["TEMPORALRANGE"] = 'TEMPORAL_RANGE'] = "TEMPORALRANGE";
    })(OpEnum = ChartDataFilter.OpEnum || (ChartDataFilter.OpEnum = {}));
})(ChartDataFilter = exports.ChartDataFilter || (exports.ChartDataFilter = {}));
/**
 * @export
 * @namespace ChartDataPostProcessingOperation
 */
var ChartDataPostProcessingOperation;
(function (ChartDataPostProcessingOperation) {
    /**
     * @export
     * @enum {string}
     */
    let OperationEnum;
    (function (OperationEnum) {
        OperationEnum[OperationEnum["Aggregate"] = 'aggregate'] = "Aggregate";
        OperationEnum[OperationEnum["Boxplot"] = 'boxplot'] = "Boxplot";
        OperationEnum[OperationEnum["Compare"] = 'compare'] = "Compare";
        OperationEnum[OperationEnum["Contribution"] = 'contribution'] = "Contribution";
        OperationEnum[OperationEnum["Cum"] = 'cum'] = "Cum";
        OperationEnum[OperationEnum["Diff"] = 'diff'] = "Diff";
        OperationEnum[OperationEnum["EscapeSeparator"] = 'escape_separator'] = "EscapeSeparator";
        OperationEnum[OperationEnum["Flatten"] = 'flatten'] = "Flatten";
        OperationEnum[OperationEnum["GeodeticParse"] = 'geodetic_parse'] = "GeodeticParse";
        OperationEnum[OperationEnum["GeohashDecode"] = 'geohash_decode'] = "GeohashDecode";
        OperationEnum[OperationEnum["GeohashEncode"] = 'geohash_encode'] = "GeohashEncode";
        OperationEnum[OperationEnum["Pivot"] = 'pivot'] = "Pivot";
        OperationEnum[OperationEnum["Prophet"] = 'prophet'] = "Prophet";
        OperationEnum[OperationEnum["Rename"] = 'rename'] = "Rename";
        OperationEnum[OperationEnum["Resample"] = 'resample'] = "Resample";
        OperationEnum[OperationEnum["Rolling"] = 'rolling'] = "Rolling";
        OperationEnum[OperationEnum["Select"] = 'select'] = "Select";
        OperationEnum[OperationEnum["Sort"] = 'sort'] = "Sort";
        OperationEnum[OperationEnum["UnescapeSeparator"] = 'unescape_separator'] = "UnescapeSeparator";
    })(OperationEnum = ChartDataPostProcessingOperation.OperationEnum || (ChartDataPostProcessingOperation.OperationEnum = {}));
})(ChartDataPostProcessingOperation = exports.ChartDataPostProcessingOperation || (exports.ChartDataPostProcessingOperation = {}));
/**
 * @export
 * @namespace ChartDataProphetOptionsSchema
 */
var ChartDataProphetOptionsSchema;
(function (ChartDataProphetOptionsSchema) {
    /**
     * @export
     * @enum {string}
     */
    let TimeGrainEnum;
    (function (TimeGrainEnum) {
        TimeGrainEnum[TimeGrainEnum["PT1S"] = 'PT1S'] = "PT1S";
        TimeGrainEnum[TimeGrainEnum["PT5S"] = 'PT5S'] = "PT5S";
        TimeGrainEnum[TimeGrainEnum["PT30S"] = 'PT30S'] = "PT30S";
        TimeGrainEnum[TimeGrainEnum["PT1M"] = 'PT1M'] = "PT1M";
        TimeGrainEnum[TimeGrainEnum["PT5M"] = 'PT5M'] = "PT5M";
        TimeGrainEnum[TimeGrainEnum["PT10M"] = 'PT10M'] = "PT10M";
        TimeGrainEnum[TimeGrainEnum["PT15M"] = 'PT15M'] = "PT15M";
        TimeGrainEnum[TimeGrainEnum["PT30M"] = 'PT30M'] = "PT30M";
        TimeGrainEnum[TimeGrainEnum["PT1H"] = 'PT1H'] = "PT1H";
        TimeGrainEnum[TimeGrainEnum["PT6H"] = 'PT6H'] = "PT6H";
        TimeGrainEnum[TimeGrainEnum["P1D"] = 'P1D'] = "P1D";
        TimeGrainEnum[TimeGrainEnum["P1W"] = 'P1W'] = "P1W";
        TimeGrainEnum[TimeGrainEnum["P1M"] = 'P1M'] = "P1M";
        TimeGrainEnum[TimeGrainEnum["P3M"] = 'P3M'] = "P3M";
        TimeGrainEnum[TimeGrainEnum["P1Y"] = 'P1Y'] = "P1Y";
        TimeGrainEnum[TimeGrainEnum["_19691228T000000ZP1W"] = '1969-12-28T00:00:00Z/P1W'] = "_19691228T000000ZP1W";
        TimeGrainEnum[TimeGrainEnum["_19691229T000000ZP1W"] = '1969-12-29T00:00:00Z/P1W'] = "_19691229T000000ZP1W";
        TimeGrainEnum[TimeGrainEnum["P1W19700103T000000Z"] = 'P1W/1970-01-03T00:00:00Z'] = "P1W19700103T000000Z";
        TimeGrainEnum[TimeGrainEnum["P1W19700104T000000Z"] = 'P1W/1970-01-04T00:00:00Z'] = "P1W19700104T000000Z";
    })(TimeGrainEnum = ChartDataProphetOptionsSchema.TimeGrainEnum || (ChartDataProphetOptionsSchema.TimeGrainEnum = {}));
})(ChartDataProphetOptionsSchema = exports.ChartDataProphetOptionsSchema || (exports.ChartDataProphetOptionsSchema = {}));
/**
 * @export
 * @namespace ChartDataResponseResult
 */
var ChartDataResponseResult;
(function (ChartDataResponseResult) {
    /**
     * @export
     * @enum {string}
     */
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Stopped"] = 'stopped'] = "Stopped";
        StatusEnum[StatusEnum["Failed"] = 'failed'] = "Failed";
        StatusEnum[StatusEnum["Pending"] = 'pending'] = "Pending";
        StatusEnum[StatusEnum["Running"] = 'running'] = "Running";
        StatusEnum[StatusEnum["Scheduled"] = 'scheduled'] = "Scheduled";
        StatusEnum[StatusEnum["Success"] = 'success'] = "Success";
        StatusEnum[StatusEnum["TimedOut"] = 'timed_out'] = "TimedOut";
    })(StatusEnum = ChartDataResponseResult.StatusEnum || (ChartDataResponseResult.StatusEnum = {}));
})(ChartDataResponseResult = exports.ChartDataResponseResult || (exports.ChartDataResponseResult = {}));
/**
 * @export
 * @namespace ChartDataRestApiPost
 */
var ChartDataRestApiPost;
(function (ChartDataRestApiPost) {
    /**
     * @export
     * @enum {string}
     */
    let DatasourceTypeEnum;
    (function (DatasourceTypeEnum) {
        DatasourceTypeEnum[DatasourceTypeEnum["SlTable"] = 'sl_table'] = "SlTable";
        DatasourceTypeEnum[DatasourceTypeEnum["Table"] = 'table'] = "Table";
        DatasourceTypeEnum[DatasourceTypeEnum["Dataset"] = 'dataset'] = "Dataset";
        DatasourceTypeEnum[DatasourceTypeEnum["Query"] = 'query'] = "Query";
        DatasourceTypeEnum[DatasourceTypeEnum["SavedQuery"] = 'saved_query'] = "SavedQuery";
        DatasourceTypeEnum[DatasourceTypeEnum["View"] = 'view'] = "View";
    })(DatasourceTypeEnum = ChartDataRestApiPost.DatasourceTypeEnum || (ChartDataRestApiPost.DatasourceTypeEnum = {}));
})(ChartDataRestApiPost = exports.ChartDataRestApiPost || (exports.ChartDataRestApiPost = {}));
/**
 * @export
 * @namespace ChartDataRestApiPut
 */
var ChartDataRestApiPut;
(function (ChartDataRestApiPut) {
    /**
     * @export
     * @enum {string}
     */
    let DatasourceTypeEnum;
    (function (DatasourceTypeEnum) {
        DatasourceTypeEnum[DatasourceTypeEnum["SlTable"] = 'sl_table'] = "SlTable";
        DatasourceTypeEnum[DatasourceTypeEnum["Table"] = 'table'] = "Table";
        DatasourceTypeEnum[DatasourceTypeEnum["Dataset"] = 'dataset'] = "Dataset";
        DatasourceTypeEnum[DatasourceTypeEnum["Query"] = 'query'] = "Query";
        DatasourceTypeEnum[DatasourceTypeEnum["SavedQuery"] = 'saved_query'] = "SavedQuery";
        DatasourceTypeEnum[DatasourceTypeEnum["View"] = 'view'] = "View";
    })(DatasourceTypeEnum = ChartDataRestApiPut.DatasourceTypeEnum || (ChartDataRestApiPut.DatasourceTypeEnum = {}));
})(ChartDataRestApiPut = exports.ChartDataRestApiPut || (exports.ChartDataRestApiPut = {}));
/**
 * @export
 * @namespace ChartDataRollingOptionsSchema
 */
var ChartDataRollingOptionsSchema;
(function (ChartDataRollingOptionsSchema) {
    /**
     * @export
     * @enum {string}
     */
    let RollingTypeEnum;
    (function (RollingTypeEnum) {
        RollingTypeEnum[RollingTypeEnum["Average"] = 'average'] = "Average";
        RollingTypeEnum[RollingTypeEnum["Argmin"] = 'argmin'] = "Argmin";
        RollingTypeEnum[RollingTypeEnum["Argmax"] = 'argmax'] = "Argmax";
        RollingTypeEnum[RollingTypeEnum["Cumsum"] = 'cumsum'] = "Cumsum";
        RollingTypeEnum[RollingTypeEnum["Cumprod"] = 'cumprod'] = "Cumprod";
        RollingTypeEnum[RollingTypeEnum["Max"] = 'max'] = "Max";
        RollingTypeEnum[RollingTypeEnum["Mean"] = 'mean'] = "Mean";
        RollingTypeEnum[RollingTypeEnum["Median"] = 'median'] = "Median";
        RollingTypeEnum[RollingTypeEnum["Nansum"] = 'nansum'] = "Nansum";
        RollingTypeEnum[RollingTypeEnum["Nanmin"] = 'nanmin'] = "Nanmin";
        RollingTypeEnum[RollingTypeEnum["Nanmax"] = 'nanmax'] = "Nanmax";
        RollingTypeEnum[RollingTypeEnum["Nanmean"] = 'nanmean'] = "Nanmean";
        RollingTypeEnum[RollingTypeEnum["Nanmedian"] = 'nanmedian'] = "Nanmedian";
        RollingTypeEnum[RollingTypeEnum["Nanpercentile"] = 'nanpercentile'] = "Nanpercentile";
        RollingTypeEnum[RollingTypeEnum["Min"] = 'min'] = "Min";
        RollingTypeEnum[RollingTypeEnum["Percentile"] = 'percentile'] = "Percentile";
        RollingTypeEnum[RollingTypeEnum["Prod"] = 'prod'] = "Prod";
        RollingTypeEnum[RollingTypeEnum["Product"] = 'product'] = "Product";
        RollingTypeEnum[RollingTypeEnum["Std"] = 'std'] = "Std";
        RollingTypeEnum[RollingTypeEnum["Sum"] = 'sum'] = "Sum";
        RollingTypeEnum[RollingTypeEnum["Var"] = 'var'] = "Var";
    })(RollingTypeEnum = ChartDataRollingOptionsSchema.RollingTypeEnum || (ChartDataRollingOptionsSchema.RollingTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let WinTypeEnum;
    (function (WinTypeEnum) {
        WinTypeEnum[WinTypeEnum["Boxcar"] = 'boxcar'] = "Boxcar";
        WinTypeEnum[WinTypeEnum["Triang"] = 'triang'] = "Triang";
        WinTypeEnum[WinTypeEnum["Blackman"] = 'blackman'] = "Blackman";
        WinTypeEnum[WinTypeEnum["Hamming"] = 'hamming'] = "Hamming";
        WinTypeEnum[WinTypeEnum["Bartlett"] = 'bartlett'] = "Bartlett";
        WinTypeEnum[WinTypeEnum["Parzen"] = 'parzen'] = "Parzen";
        WinTypeEnum[WinTypeEnum["Bohman"] = 'bohman'] = "Bohman";
        WinTypeEnum[WinTypeEnum["Blackmanharris"] = 'blackmanharris'] = "Blackmanharris";
        WinTypeEnum[WinTypeEnum["Nuttall"] = 'nuttall'] = "Nuttall";
        WinTypeEnum[WinTypeEnum["Barthann"] = 'barthann'] = "Barthann";
        WinTypeEnum[WinTypeEnum["Kaiser"] = 'kaiser'] = "Kaiser";
        WinTypeEnum[WinTypeEnum["Gaussian"] = 'gaussian'] = "Gaussian";
        WinTypeEnum[WinTypeEnum["GeneralGaussian"] = 'general_gaussian'] = "GeneralGaussian";
        WinTypeEnum[WinTypeEnum["Slepian"] = 'slepian'] = "Slepian";
        WinTypeEnum[WinTypeEnum["Exponential"] = 'exponential'] = "Exponential";
    })(WinTypeEnum = ChartDataRollingOptionsSchema.WinTypeEnum || (ChartDataRollingOptionsSchema.WinTypeEnum = {}));
})(ChartDataRollingOptionsSchema = exports.ChartDataRollingOptionsSchema || (exports.ChartDataRollingOptionsSchema = {}));
/**
 * @export
 * @namespace ChartRestApiPost
 */
var ChartRestApiPost;
(function (ChartRestApiPost) {
    /**
     * @export
     * @enum {string}
     */
    let DatasourceTypeEnum;
    (function (DatasourceTypeEnum) {
        DatasourceTypeEnum[DatasourceTypeEnum["SlTable"] = 'sl_table'] = "SlTable";
        DatasourceTypeEnum[DatasourceTypeEnum["Table"] = 'table'] = "Table";
        DatasourceTypeEnum[DatasourceTypeEnum["Dataset"] = 'dataset'] = "Dataset";
        DatasourceTypeEnum[DatasourceTypeEnum["Query"] = 'query'] = "Query";
        DatasourceTypeEnum[DatasourceTypeEnum["SavedQuery"] = 'saved_query'] = "SavedQuery";
        DatasourceTypeEnum[DatasourceTypeEnum["View"] = 'view'] = "View";
    })(DatasourceTypeEnum = ChartRestApiPost.DatasourceTypeEnum || (ChartRestApiPost.DatasourceTypeEnum = {}));
})(ChartRestApiPost = exports.ChartRestApiPost || (exports.ChartRestApiPost = {}));
/**
 * @export
 * @namespace ChartRestApiPut
 */
var ChartRestApiPut;
(function (ChartRestApiPut) {
    /**
     * @export
     * @enum {string}
     */
    let DatasourceTypeEnum;
    (function (DatasourceTypeEnum) {
        DatasourceTypeEnum[DatasourceTypeEnum["SlTable"] = 'sl_table'] = "SlTable";
        DatasourceTypeEnum[DatasourceTypeEnum["Table"] = 'table'] = "Table";
        DatasourceTypeEnum[DatasourceTypeEnum["Dataset"] = 'dataset'] = "Dataset";
        DatasourceTypeEnum[DatasourceTypeEnum["Query"] = 'query'] = "Query";
        DatasourceTypeEnum[DatasourceTypeEnum["SavedQuery"] = 'saved_query'] = "SavedQuery";
        DatasourceTypeEnum[DatasourceTypeEnum["View"] = 'view'] = "View";
    })(DatasourceTypeEnum = ChartRestApiPut.DatasourceTypeEnum || (ChartRestApiPut.DatasourceTypeEnum = {}));
})(ChartRestApiPut = exports.ChartRestApiPut || (exports.ChartRestApiPut = {}));
/**
 * @export
 * @namespace Datasource
 */
var Datasource;
(function (Datasource) {
    /**
     * @export
     * @enum {string}
     */
    let DatasourceTypeEnum;
    (function (DatasourceTypeEnum) {
        DatasourceTypeEnum[DatasourceTypeEnum["SlTable"] = 'sl_table'] = "SlTable";
        DatasourceTypeEnum[DatasourceTypeEnum["Table"] = 'table'] = "Table";
        DatasourceTypeEnum[DatasourceTypeEnum["Dataset"] = 'dataset'] = "Dataset";
        DatasourceTypeEnum[DatasourceTypeEnum["Query"] = 'query'] = "Query";
        DatasourceTypeEnum[DatasourceTypeEnum["SavedQuery"] = 'saved_query'] = "SavedQuery";
        DatasourceTypeEnum[DatasourceTypeEnum["View"] = 'view'] = "View";
    })(DatasourceTypeEnum = Datasource.DatasourceTypeEnum || (Datasource.DatasourceTypeEnum = {}));
})(Datasource = exports.Datasource || (exports.Datasource = {}));
/**
 * @export
 * @namespace FilterSetRestApiPost
 */
var FilterSetRestApiPost;
(function (FilterSetRestApiPost) {
    /**
     * @export
     * @enum {string}
     */
    let OwnerTypeEnum;
    (function (OwnerTypeEnum) {
        OwnerTypeEnum[OwnerTypeEnum["User"] = 'User'] = "User";
        OwnerTypeEnum[OwnerTypeEnum["Dashboard"] = 'Dashboard'] = "Dashboard";
    })(OwnerTypeEnum = FilterSetRestApiPost.OwnerTypeEnum || (FilterSetRestApiPost.OwnerTypeEnum = {}));
})(FilterSetRestApiPost = exports.FilterSetRestApiPost || (exports.FilterSetRestApiPost = {}));
/**
 * @export
 * @namespace FilterSetRestApiPut
 */
var FilterSetRestApiPut;
(function (FilterSetRestApiPut) {
    /**
     * @export
     * @enum {string}
     */
    let OwnerTypeEnum;
    (function (OwnerTypeEnum) {
        OwnerTypeEnum[OwnerTypeEnum["Dashboard"] = 'Dashboard'] = "Dashboard";
    })(OwnerTypeEnum = FilterSetRestApiPut.OwnerTypeEnum || (FilterSetRestApiPut.OwnerTypeEnum = {}));
})(FilterSetRestApiPut = exports.FilterSetRestApiPut || (exports.FilterSetRestApiPut = {}));
/**
 * @export
 * @namespace FormDataPostSchema
 */
var FormDataPostSchema;
(function (FormDataPostSchema) {
    /**
     * @export
     * @enum {string}
     */
    let DatasourceTypeEnum;
    (function (DatasourceTypeEnum) {
        DatasourceTypeEnum[DatasourceTypeEnum["SlTable"] = 'sl_table'] = "SlTable";
        DatasourceTypeEnum[DatasourceTypeEnum["Table"] = 'table'] = "Table";
        DatasourceTypeEnum[DatasourceTypeEnum["Dataset"] = 'dataset'] = "Dataset";
        DatasourceTypeEnum[DatasourceTypeEnum["Query"] = 'query'] = "Query";
        DatasourceTypeEnum[DatasourceTypeEnum["SavedQuery"] = 'saved_query'] = "SavedQuery";
        DatasourceTypeEnum[DatasourceTypeEnum["View"] = 'view'] = "View";
    })(DatasourceTypeEnum = FormDataPostSchema.DatasourceTypeEnum || (FormDataPostSchema.DatasourceTypeEnum = {}));
})(FormDataPostSchema = exports.FormDataPostSchema || (exports.FormDataPostSchema = {}));
/**
 * @export
 * @namespace FormDataPutSchema
 */
var FormDataPutSchema;
(function (FormDataPutSchema) {
    /**
     * @export
     * @enum {string}
     */
    let DatasourceTypeEnum;
    (function (DatasourceTypeEnum) {
        DatasourceTypeEnum[DatasourceTypeEnum["SlTable"] = 'sl_table'] = "SlTable";
        DatasourceTypeEnum[DatasourceTypeEnum["Table"] = 'table'] = "Table";
        DatasourceTypeEnum[DatasourceTypeEnum["Dataset"] = 'dataset'] = "Dataset";
        DatasourceTypeEnum[DatasourceTypeEnum["Query"] = 'query'] = "Query";
        DatasourceTypeEnum[DatasourceTypeEnum["SavedQuery"] = 'saved_query'] = "SavedQuery";
        DatasourceTypeEnum[DatasourceTypeEnum["View"] = 'view'] = "View";
    })(DatasourceTypeEnum = FormDataPutSchema.DatasourceTypeEnum || (FormDataPutSchema.DatasourceTypeEnum = {}));
})(FormDataPutSchema = exports.FormDataPutSchema || (exports.FormDataPutSchema = {}));
/**
 * @export
 * @namespace GetInfoSchema
 */
var GetInfoSchema;
(function (GetInfoSchema) {
    /**
     * @export
     * @enum {string}
     */
    let KeysEnum;
    (function (KeysEnum) {
        KeysEnum[KeysEnum["AddColumns"] = 'add_columns'] = "AddColumns";
        KeysEnum[KeysEnum["EditColumns"] = 'edit_columns'] = "EditColumns";
        KeysEnum[KeysEnum["Filters"] = 'filters'] = "Filters";
        KeysEnum[KeysEnum["Permissions"] = 'permissions'] = "Permissions";
        KeysEnum[KeysEnum["AddTitle"] = 'add_title'] = "AddTitle";
        KeysEnum[KeysEnum["EditTitle"] = 'edit_title'] = "EditTitle";
        KeysEnum[KeysEnum["None"] = 'none'] = "None";
    })(KeysEnum = GetInfoSchema.KeysEnum || (GetInfoSchema.KeysEnum = {}));
})(GetInfoSchema = exports.GetInfoSchema || (exports.GetInfoSchema = {}));
/**
 * @export
 * @namespace GetItemSchema
 */
var GetItemSchema;
(function (GetItemSchema) {
    /**
     * @export
     * @enum {string}
     */
    let KeysEnum;
    (function (KeysEnum) {
        KeysEnum[KeysEnum["ShowColumns"] = 'show_columns'] = "ShowColumns";
        KeysEnum[KeysEnum["DescriptionColumns"] = 'description_columns'] = "DescriptionColumns";
        KeysEnum[KeysEnum["LabelColumns"] = 'label_columns'] = "LabelColumns";
        KeysEnum[KeysEnum["ShowTitle"] = 'show_title'] = "ShowTitle";
        KeysEnum[KeysEnum["None"] = 'none'] = "None";
    })(KeysEnum = GetItemSchema.KeysEnum || (GetItemSchema.KeysEnum = {}));
})(GetItemSchema = exports.GetItemSchema || (exports.GetItemSchema = {}));
/**
 * @export
 * @namespace GetListSchema
 */
var GetListSchema;
(function (GetListSchema) {
    /**
     * @export
     * @enum {string}
     */
    let KeysEnum;
    (function (KeysEnum) {
        KeysEnum[KeysEnum["ListColumns"] = 'list_columns'] = "ListColumns";
        KeysEnum[KeysEnum["OrderColumns"] = 'order_columns'] = "OrderColumns";
        KeysEnum[KeysEnum["LabelColumns"] = 'label_columns'] = "LabelColumns";
        KeysEnum[KeysEnum["DescriptionColumns"] = 'description_columns'] = "DescriptionColumns";
        KeysEnum[KeysEnum["ListTitle"] = 'list_title'] = "ListTitle";
        KeysEnum[KeysEnum["None"] = 'none'] = "None";
    })(KeysEnum = GetListSchema.KeysEnum || (GetListSchema.KeysEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let OrderDirectionEnum;
    (function (OrderDirectionEnum) {
        OrderDirectionEnum[OrderDirectionEnum["Asc"] = 'asc'] = "Asc";
        OrderDirectionEnum[OrderDirectionEnum["Desc"] = 'desc'] = "Desc";
    })(OrderDirectionEnum = GetListSchema.OrderDirectionEnum || (GetListSchema.OrderDirectionEnum = {}));
})(GetListSchema = exports.GetListSchema || (exports.GetListSchema = {}));
/**
 * @export
 * @namespace InlineResponse410Errors
 */
var InlineResponse410Errors;
(function (InlineResponse410Errors) {
    /**
     * @export
     * @enum {string}
     */
    let ErrorTypeEnum;
    (function (ErrorTypeEnum) {
        ErrorTypeEnum[ErrorTypeEnum["FRONTENDCSRFERROR"] = 'FRONTEND_CSRF_ERROR'] = "FRONTENDCSRFERROR";
        ErrorTypeEnum[ErrorTypeEnum["FRONTENDNETWORKERROR"] = 'FRONTEND_NETWORK_ERROR'] = "FRONTENDNETWORKERROR";
        ErrorTypeEnum[ErrorTypeEnum["FRONTENDTIMEOUTERROR"] = 'FRONTEND_TIMEOUT_ERROR'] = "FRONTENDTIMEOUTERROR";
        ErrorTypeEnum[ErrorTypeEnum["GENERICDBENGINEERROR"] = 'GENERIC_DB_ENGINE_ERROR'] = "GENERICDBENGINEERROR";
        ErrorTypeEnum[ErrorTypeEnum["COLUMNDOESNOTEXISTERROR"] = 'COLUMN_DOES_NOT_EXIST_ERROR'] = "COLUMNDOESNOTEXISTERROR";
        ErrorTypeEnum[ErrorTypeEnum["TABLEDOESNOTEXISTERROR"] = 'TABLE_DOES_NOT_EXIST_ERROR'] = "TABLEDOESNOTEXISTERROR";
        ErrorTypeEnum[ErrorTypeEnum["SCHEMADOESNOTEXISTERROR"] = 'SCHEMA_DOES_NOT_EXIST_ERROR'] = "SCHEMADOESNOTEXISTERROR";
        ErrorTypeEnum[ErrorTypeEnum["CONNECTIONINVALIDUSERNAMEERROR"] = 'CONNECTION_INVALID_USERNAME_ERROR'] = "CONNECTIONINVALIDUSERNAMEERROR";
        ErrorTypeEnum[ErrorTypeEnum["CONNECTIONINVALIDPASSWORDERROR"] = 'CONNECTION_INVALID_PASSWORD_ERROR'] = "CONNECTIONINVALIDPASSWORDERROR";
        ErrorTypeEnum[ErrorTypeEnum["CONNECTIONINVALIDHOSTNAMEERROR"] = 'CONNECTION_INVALID_HOSTNAME_ERROR'] = "CONNECTIONINVALIDHOSTNAMEERROR";
        ErrorTypeEnum[ErrorTypeEnum["CONNECTIONPORTCLOSEDERROR"] = 'CONNECTION_PORT_CLOSED_ERROR'] = "CONNECTIONPORTCLOSEDERROR";
        ErrorTypeEnum[ErrorTypeEnum["CONNECTIONINVALIDPORTERROR"] = 'CONNECTION_INVALID_PORT_ERROR'] = "CONNECTIONINVALIDPORTERROR";
        ErrorTypeEnum[ErrorTypeEnum["CONNECTIONHOSTDOWNERROR"] = 'CONNECTION_HOST_DOWN_ERROR'] = "CONNECTIONHOSTDOWNERROR";
        ErrorTypeEnum[ErrorTypeEnum["CONNECTIONACCESSDENIEDERROR"] = 'CONNECTION_ACCESS_DENIED_ERROR'] = "CONNECTIONACCESSDENIEDERROR";
        ErrorTypeEnum[ErrorTypeEnum["CONNECTIONUNKNOWNDATABASEERROR"] = 'CONNECTION_UNKNOWN_DATABASE_ERROR'] = "CONNECTIONUNKNOWNDATABASEERROR";
        ErrorTypeEnum[ErrorTypeEnum["CONNECTIONDATABASEPERMISSIONSERROR"] = 'CONNECTION_DATABASE_PERMISSIONS_ERROR'] = "CONNECTIONDATABASEPERMISSIONSERROR";
        ErrorTypeEnum[ErrorTypeEnum["CONNECTIONMISSINGPARAMETERSERROR"] = 'CONNECTION_MISSING_PARAMETERS_ERROR'] = "CONNECTIONMISSINGPARAMETERSERROR";
        ErrorTypeEnum[ErrorTypeEnum["OBJECTDOESNOTEXISTERROR"] = 'OBJECT_DOES_NOT_EXIST_ERROR'] = "OBJECTDOESNOTEXISTERROR";
        ErrorTypeEnum[ErrorTypeEnum["SYNTAXERROR"] = 'SYNTAX_ERROR'] = "SYNTAXERROR";
        ErrorTypeEnum[ErrorTypeEnum["CONNECTIONDATABASETIMEOUT"] = 'CONNECTION_DATABASE_TIMEOUT'] = "CONNECTIONDATABASETIMEOUT";
        ErrorTypeEnum[ErrorTypeEnum["VIZGETDFERROR"] = 'VIZ_GET_DF_ERROR'] = "VIZGETDFERROR";
        ErrorTypeEnum[ErrorTypeEnum["UNKNOWNDATASOURCETYPEERROR"] = 'UNKNOWN_DATASOURCE_TYPE_ERROR'] = "UNKNOWNDATASOURCETYPEERROR";
        ErrorTypeEnum[ErrorTypeEnum["FAILEDFETCHINGDATASOURCEINFOERROR"] = 'FAILED_FETCHING_DATASOURCE_INFO_ERROR'] = "FAILEDFETCHINGDATASOURCEINFOERROR";
        ErrorTypeEnum[ErrorTypeEnum["TABLESECURITYACCESSERROR"] = 'TABLE_SECURITY_ACCESS_ERROR'] = "TABLESECURITYACCESSERROR";
        ErrorTypeEnum[ErrorTypeEnum["DATASOURCESECURITYACCESSERROR"] = 'DATASOURCE_SECURITY_ACCESS_ERROR'] = "DATASOURCESECURITYACCESSERROR";
        ErrorTypeEnum[ErrorTypeEnum["DATABASESECURITYACCESSERROR"] = 'DATABASE_SECURITY_ACCESS_ERROR'] = "DATABASESECURITYACCESSERROR";
        ErrorTypeEnum[ErrorTypeEnum["QUERYSECURITYACCESSERROR"] = 'QUERY_SECURITY_ACCESS_ERROR'] = "QUERYSECURITYACCESSERROR";
        ErrorTypeEnum[ErrorTypeEnum["MISSINGOWNERSHIPERROR"] = 'MISSING_OWNERSHIP_ERROR'] = "MISSINGOWNERSHIPERROR";
        ErrorTypeEnum[ErrorTypeEnum["USERACTIVITYSECURITYACCESSERROR"] = 'USER_ACTIVITY_SECURITY_ACCESS_ERROR'] = "USERACTIVITYSECURITYACCESSERROR";
        ErrorTypeEnum[ErrorTypeEnum["BACKENDTIMEOUTERROR"] = 'BACKEND_TIMEOUT_ERROR'] = "BACKENDTIMEOUTERROR";
        ErrorTypeEnum[ErrorTypeEnum["DATABASENOTFOUNDERROR"] = 'DATABASE_NOT_FOUND_ERROR'] = "DATABASENOTFOUNDERROR";
        ErrorTypeEnum[ErrorTypeEnum["MISSINGTEMPLATEPARAMSERROR"] = 'MISSING_TEMPLATE_PARAMS_ERROR'] = "MISSINGTEMPLATEPARAMSERROR";
        ErrorTypeEnum[ErrorTypeEnum["INVALIDTEMPLATEPARAMSERROR"] = 'INVALID_TEMPLATE_PARAMS_ERROR'] = "INVALIDTEMPLATEPARAMSERROR";
        ErrorTypeEnum[ErrorTypeEnum["RESULTSBACKENDNOTCONFIGUREDERROR"] = 'RESULTS_BACKEND_NOT_CONFIGURED_ERROR'] = "RESULTSBACKENDNOTCONFIGUREDERROR";
        ErrorTypeEnum[ErrorTypeEnum["DMLNOTALLOWEDERROR"] = 'DML_NOT_ALLOWED_ERROR'] = "DMLNOTALLOWEDERROR";
        ErrorTypeEnum[ErrorTypeEnum["INVALIDCTASQUERYERROR"] = 'INVALID_CTAS_QUERY_ERROR'] = "INVALIDCTASQUERYERROR";
        ErrorTypeEnum[ErrorTypeEnum["INVALIDCVASQUERYERROR"] = 'INVALID_CVAS_QUERY_ERROR'] = "INVALIDCVASQUERYERROR";
        ErrorTypeEnum[ErrorTypeEnum["SQLLABTIMEOUTERROR"] = 'SQLLAB_TIMEOUT_ERROR'] = "SQLLABTIMEOUTERROR";
        ErrorTypeEnum[ErrorTypeEnum["RESULTSBACKENDERROR"] = 'RESULTS_BACKEND_ERROR'] = "RESULTSBACKENDERROR";
        ErrorTypeEnum[ErrorTypeEnum["ASYNCWORKERSERROR"] = 'ASYNC_WORKERS_ERROR'] = "ASYNCWORKERSERROR";
        ErrorTypeEnum[ErrorTypeEnum["ADHOCSUBQUERYNOTALLOWEDERROR"] = 'ADHOC_SUBQUERY_NOT_ALLOWED_ERROR'] = "ADHOCSUBQUERYNOTALLOWEDERROR";
        ErrorTypeEnum[ErrorTypeEnum["GENERICCOMMANDERROR"] = 'GENERIC_COMMAND_ERROR'] = "GENERICCOMMANDERROR";
        ErrorTypeEnum[ErrorTypeEnum["GENERICBACKENDERROR"] = 'GENERIC_BACKEND_ERROR'] = "GENERICBACKENDERROR";
        ErrorTypeEnum[ErrorTypeEnum["INVALIDPAYLOADFORMATERROR"] = 'INVALID_PAYLOAD_FORMAT_ERROR'] = "INVALIDPAYLOADFORMATERROR";
        ErrorTypeEnum[ErrorTypeEnum["INVALIDPAYLOADSCHEMAERROR"] = 'INVALID_PAYLOAD_SCHEMA_ERROR'] = "INVALIDPAYLOADSCHEMAERROR";
        ErrorTypeEnum[ErrorTypeEnum["REPORTNOTIFICATIONERROR"] = 'REPORT_NOTIFICATION_ERROR'] = "REPORTNOTIFICATIONERROR";
    })(ErrorTypeEnum = InlineResponse410Errors.ErrorTypeEnum || (InlineResponse410Errors.ErrorTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let LevelEnum;
    (function (LevelEnum) {
        LevelEnum[LevelEnum["Info"] = 'info'] = "Info";
        LevelEnum[LevelEnum["Warning"] = 'warning'] = "Warning";
        LevelEnum[LevelEnum["Error"] = 'error'] = "Error";
    })(LevelEnum = InlineResponse410Errors.LevelEnum || (InlineResponse410Errors.LevelEnum = {}));
})(InlineResponse410Errors = exports.InlineResponse410Errors || (exports.InlineResponse410Errors = {}));
/**
 * @export
 * @namespace RLSRestApiGet
 */
var RLSRestApiGet;
(function (RLSRestApiGet) {
    /**
     * @export
     * @enum {string}
     */
    let FilterTypeEnum;
    (function (FilterTypeEnum) {
        FilterTypeEnum[FilterTypeEnum["Regular"] = 'Regular'] = "Regular";
        FilterTypeEnum[FilterTypeEnum["Base"] = 'Base'] = "Base";
    })(FilterTypeEnum = RLSRestApiGet.FilterTypeEnum || (RLSRestApiGet.FilterTypeEnum = {}));
})(RLSRestApiGet = exports.RLSRestApiGet || (exports.RLSRestApiGet = {}));
/**
 * @export
 * @namespace RLSRestApiGetList
 */
var RLSRestApiGetList;
(function (RLSRestApiGetList) {
    /**
     * @export
     * @enum {string}
     */
    let FilterTypeEnum;
    (function (FilterTypeEnum) {
        FilterTypeEnum[FilterTypeEnum["Regular"] = 'Regular'] = "Regular";
        FilterTypeEnum[FilterTypeEnum["Base"] = 'Base'] = "Base";
    })(FilterTypeEnum = RLSRestApiGetList.FilterTypeEnum || (RLSRestApiGetList.FilterTypeEnum = {}));
})(RLSRestApiGetList = exports.RLSRestApiGetList || (exports.RLSRestApiGetList = {}));
/**
 * @export
 * @namespace RLSRestApiPost
 */
var RLSRestApiPost;
(function (RLSRestApiPost) {
    /**
     * @export
     * @enum {string}
     */
    let FilterTypeEnum;
    (function (FilterTypeEnum) {
        FilterTypeEnum[FilterTypeEnum["Regular"] = 'Regular'] = "Regular";
        FilterTypeEnum[FilterTypeEnum["Base"] = 'Base'] = "Base";
    })(FilterTypeEnum = RLSRestApiPost.FilterTypeEnum || (RLSRestApiPost.FilterTypeEnum = {}));
})(RLSRestApiPost = exports.RLSRestApiPost || (exports.RLSRestApiPost = {}));
/**
 * @export
 * @namespace RLSRestApiPut
 */
var RLSRestApiPut;
(function (RLSRestApiPut) {
    /**
     * @export
     * @enum {string}
     */
    let FilterTypeEnum;
    (function (FilterTypeEnum) {
        FilterTypeEnum[FilterTypeEnum["Regular"] = 'Regular'] = "Regular";
        FilterTypeEnum[FilterTypeEnum["Base"] = 'Base'] = "Base";
    })(FilterTypeEnum = RLSRestApiPut.FilterTypeEnum || (RLSRestApiPut.FilterTypeEnum = {}));
})(RLSRestApiPut = exports.RLSRestApiPut || (exports.RLSRestApiPut = {}));
/**
 * @export
 * @namespace ReportRecipient
 */
var ReportRecipient;
(function (ReportRecipient) {
    /**
     * @export
     * @enum {string}
     */
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Email"] = 'Email'] = "Email";
        TypeEnum[TypeEnum["Slack"] = 'Slack'] = "Slack";
    })(TypeEnum = ReportRecipient.TypeEnum || (ReportRecipient.TypeEnum = {}));
})(ReportRecipient = exports.ReportRecipient || (exports.ReportRecipient = {}));
/**
 * @export
 * @namespace ReportScheduleRestApiPost
 */
var ReportScheduleRestApiPost;
(function (ReportScheduleRestApiPost) {
    /**
     * @export
     * @enum {string}
     */
    let ReportFormatEnum;
    (function (ReportFormatEnum) {
        ReportFormatEnum[ReportFormatEnum["PNG"] = 'PNG'] = "PNG";
        ReportFormatEnum[ReportFormatEnum["CSV"] = 'CSV'] = "CSV";
        ReportFormatEnum[ReportFormatEnum["TEXT"] = 'TEXT'] = "TEXT";
    })(ReportFormatEnum = ReportScheduleRestApiPost.ReportFormatEnum || (ReportScheduleRestApiPost.ReportFormatEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let TimezoneEnum;
    (function (TimezoneEnum) {
        TimezoneEnum[TimezoneEnum["AfricaAbidjan"] = 'Africa/Abidjan'] = "AfricaAbidjan";
        TimezoneEnum[TimezoneEnum["AfricaAccra"] = 'Africa/Accra'] = "AfricaAccra";
        TimezoneEnum[TimezoneEnum["AfricaAddisAbaba"] = 'Africa/Addis_Ababa'] = "AfricaAddisAbaba";
        TimezoneEnum[TimezoneEnum["AfricaAlgiers"] = 'Africa/Algiers'] = "AfricaAlgiers";
        TimezoneEnum[TimezoneEnum["AfricaAsmara"] = 'Africa/Asmara'] = "AfricaAsmara";
        TimezoneEnum[TimezoneEnum["AfricaAsmera"] = 'Africa/Asmera'] = "AfricaAsmera";
        TimezoneEnum[TimezoneEnum["AfricaBamako"] = 'Africa/Bamako'] = "AfricaBamako";
        TimezoneEnum[TimezoneEnum["AfricaBangui"] = 'Africa/Bangui'] = "AfricaBangui";
        TimezoneEnum[TimezoneEnum["AfricaBanjul"] = 'Africa/Banjul'] = "AfricaBanjul";
        TimezoneEnum[TimezoneEnum["AfricaBissau"] = 'Africa/Bissau'] = "AfricaBissau";
        TimezoneEnum[TimezoneEnum["AfricaBlantyre"] = 'Africa/Blantyre'] = "AfricaBlantyre";
        TimezoneEnum[TimezoneEnum["AfricaBrazzaville"] = 'Africa/Brazzaville'] = "AfricaBrazzaville";
        TimezoneEnum[TimezoneEnum["AfricaBujumbura"] = 'Africa/Bujumbura'] = "AfricaBujumbura";
        TimezoneEnum[TimezoneEnum["AfricaCairo"] = 'Africa/Cairo'] = "AfricaCairo";
        TimezoneEnum[TimezoneEnum["AfricaCasablanca"] = 'Africa/Casablanca'] = "AfricaCasablanca";
        TimezoneEnum[TimezoneEnum["AfricaCeuta"] = 'Africa/Ceuta'] = "AfricaCeuta";
        TimezoneEnum[TimezoneEnum["AfricaConakry"] = 'Africa/Conakry'] = "AfricaConakry";
        TimezoneEnum[TimezoneEnum["AfricaDakar"] = 'Africa/Dakar'] = "AfricaDakar";
        TimezoneEnum[TimezoneEnum["AfricaDarEsSalaam"] = 'Africa/Dar_es_Salaam'] = "AfricaDarEsSalaam";
        TimezoneEnum[TimezoneEnum["AfricaDjibouti"] = 'Africa/Djibouti'] = "AfricaDjibouti";
        TimezoneEnum[TimezoneEnum["AfricaDouala"] = 'Africa/Douala'] = "AfricaDouala";
        TimezoneEnum[TimezoneEnum["AfricaElAaiun"] = 'Africa/El_Aaiun'] = "AfricaElAaiun";
        TimezoneEnum[TimezoneEnum["AfricaFreetown"] = 'Africa/Freetown'] = "AfricaFreetown";
        TimezoneEnum[TimezoneEnum["AfricaGaborone"] = 'Africa/Gaborone'] = "AfricaGaborone";
        TimezoneEnum[TimezoneEnum["AfricaHarare"] = 'Africa/Harare'] = "AfricaHarare";
        TimezoneEnum[TimezoneEnum["AfricaJohannesburg"] = 'Africa/Johannesburg'] = "AfricaJohannesburg";
        TimezoneEnum[TimezoneEnum["AfricaJuba"] = 'Africa/Juba'] = "AfricaJuba";
        TimezoneEnum[TimezoneEnum["AfricaKampala"] = 'Africa/Kampala'] = "AfricaKampala";
        TimezoneEnum[TimezoneEnum["AfricaKhartoum"] = 'Africa/Khartoum'] = "AfricaKhartoum";
        TimezoneEnum[TimezoneEnum["AfricaKigali"] = 'Africa/Kigali'] = "AfricaKigali";
        TimezoneEnum[TimezoneEnum["AfricaKinshasa"] = 'Africa/Kinshasa'] = "AfricaKinshasa";
        TimezoneEnum[TimezoneEnum["AfricaLagos"] = 'Africa/Lagos'] = "AfricaLagos";
        TimezoneEnum[TimezoneEnum["AfricaLibreville"] = 'Africa/Libreville'] = "AfricaLibreville";
        TimezoneEnum[TimezoneEnum["AfricaLome"] = 'Africa/Lome'] = "AfricaLome";
        TimezoneEnum[TimezoneEnum["AfricaLuanda"] = 'Africa/Luanda'] = "AfricaLuanda";
        TimezoneEnum[TimezoneEnum["AfricaLubumbashi"] = 'Africa/Lubumbashi'] = "AfricaLubumbashi";
        TimezoneEnum[TimezoneEnum["AfricaLusaka"] = 'Africa/Lusaka'] = "AfricaLusaka";
        TimezoneEnum[TimezoneEnum["AfricaMalabo"] = 'Africa/Malabo'] = "AfricaMalabo";
        TimezoneEnum[TimezoneEnum["AfricaMaputo"] = 'Africa/Maputo'] = "AfricaMaputo";
        TimezoneEnum[TimezoneEnum["AfricaMaseru"] = 'Africa/Maseru'] = "AfricaMaseru";
        TimezoneEnum[TimezoneEnum["AfricaMbabane"] = 'Africa/Mbabane'] = "AfricaMbabane";
        TimezoneEnum[TimezoneEnum["AfricaMogadishu"] = 'Africa/Mogadishu'] = "AfricaMogadishu";
        TimezoneEnum[TimezoneEnum["AfricaMonrovia"] = 'Africa/Monrovia'] = "AfricaMonrovia";
        TimezoneEnum[TimezoneEnum["AfricaNairobi"] = 'Africa/Nairobi'] = "AfricaNairobi";
        TimezoneEnum[TimezoneEnum["AfricaNdjamena"] = 'Africa/Ndjamena'] = "AfricaNdjamena";
        TimezoneEnum[TimezoneEnum["AfricaNiamey"] = 'Africa/Niamey'] = "AfricaNiamey";
        TimezoneEnum[TimezoneEnum["AfricaNouakchott"] = 'Africa/Nouakchott'] = "AfricaNouakchott";
        TimezoneEnum[TimezoneEnum["AfricaOuagadougou"] = 'Africa/Ouagadougou'] = "AfricaOuagadougou";
        TimezoneEnum[TimezoneEnum["AfricaPortoNovo"] = 'Africa/Porto-Novo'] = "AfricaPortoNovo";
        TimezoneEnum[TimezoneEnum["AfricaSaoTome"] = 'Africa/Sao_Tome'] = "AfricaSaoTome";
        TimezoneEnum[TimezoneEnum["AfricaTimbuktu"] = 'Africa/Timbuktu'] = "AfricaTimbuktu";
        TimezoneEnum[TimezoneEnum["AfricaTripoli"] = 'Africa/Tripoli'] = "AfricaTripoli";
        TimezoneEnum[TimezoneEnum["AfricaTunis"] = 'Africa/Tunis'] = "AfricaTunis";
        TimezoneEnum[TimezoneEnum["AfricaWindhoek"] = 'Africa/Windhoek'] = "AfricaWindhoek";
        TimezoneEnum[TimezoneEnum["AmericaAdak"] = 'America/Adak'] = "AmericaAdak";
        TimezoneEnum[TimezoneEnum["AmericaAnchorage"] = 'America/Anchorage'] = "AmericaAnchorage";
        TimezoneEnum[TimezoneEnum["AmericaAnguilla"] = 'America/Anguilla'] = "AmericaAnguilla";
        TimezoneEnum[TimezoneEnum["AmericaAntigua"] = 'America/Antigua'] = "AmericaAntigua";
        TimezoneEnum[TimezoneEnum["AmericaAraguaina"] = 'America/Araguaina'] = "AmericaAraguaina";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaBuenosAires"] = 'America/Argentina/Buenos_Aires'] = "AmericaArgentinaBuenosAires";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaCatamarca"] = 'America/Argentina/Catamarca'] = "AmericaArgentinaCatamarca";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaComodRivadavia"] = 'America/Argentina/ComodRivadavia'] = "AmericaArgentinaComodRivadavia";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaCordoba"] = 'America/Argentina/Cordoba'] = "AmericaArgentinaCordoba";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaJujuy"] = 'America/Argentina/Jujuy'] = "AmericaArgentinaJujuy";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaLaRioja"] = 'America/Argentina/La_Rioja'] = "AmericaArgentinaLaRioja";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaMendoza"] = 'America/Argentina/Mendoza'] = "AmericaArgentinaMendoza";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaRioGallegos"] = 'America/Argentina/Rio_Gallegos'] = "AmericaArgentinaRioGallegos";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaSalta"] = 'America/Argentina/Salta'] = "AmericaArgentinaSalta";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaSanJuan"] = 'America/Argentina/San_Juan'] = "AmericaArgentinaSanJuan";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaSanLuis"] = 'America/Argentina/San_Luis'] = "AmericaArgentinaSanLuis";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaTucuman"] = 'America/Argentina/Tucuman'] = "AmericaArgentinaTucuman";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaUshuaia"] = 'America/Argentina/Ushuaia'] = "AmericaArgentinaUshuaia";
        TimezoneEnum[TimezoneEnum["AmericaAruba"] = 'America/Aruba'] = "AmericaAruba";
        TimezoneEnum[TimezoneEnum["AmericaAsuncion"] = 'America/Asuncion'] = "AmericaAsuncion";
        TimezoneEnum[TimezoneEnum["AmericaAtikokan"] = 'America/Atikokan'] = "AmericaAtikokan";
        TimezoneEnum[TimezoneEnum["AmericaAtka"] = 'America/Atka'] = "AmericaAtka";
        TimezoneEnum[TimezoneEnum["AmericaBahia"] = 'America/Bahia'] = "AmericaBahia";
        TimezoneEnum[TimezoneEnum["AmericaBahiaBanderas"] = 'America/Bahia_Banderas'] = "AmericaBahiaBanderas";
        TimezoneEnum[TimezoneEnum["AmericaBarbados"] = 'America/Barbados'] = "AmericaBarbados";
        TimezoneEnum[TimezoneEnum["AmericaBelem"] = 'America/Belem'] = "AmericaBelem";
        TimezoneEnum[TimezoneEnum["AmericaBelize"] = 'America/Belize'] = "AmericaBelize";
        TimezoneEnum[TimezoneEnum["AmericaBlancSablon"] = 'America/Blanc-Sablon'] = "AmericaBlancSablon";
        TimezoneEnum[TimezoneEnum["AmericaBoaVista"] = 'America/Boa_Vista'] = "AmericaBoaVista";
        TimezoneEnum[TimezoneEnum["AmericaBogota"] = 'America/Bogota'] = "AmericaBogota";
        TimezoneEnum[TimezoneEnum["AmericaBoise"] = 'America/Boise'] = "AmericaBoise";
        TimezoneEnum[TimezoneEnum["AmericaBuenosAires"] = 'America/Buenos_Aires'] = "AmericaBuenosAires";
        TimezoneEnum[TimezoneEnum["AmericaCambridgeBay"] = 'America/Cambridge_Bay'] = "AmericaCambridgeBay";
        TimezoneEnum[TimezoneEnum["AmericaCampoGrande"] = 'America/Campo_Grande'] = "AmericaCampoGrande";
        TimezoneEnum[TimezoneEnum["AmericaCancun"] = 'America/Cancun'] = "AmericaCancun";
        TimezoneEnum[TimezoneEnum["AmericaCaracas"] = 'America/Caracas'] = "AmericaCaracas";
        TimezoneEnum[TimezoneEnum["AmericaCatamarca"] = 'America/Catamarca'] = "AmericaCatamarca";
        TimezoneEnum[TimezoneEnum["AmericaCayenne"] = 'America/Cayenne'] = "AmericaCayenne";
        TimezoneEnum[TimezoneEnum["AmericaCayman"] = 'America/Cayman'] = "AmericaCayman";
        TimezoneEnum[TimezoneEnum["AmericaChicago"] = 'America/Chicago'] = "AmericaChicago";
        TimezoneEnum[TimezoneEnum["AmericaChihuahua"] = 'America/Chihuahua'] = "AmericaChihuahua";
        TimezoneEnum[TimezoneEnum["AmericaCoralHarbour"] = 'America/Coral_Harbour'] = "AmericaCoralHarbour";
        TimezoneEnum[TimezoneEnum["AmericaCordoba"] = 'America/Cordoba'] = "AmericaCordoba";
        TimezoneEnum[TimezoneEnum["AmericaCostaRica"] = 'America/Costa_Rica'] = "AmericaCostaRica";
        TimezoneEnum[TimezoneEnum["AmericaCreston"] = 'America/Creston'] = "AmericaCreston";
        TimezoneEnum[TimezoneEnum["AmericaCuiaba"] = 'America/Cuiaba'] = "AmericaCuiaba";
        TimezoneEnum[TimezoneEnum["AmericaCuracao"] = 'America/Curacao'] = "AmericaCuracao";
        TimezoneEnum[TimezoneEnum["AmericaDanmarkshavn"] = 'America/Danmarkshavn'] = "AmericaDanmarkshavn";
        TimezoneEnum[TimezoneEnum["AmericaDawson"] = 'America/Dawson'] = "AmericaDawson";
        TimezoneEnum[TimezoneEnum["AmericaDawsonCreek"] = 'America/Dawson_Creek'] = "AmericaDawsonCreek";
        TimezoneEnum[TimezoneEnum["AmericaDenver"] = 'America/Denver'] = "AmericaDenver";
        TimezoneEnum[TimezoneEnum["AmericaDetroit"] = 'America/Detroit'] = "AmericaDetroit";
        TimezoneEnum[TimezoneEnum["AmericaDominica"] = 'America/Dominica'] = "AmericaDominica";
        TimezoneEnum[TimezoneEnum["AmericaEdmonton"] = 'America/Edmonton'] = "AmericaEdmonton";
        TimezoneEnum[TimezoneEnum["AmericaEirunepe"] = 'America/Eirunepe'] = "AmericaEirunepe";
        TimezoneEnum[TimezoneEnum["AmericaElSalvador"] = 'America/El_Salvador'] = "AmericaElSalvador";
        TimezoneEnum[TimezoneEnum["AmericaEnsenada"] = 'America/Ensenada'] = "AmericaEnsenada";
        TimezoneEnum[TimezoneEnum["AmericaFortNelson"] = 'America/Fort_Nelson'] = "AmericaFortNelson";
        TimezoneEnum[TimezoneEnum["AmericaFortWayne"] = 'America/Fort_Wayne'] = "AmericaFortWayne";
        TimezoneEnum[TimezoneEnum["AmericaFortaleza"] = 'America/Fortaleza'] = "AmericaFortaleza";
        TimezoneEnum[TimezoneEnum["AmericaGlaceBay"] = 'America/Glace_Bay'] = "AmericaGlaceBay";
        TimezoneEnum[TimezoneEnum["AmericaGodthab"] = 'America/Godthab'] = "AmericaGodthab";
        TimezoneEnum[TimezoneEnum["AmericaGooseBay"] = 'America/Goose_Bay'] = "AmericaGooseBay";
        TimezoneEnum[TimezoneEnum["AmericaGrandTurk"] = 'America/Grand_Turk'] = "AmericaGrandTurk";
        TimezoneEnum[TimezoneEnum["AmericaGrenada"] = 'America/Grenada'] = "AmericaGrenada";
        TimezoneEnum[TimezoneEnum["AmericaGuadeloupe"] = 'America/Guadeloupe'] = "AmericaGuadeloupe";
        TimezoneEnum[TimezoneEnum["AmericaGuatemala"] = 'America/Guatemala'] = "AmericaGuatemala";
        TimezoneEnum[TimezoneEnum["AmericaGuayaquil"] = 'America/Guayaquil'] = "AmericaGuayaquil";
        TimezoneEnum[TimezoneEnum["AmericaGuyana"] = 'America/Guyana'] = "AmericaGuyana";
        TimezoneEnum[TimezoneEnum["AmericaHalifax"] = 'America/Halifax'] = "AmericaHalifax";
        TimezoneEnum[TimezoneEnum["AmericaHavana"] = 'America/Havana'] = "AmericaHavana";
        TimezoneEnum[TimezoneEnum["AmericaHermosillo"] = 'America/Hermosillo'] = "AmericaHermosillo";
        TimezoneEnum[TimezoneEnum["AmericaIndianaIndianapolis"] = 'America/Indiana/Indianapolis'] = "AmericaIndianaIndianapolis";
        TimezoneEnum[TimezoneEnum["AmericaIndianaKnox"] = 'America/Indiana/Knox'] = "AmericaIndianaKnox";
        TimezoneEnum[TimezoneEnum["AmericaIndianaMarengo"] = 'America/Indiana/Marengo'] = "AmericaIndianaMarengo";
        TimezoneEnum[TimezoneEnum["AmericaIndianaPetersburg"] = 'America/Indiana/Petersburg'] = "AmericaIndianaPetersburg";
        TimezoneEnum[TimezoneEnum["AmericaIndianaTellCity"] = 'America/Indiana/Tell_City'] = "AmericaIndianaTellCity";
        TimezoneEnum[TimezoneEnum["AmericaIndianaVevay"] = 'America/Indiana/Vevay'] = "AmericaIndianaVevay";
        TimezoneEnum[TimezoneEnum["AmericaIndianaVincennes"] = 'America/Indiana/Vincennes'] = "AmericaIndianaVincennes";
        TimezoneEnum[TimezoneEnum["AmericaIndianaWinamac"] = 'America/Indiana/Winamac'] = "AmericaIndianaWinamac";
        TimezoneEnum[TimezoneEnum["AmericaIndianapolis"] = 'America/Indianapolis'] = "AmericaIndianapolis";
        TimezoneEnum[TimezoneEnum["AmericaInuvik"] = 'America/Inuvik'] = "AmericaInuvik";
        TimezoneEnum[TimezoneEnum["AmericaIqaluit"] = 'America/Iqaluit'] = "AmericaIqaluit";
        TimezoneEnum[TimezoneEnum["AmericaJamaica"] = 'America/Jamaica'] = "AmericaJamaica";
        TimezoneEnum[TimezoneEnum["AmericaJujuy"] = 'America/Jujuy'] = "AmericaJujuy";
        TimezoneEnum[TimezoneEnum["AmericaJuneau"] = 'America/Juneau'] = "AmericaJuneau";
        TimezoneEnum[TimezoneEnum["AmericaKentuckyLouisville"] = 'America/Kentucky/Louisville'] = "AmericaKentuckyLouisville";
        TimezoneEnum[TimezoneEnum["AmericaKentuckyMonticello"] = 'America/Kentucky/Monticello'] = "AmericaKentuckyMonticello";
        TimezoneEnum[TimezoneEnum["AmericaKnoxIN"] = 'America/Knox_IN'] = "AmericaKnoxIN";
        TimezoneEnum[TimezoneEnum["AmericaKralendijk"] = 'America/Kralendijk'] = "AmericaKralendijk";
        TimezoneEnum[TimezoneEnum["AmericaLaPaz"] = 'America/La_Paz'] = "AmericaLaPaz";
        TimezoneEnum[TimezoneEnum["AmericaLima"] = 'America/Lima'] = "AmericaLima";
        TimezoneEnum[TimezoneEnum["AmericaLosAngeles"] = 'America/Los_Angeles'] = "AmericaLosAngeles";
        TimezoneEnum[TimezoneEnum["AmericaLouisville"] = 'America/Louisville'] = "AmericaLouisville";
        TimezoneEnum[TimezoneEnum["AmericaLowerPrinces"] = 'America/Lower_Princes'] = "AmericaLowerPrinces";
        TimezoneEnum[TimezoneEnum["AmericaMaceio"] = 'America/Maceio'] = "AmericaMaceio";
        TimezoneEnum[TimezoneEnum["AmericaManagua"] = 'America/Managua'] = "AmericaManagua";
        TimezoneEnum[TimezoneEnum["AmericaManaus"] = 'America/Manaus'] = "AmericaManaus";
        TimezoneEnum[TimezoneEnum["AmericaMarigot"] = 'America/Marigot'] = "AmericaMarigot";
        TimezoneEnum[TimezoneEnum["AmericaMartinique"] = 'America/Martinique'] = "AmericaMartinique";
        TimezoneEnum[TimezoneEnum["AmericaMatamoros"] = 'America/Matamoros'] = "AmericaMatamoros";
        TimezoneEnum[TimezoneEnum["AmericaMazatlan"] = 'America/Mazatlan'] = "AmericaMazatlan";
        TimezoneEnum[TimezoneEnum["AmericaMendoza"] = 'America/Mendoza'] = "AmericaMendoza";
        TimezoneEnum[TimezoneEnum["AmericaMenominee"] = 'America/Menominee'] = "AmericaMenominee";
        TimezoneEnum[TimezoneEnum["AmericaMerida"] = 'America/Merida'] = "AmericaMerida";
        TimezoneEnum[TimezoneEnum["AmericaMetlakatla"] = 'America/Metlakatla'] = "AmericaMetlakatla";
        TimezoneEnum[TimezoneEnum["AmericaMexicoCity"] = 'America/Mexico_City'] = "AmericaMexicoCity";
        TimezoneEnum[TimezoneEnum["AmericaMiquelon"] = 'America/Miquelon'] = "AmericaMiquelon";
        TimezoneEnum[TimezoneEnum["AmericaMoncton"] = 'America/Moncton'] = "AmericaMoncton";
        TimezoneEnum[TimezoneEnum["AmericaMonterrey"] = 'America/Monterrey'] = "AmericaMonterrey";
        TimezoneEnum[TimezoneEnum["AmericaMontevideo"] = 'America/Montevideo'] = "AmericaMontevideo";
        TimezoneEnum[TimezoneEnum["AmericaMontreal"] = 'America/Montreal'] = "AmericaMontreal";
        TimezoneEnum[TimezoneEnum["AmericaMontserrat"] = 'America/Montserrat'] = "AmericaMontserrat";
        TimezoneEnum[TimezoneEnum["AmericaNassau"] = 'America/Nassau'] = "AmericaNassau";
        TimezoneEnum[TimezoneEnum["AmericaNewYork"] = 'America/New_York'] = "AmericaNewYork";
        TimezoneEnum[TimezoneEnum["AmericaNipigon"] = 'America/Nipigon'] = "AmericaNipigon";
        TimezoneEnum[TimezoneEnum["AmericaNome"] = 'America/Nome'] = "AmericaNome";
        TimezoneEnum[TimezoneEnum["AmericaNoronha"] = 'America/Noronha'] = "AmericaNoronha";
        TimezoneEnum[TimezoneEnum["AmericaNorthDakotaBeulah"] = 'America/North_Dakota/Beulah'] = "AmericaNorthDakotaBeulah";
        TimezoneEnum[TimezoneEnum["AmericaNorthDakotaCenter"] = 'America/North_Dakota/Center'] = "AmericaNorthDakotaCenter";
        TimezoneEnum[TimezoneEnum["AmericaNorthDakotaNewSalem"] = 'America/North_Dakota/New_Salem'] = "AmericaNorthDakotaNewSalem";
        TimezoneEnum[TimezoneEnum["AmericaNuuk"] = 'America/Nuuk'] = "AmericaNuuk";
        TimezoneEnum[TimezoneEnum["AmericaOjinaga"] = 'America/Ojinaga'] = "AmericaOjinaga";
        TimezoneEnum[TimezoneEnum["AmericaPanama"] = 'America/Panama'] = "AmericaPanama";
        TimezoneEnum[TimezoneEnum["AmericaPangnirtung"] = 'America/Pangnirtung'] = "AmericaPangnirtung";
        TimezoneEnum[TimezoneEnum["AmericaParamaribo"] = 'America/Paramaribo'] = "AmericaParamaribo";
        TimezoneEnum[TimezoneEnum["AmericaPhoenix"] = 'America/Phoenix'] = "AmericaPhoenix";
        TimezoneEnum[TimezoneEnum["AmericaPortAuPrince"] = 'America/Port-au-Prince'] = "AmericaPortAuPrince";
        TimezoneEnum[TimezoneEnum["AmericaPortOfSpain"] = 'America/Port_of_Spain'] = "AmericaPortOfSpain";
        TimezoneEnum[TimezoneEnum["AmericaPortoAcre"] = 'America/Porto_Acre'] = "AmericaPortoAcre";
        TimezoneEnum[TimezoneEnum["AmericaPortoVelho"] = 'America/Porto_Velho'] = "AmericaPortoVelho";
        TimezoneEnum[TimezoneEnum["AmericaPuertoRico"] = 'America/Puerto_Rico'] = "AmericaPuertoRico";
        TimezoneEnum[TimezoneEnum["AmericaPuntaArenas"] = 'America/Punta_Arenas'] = "AmericaPuntaArenas";
        TimezoneEnum[TimezoneEnum["AmericaRainyRiver"] = 'America/Rainy_River'] = "AmericaRainyRiver";
        TimezoneEnum[TimezoneEnum["AmericaRankinInlet"] = 'America/Rankin_Inlet'] = "AmericaRankinInlet";
        TimezoneEnum[TimezoneEnum["AmericaRecife"] = 'America/Recife'] = "AmericaRecife";
        TimezoneEnum[TimezoneEnum["AmericaRegina"] = 'America/Regina'] = "AmericaRegina";
        TimezoneEnum[TimezoneEnum["AmericaResolute"] = 'America/Resolute'] = "AmericaResolute";
        TimezoneEnum[TimezoneEnum["AmericaRioBranco"] = 'America/Rio_Branco'] = "AmericaRioBranco";
        TimezoneEnum[TimezoneEnum["AmericaRosario"] = 'America/Rosario'] = "AmericaRosario";
        TimezoneEnum[TimezoneEnum["AmericaSantaIsabel"] = 'America/Santa_Isabel'] = "AmericaSantaIsabel";
        TimezoneEnum[TimezoneEnum["AmericaSantarem"] = 'America/Santarem'] = "AmericaSantarem";
        TimezoneEnum[TimezoneEnum["AmericaSantiago"] = 'America/Santiago'] = "AmericaSantiago";
        TimezoneEnum[TimezoneEnum["AmericaSantoDomingo"] = 'America/Santo_Domingo'] = "AmericaSantoDomingo";
        TimezoneEnum[TimezoneEnum["AmericaSaoPaulo"] = 'America/Sao_Paulo'] = "AmericaSaoPaulo";
        TimezoneEnum[TimezoneEnum["AmericaScoresbysund"] = 'America/Scoresbysund'] = "AmericaScoresbysund";
        TimezoneEnum[TimezoneEnum["AmericaShiprock"] = 'America/Shiprock'] = "AmericaShiprock";
        TimezoneEnum[TimezoneEnum["AmericaSitka"] = 'America/Sitka'] = "AmericaSitka";
        TimezoneEnum[TimezoneEnum["AmericaStBarthelemy"] = 'America/St_Barthelemy'] = "AmericaStBarthelemy";
        TimezoneEnum[TimezoneEnum["AmericaStJohns"] = 'America/St_Johns'] = "AmericaStJohns";
        TimezoneEnum[TimezoneEnum["AmericaStKitts"] = 'America/St_Kitts'] = "AmericaStKitts";
        TimezoneEnum[TimezoneEnum["AmericaStLucia"] = 'America/St_Lucia'] = "AmericaStLucia";
        TimezoneEnum[TimezoneEnum["AmericaStThomas"] = 'America/St_Thomas'] = "AmericaStThomas";
        TimezoneEnum[TimezoneEnum["AmericaStVincent"] = 'America/St_Vincent'] = "AmericaStVincent";
        TimezoneEnum[TimezoneEnum["AmericaSwiftCurrent"] = 'America/Swift_Current'] = "AmericaSwiftCurrent";
        TimezoneEnum[TimezoneEnum["AmericaTegucigalpa"] = 'America/Tegucigalpa'] = "AmericaTegucigalpa";
        TimezoneEnum[TimezoneEnum["AmericaThule"] = 'America/Thule'] = "AmericaThule";
        TimezoneEnum[TimezoneEnum["AmericaThunderBay"] = 'America/Thunder_Bay'] = "AmericaThunderBay";
        TimezoneEnum[TimezoneEnum["AmericaTijuana"] = 'America/Tijuana'] = "AmericaTijuana";
        TimezoneEnum[TimezoneEnum["AmericaToronto"] = 'America/Toronto'] = "AmericaToronto";
        TimezoneEnum[TimezoneEnum["AmericaTortola"] = 'America/Tortola'] = "AmericaTortola";
        TimezoneEnum[TimezoneEnum["AmericaVancouver"] = 'America/Vancouver'] = "AmericaVancouver";
        TimezoneEnum[TimezoneEnum["AmericaVirgin"] = 'America/Virgin'] = "AmericaVirgin";
        TimezoneEnum[TimezoneEnum["AmericaWhitehorse"] = 'America/Whitehorse'] = "AmericaWhitehorse";
        TimezoneEnum[TimezoneEnum["AmericaWinnipeg"] = 'America/Winnipeg'] = "AmericaWinnipeg";
        TimezoneEnum[TimezoneEnum["AmericaYakutat"] = 'America/Yakutat'] = "AmericaYakutat";
        TimezoneEnum[TimezoneEnum["AmericaYellowknife"] = 'America/Yellowknife'] = "AmericaYellowknife";
        TimezoneEnum[TimezoneEnum["AntarcticaCasey"] = 'Antarctica/Casey'] = "AntarcticaCasey";
        TimezoneEnum[TimezoneEnum["AntarcticaDavis"] = 'Antarctica/Davis'] = "AntarcticaDavis";
        TimezoneEnum[TimezoneEnum["AntarcticaDumontDUrville"] = 'Antarctica/DumontDUrville'] = "AntarcticaDumontDUrville";
        TimezoneEnum[TimezoneEnum["AntarcticaMacquarie"] = 'Antarctica/Macquarie'] = "AntarcticaMacquarie";
        TimezoneEnum[TimezoneEnum["AntarcticaMawson"] = 'Antarctica/Mawson'] = "AntarcticaMawson";
        TimezoneEnum[TimezoneEnum["AntarcticaMcMurdo"] = 'Antarctica/McMurdo'] = "AntarcticaMcMurdo";
        TimezoneEnum[TimezoneEnum["AntarcticaPalmer"] = 'Antarctica/Palmer'] = "AntarcticaPalmer";
        TimezoneEnum[TimezoneEnum["AntarcticaRothera"] = 'Antarctica/Rothera'] = "AntarcticaRothera";
        TimezoneEnum[TimezoneEnum["AntarcticaSouthPole"] = 'Antarctica/South_Pole'] = "AntarcticaSouthPole";
        TimezoneEnum[TimezoneEnum["AntarcticaSyowa"] = 'Antarctica/Syowa'] = "AntarcticaSyowa";
        TimezoneEnum[TimezoneEnum["AntarcticaTroll"] = 'Antarctica/Troll'] = "AntarcticaTroll";
        TimezoneEnum[TimezoneEnum["AntarcticaVostok"] = 'Antarctica/Vostok'] = "AntarcticaVostok";
        TimezoneEnum[TimezoneEnum["ArcticLongyearbyen"] = 'Arctic/Longyearbyen'] = "ArcticLongyearbyen";
        TimezoneEnum[TimezoneEnum["AsiaAden"] = 'Asia/Aden'] = "AsiaAden";
        TimezoneEnum[TimezoneEnum["AsiaAlmaty"] = 'Asia/Almaty'] = "AsiaAlmaty";
        TimezoneEnum[TimezoneEnum["AsiaAmman"] = 'Asia/Amman'] = "AsiaAmman";
        TimezoneEnum[TimezoneEnum["AsiaAnadyr"] = 'Asia/Anadyr'] = "AsiaAnadyr";
        TimezoneEnum[TimezoneEnum["AsiaAqtau"] = 'Asia/Aqtau'] = "AsiaAqtau";
        TimezoneEnum[TimezoneEnum["AsiaAqtobe"] = 'Asia/Aqtobe'] = "AsiaAqtobe";
        TimezoneEnum[TimezoneEnum["AsiaAshgabat"] = 'Asia/Ashgabat'] = "AsiaAshgabat";
        TimezoneEnum[TimezoneEnum["AsiaAshkhabad"] = 'Asia/Ashkhabad'] = "AsiaAshkhabad";
        TimezoneEnum[TimezoneEnum["AsiaAtyrau"] = 'Asia/Atyrau'] = "AsiaAtyrau";
        TimezoneEnum[TimezoneEnum["AsiaBaghdad"] = 'Asia/Baghdad'] = "AsiaBaghdad";
        TimezoneEnum[TimezoneEnum["AsiaBahrain"] = 'Asia/Bahrain'] = "AsiaBahrain";
        TimezoneEnum[TimezoneEnum["AsiaBaku"] = 'Asia/Baku'] = "AsiaBaku";
        TimezoneEnum[TimezoneEnum["AsiaBangkok"] = 'Asia/Bangkok'] = "AsiaBangkok";
        TimezoneEnum[TimezoneEnum["AsiaBarnaul"] = 'Asia/Barnaul'] = "AsiaBarnaul";
        TimezoneEnum[TimezoneEnum["AsiaBeirut"] = 'Asia/Beirut'] = "AsiaBeirut";
        TimezoneEnum[TimezoneEnum["AsiaBishkek"] = 'Asia/Bishkek'] = "AsiaBishkek";
        TimezoneEnum[TimezoneEnum["AsiaBrunei"] = 'Asia/Brunei'] = "AsiaBrunei";
        TimezoneEnum[TimezoneEnum["AsiaCalcutta"] = 'Asia/Calcutta'] = "AsiaCalcutta";
        TimezoneEnum[TimezoneEnum["AsiaChita"] = 'Asia/Chita'] = "AsiaChita";
        TimezoneEnum[TimezoneEnum["AsiaChoibalsan"] = 'Asia/Choibalsan'] = "AsiaChoibalsan";
        TimezoneEnum[TimezoneEnum["AsiaChongqing"] = 'Asia/Chongqing'] = "AsiaChongqing";
        TimezoneEnum[TimezoneEnum["AsiaChungking"] = 'Asia/Chungking'] = "AsiaChungking";
        TimezoneEnum[TimezoneEnum["AsiaColombo"] = 'Asia/Colombo'] = "AsiaColombo";
        TimezoneEnum[TimezoneEnum["AsiaDacca"] = 'Asia/Dacca'] = "AsiaDacca";
        TimezoneEnum[TimezoneEnum["AsiaDamascus"] = 'Asia/Damascus'] = "AsiaDamascus";
        TimezoneEnum[TimezoneEnum["AsiaDhaka"] = 'Asia/Dhaka'] = "AsiaDhaka";
        TimezoneEnum[TimezoneEnum["AsiaDili"] = 'Asia/Dili'] = "AsiaDili";
        TimezoneEnum[TimezoneEnum["AsiaDubai"] = 'Asia/Dubai'] = "AsiaDubai";
        TimezoneEnum[TimezoneEnum["AsiaDushanbe"] = 'Asia/Dushanbe'] = "AsiaDushanbe";
        TimezoneEnum[TimezoneEnum["AsiaFamagusta"] = 'Asia/Famagusta'] = "AsiaFamagusta";
        TimezoneEnum[TimezoneEnum["AsiaGaza"] = 'Asia/Gaza'] = "AsiaGaza";
        TimezoneEnum[TimezoneEnum["AsiaHarbin"] = 'Asia/Harbin'] = "AsiaHarbin";
        TimezoneEnum[TimezoneEnum["AsiaHebron"] = 'Asia/Hebron'] = "AsiaHebron";
        TimezoneEnum[TimezoneEnum["AsiaHoChiMinh"] = 'Asia/Ho_Chi_Minh'] = "AsiaHoChiMinh";
        TimezoneEnum[TimezoneEnum["AsiaHongKong"] = 'Asia/Hong_Kong'] = "AsiaHongKong";
        TimezoneEnum[TimezoneEnum["AsiaHovd"] = 'Asia/Hovd'] = "AsiaHovd";
        TimezoneEnum[TimezoneEnum["AsiaIrkutsk"] = 'Asia/Irkutsk'] = "AsiaIrkutsk";
        TimezoneEnum[TimezoneEnum["AsiaIstanbul"] = 'Asia/Istanbul'] = "AsiaIstanbul";
        TimezoneEnum[TimezoneEnum["AsiaJakarta"] = 'Asia/Jakarta'] = "AsiaJakarta";
        TimezoneEnum[TimezoneEnum["AsiaJayapura"] = 'Asia/Jayapura'] = "AsiaJayapura";
        TimezoneEnum[TimezoneEnum["AsiaJerusalem"] = 'Asia/Jerusalem'] = "AsiaJerusalem";
        TimezoneEnum[TimezoneEnum["AsiaKabul"] = 'Asia/Kabul'] = "AsiaKabul";
        TimezoneEnum[TimezoneEnum["AsiaKamchatka"] = 'Asia/Kamchatka'] = "AsiaKamchatka";
        TimezoneEnum[TimezoneEnum["AsiaKarachi"] = 'Asia/Karachi'] = "AsiaKarachi";
        TimezoneEnum[TimezoneEnum["AsiaKashgar"] = 'Asia/Kashgar'] = "AsiaKashgar";
        TimezoneEnum[TimezoneEnum["AsiaKathmandu"] = 'Asia/Kathmandu'] = "AsiaKathmandu";
        TimezoneEnum[TimezoneEnum["AsiaKatmandu"] = 'Asia/Katmandu'] = "AsiaKatmandu";
        TimezoneEnum[TimezoneEnum["AsiaKhandyga"] = 'Asia/Khandyga'] = "AsiaKhandyga";
        TimezoneEnum[TimezoneEnum["AsiaKolkata"] = 'Asia/Kolkata'] = "AsiaKolkata";
        TimezoneEnum[TimezoneEnum["AsiaKrasnoyarsk"] = 'Asia/Krasnoyarsk'] = "AsiaKrasnoyarsk";
        TimezoneEnum[TimezoneEnum["AsiaKualaLumpur"] = 'Asia/Kuala_Lumpur'] = "AsiaKualaLumpur";
        TimezoneEnum[TimezoneEnum["AsiaKuching"] = 'Asia/Kuching'] = "AsiaKuching";
        TimezoneEnum[TimezoneEnum["AsiaKuwait"] = 'Asia/Kuwait'] = "AsiaKuwait";
        TimezoneEnum[TimezoneEnum["AsiaMacao"] = 'Asia/Macao'] = "AsiaMacao";
        TimezoneEnum[TimezoneEnum["AsiaMacau"] = 'Asia/Macau'] = "AsiaMacau";
        TimezoneEnum[TimezoneEnum["AsiaMagadan"] = 'Asia/Magadan'] = "AsiaMagadan";
        TimezoneEnum[TimezoneEnum["AsiaMakassar"] = 'Asia/Makassar'] = "AsiaMakassar";
        TimezoneEnum[TimezoneEnum["AsiaManila"] = 'Asia/Manila'] = "AsiaManila";
        TimezoneEnum[TimezoneEnum["AsiaMuscat"] = 'Asia/Muscat'] = "AsiaMuscat";
        TimezoneEnum[TimezoneEnum["AsiaNicosia"] = 'Asia/Nicosia'] = "AsiaNicosia";
        TimezoneEnum[TimezoneEnum["AsiaNovokuznetsk"] = 'Asia/Novokuznetsk'] = "AsiaNovokuznetsk";
        TimezoneEnum[TimezoneEnum["AsiaNovosibirsk"] = 'Asia/Novosibirsk'] = "AsiaNovosibirsk";
        TimezoneEnum[TimezoneEnum["AsiaOmsk"] = 'Asia/Omsk'] = "AsiaOmsk";
        TimezoneEnum[TimezoneEnum["AsiaOral"] = 'Asia/Oral'] = "AsiaOral";
        TimezoneEnum[TimezoneEnum["AsiaPhnomPenh"] = 'Asia/Phnom_Penh'] = "AsiaPhnomPenh";
        TimezoneEnum[TimezoneEnum["AsiaPontianak"] = 'Asia/Pontianak'] = "AsiaPontianak";
        TimezoneEnum[TimezoneEnum["AsiaPyongyang"] = 'Asia/Pyongyang'] = "AsiaPyongyang";
        TimezoneEnum[TimezoneEnum["AsiaQatar"] = 'Asia/Qatar'] = "AsiaQatar";
        TimezoneEnum[TimezoneEnum["AsiaQostanay"] = 'Asia/Qostanay'] = "AsiaQostanay";
        TimezoneEnum[TimezoneEnum["AsiaQyzylorda"] = 'Asia/Qyzylorda'] = "AsiaQyzylorda";
        TimezoneEnum[TimezoneEnum["AsiaRangoon"] = 'Asia/Rangoon'] = "AsiaRangoon";
        TimezoneEnum[TimezoneEnum["AsiaRiyadh"] = 'Asia/Riyadh'] = "AsiaRiyadh";
        TimezoneEnum[TimezoneEnum["AsiaSaigon"] = 'Asia/Saigon'] = "AsiaSaigon";
        TimezoneEnum[TimezoneEnum["AsiaSakhalin"] = 'Asia/Sakhalin'] = "AsiaSakhalin";
        TimezoneEnum[TimezoneEnum["AsiaSamarkand"] = 'Asia/Samarkand'] = "AsiaSamarkand";
        TimezoneEnum[TimezoneEnum["AsiaSeoul"] = 'Asia/Seoul'] = "AsiaSeoul";
        TimezoneEnum[TimezoneEnum["AsiaShanghai"] = 'Asia/Shanghai'] = "AsiaShanghai";
        TimezoneEnum[TimezoneEnum["AsiaSingapore"] = 'Asia/Singapore'] = "AsiaSingapore";
        TimezoneEnum[TimezoneEnum["AsiaSrednekolymsk"] = 'Asia/Srednekolymsk'] = "AsiaSrednekolymsk";
        TimezoneEnum[TimezoneEnum["AsiaTaipei"] = 'Asia/Taipei'] = "AsiaTaipei";
        TimezoneEnum[TimezoneEnum["AsiaTashkent"] = 'Asia/Tashkent'] = "AsiaTashkent";
        TimezoneEnum[TimezoneEnum["AsiaTbilisi"] = 'Asia/Tbilisi'] = "AsiaTbilisi";
        TimezoneEnum[TimezoneEnum["AsiaTehran"] = 'Asia/Tehran'] = "AsiaTehran";
        TimezoneEnum[TimezoneEnum["AsiaTelAviv"] = 'Asia/Tel_Aviv'] = "AsiaTelAviv";
        TimezoneEnum[TimezoneEnum["AsiaThimbu"] = 'Asia/Thimbu'] = "AsiaThimbu";
        TimezoneEnum[TimezoneEnum["AsiaThimphu"] = 'Asia/Thimphu'] = "AsiaThimphu";
        TimezoneEnum[TimezoneEnum["AsiaTokyo"] = 'Asia/Tokyo'] = "AsiaTokyo";
        TimezoneEnum[TimezoneEnum["AsiaTomsk"] = 'Asia/Tomsk'] = "AsiaTomsk";
        TimezoneEnum[TimezoneEnum["AsiaUjungPandang"] = 'Asia/Ujung_Pandang'] = "AsiaUjungPandang";
        TimezoneEnum[TimezoneEnum["AsiaUlaanbaatar"] = 'Asia/Ulaanbaatar'] = "AsiaUlaanbaatar";
        TimezoneEnum[TimezoneEnum["AsiaUlanBator"] = 'Asia/Ulan_Bator'] = "AsiaUlanBator";
        TimezoneEnum[TimezoneEnum["AsiaUrumqi"] = 'Asia/Urumqi'] = "AsiaUrumqi";
        TimezoneEnum[TimezoneEnum["AsiaUstNera"] = 'Asia/Ust-Nera'] = "AsiaUstNera";
        TimezoneEnum[TimezoneEnum["AsiaVientiane"] = 'Asia/Vientiane'] = "AsiaVientiane";
        TimezoneEnum[TimezoneEnum["AsiaVladivostok"] = 'Asia/Vladivostok'] = "AsiaVladivostok";
        TimezoneEnum[TimezoneEnum["AsiaYakutsk"] = 'Asia/Yakutsk'] = "AsiaYakutsk";
        TimezoneEnum[TimezoneEnum["AsiaYangon"] = 'Asia/Yangon'] = "AsiaYangon";
        TimezoneEnum[TimezoneEnum["AsiaYekaterinburg"] = 'Asia/Yekaterinburg'] = "AsiaYekaterinburg";
        TimezoneEnum[TimezoneEnum["AsiaYerevan"] = 'Asia/Yerevan'] = "AsiaYerevan";
        TimezoneEnum[TimezoneEnum["AtlanticAzores"] = 'Atlantic/Azores'] = "AtlanticAzores";
        TimezoneEnum[TimezoneEnum["AtlanticBermuda"] = 'Atlantic/Bermuda'] = "AtlanticBermuda";
        TimezoneEnum[TimezoneEnum["AtlanticCanary"] = 'Atlantic/Canary'] = "AtlanticCanary";
        TimezoneEnum[TimezoneEnum["AtlanticCapeVerde"] = 'Atlantic/Cape_Verde'] = "AtlanticCapeVerde";
        TimezoneEnum[TimezoneEnum["AtlanticFaeroe"] = 'Atlantic/Faeroe'] = "AtlanticFaeroe";
        TimezoneEnum[TimezoneEnum["AtlanticFaroe"] = 'Atlantic/Faroe'] = "AtlanticFaroe";
        TimezoneEnum[TimezoneEnum["AtlanticJanMayen"] = 'Atlantic/Jan_Mayen'] = "AtlanticJanMayen";
        TimezoneEnum[TimezoneEnum["AtlanticMadeira"] = 'Atlantic/Madeira'] = "AtlanticMadeira";
        TimezoneEnum[TimezoneEnum["AtlanticReykjavik"] = 'Atlantic/Reykjavik'] = "AtlanticReykjavik";
        TimezoneEnum[TimezoneEnum["AtlanticSouthGeorgia"] = 'Atlantic/South_Georgia'] = "AtlanticSouthGeorgia";
        TimezoneEnum[TimezoneEnum["AtlanticStHelena"] = 'Atlantic/St_Helena'] = "AtlanticStHelena";
        TimezoneEnum[TimezoneEnum["AtlanticStanley"] = 'Atlantic/Stanley'] = "AtlanticStanley";
        TimezoneEnum[TimezoneEnum["AustraliaACT"] = 'Australia/ACT'] = "AustraliaACT";
        TimezoneEnum[TimezoneEnum["AustraliaAdelaide"] = 'Australia/Adelaide'] = "AustraliaAdelaide";
        TimezoneEnum[TimezoneEnum["AustraliaBrisbane"] = 'Australia/Brisbane'] = "AustraliaBrisbane";
        TimezoneEnum[TimezoneEnum["AustraliaBrokenHill"] = 'Australia/Broken_Hill'] = "AustraliaBrokenHill";
        TimezoneEnum[TimezoneEnum["AustraliaCanberra"] = 'Australia/Canberra'] = "AustraliaCanberra";
        TimezoneEnum[TimezoneEnum["AustraliaCurrie"] = 'Australia/Currie'] = "AustraliaCurrie";
        TimezoneEnum[TimezoneEnum["AustraliaDarwin"] = 'Australia/Darwin'] = "AustraliaDarwin";
        TimezoneEnum[TimezoneEnum["AustraliaEucla"] = 'Australia/Eucla'] = "AustraliaEucla";
        TimezoneEnum[TimezoneEnum["AustraliaHobart"] = 'Australia/Hobart'] = "AustraliaHobart";
        TimezoneEnum[TimezoneEnum["AustraliaLHI"] = 'Australia/LHI'] = "AustraliaLHI";
        TimezoneEnum[TimezoneEnum["AustraliaLindeman"] = 'Australia/Lindeman'] = "AustraliaLindeman";
        TimezoneEnum[TimezoneEnum["AustraliaLordHowe"] = 'Australia/Lord_Howe'] = "AustraliaLordHowe";
        TimezoneEnum[TimezoneEnum["AustraliaMelbourne"] = 'Australia/Melbourne'] = "AustraliaMelbourne";
        TimezoneEnum[TimezoneEnum["AustraliaNSW"] = 'Australia/NSW'] = "AustraliaNSW";
        TimezoneEnum[TimezoneEnum["AustraliaNorth"] = 'Australia/North'] = "AustraliaNorth";
        TimezoneEnum[TimezoneEnum["AustraliaPerth"] = 'Australia/Perth'] = "AustraliaPerth";
        TimezoneEnum[TimezoneEnum["AustraliaQueensland"] = 'Australia/Queensland'] = "AustraliaQueensland";
        TimezoneEnum[TimezoneEnum["AustraliaSouth"] = 'Australia/South'] = "AustraliaSouth";
        TimezoneEnum[TimezoneEnum["AustraliaSydney"] = 'Australia/Sydney'] = "AustraliaSydney";
        TimezoneEnum[TimezoneEnum["AustraliaTasmania"] = 'Australia/Tasmania'] = "AustraliaTasmania";
        TimezoneEnum[TimezoneEnum["AustraliaVictoria"] = 'Australia/Victoria'] = "AustraliaVictoria";
        TimezoneEnum[TimezoneEnum["AustraliaWest"] = 'Australia/West'] = "AustraliaWest";
        TimezoneEnum[TimezoneEnum["AustraliaYancowinna"] = 'Australia/Yancowinna'] = "AustraliaYancowinna";
        TimezoneEnum[TimezoneEnum["BrazilAcre"] = 'Brazil/Acre'] = "BrazilAcre";
        TimezoneEnum[TimezoneEnum["BrazilDeNoronha"] = 'Brazil/DeNoronha'] = "BrazilDeNoronha";
        TimezoneEnum[TimezoneEnum["BrazilEast"] = 'Brazil/East'] = "BrazilEast";
        TimezoneEnum[TimezoneEnum["BrazilWest"] = 'Brazil/West'] = "BrazilWest";
        TimezoneEnum[TimezoneEnum["CET"] = 'CET'] = "CET";
        TimezoneEnum[TimezoneEnum["CST6CDT"] = 'CST6CDT'] = "CST6CDT";
        TimezoneEnum[TimezoneEnum["CanadaAtlantic"] = 'Canada/Atlantic'] = "CanadaAtlantic";
        TimezoneEnum[TimezoneEnum["CanadaCentral"] = 'Canada/Central'] = "CanadaCentral";
        TimezoneEnum[TimezoneEnum["CanadaEastern"] = 'Canada/Eastern'] = "CanadaEastern";
        TimezoneEnum[TimezoneEnum["CanadaMountain"] = 'Canada/Mountain'] = "CanadaMountain";
        TimezoneEnum[TimezoneEnum["CanadaNewfoundland"] = 'Canada/Newfoundland'] = "CanadaNewfoundland";
        TimezoneEnum[TimezoneEnum["CanadaPacific"] = 'Canada/Pacific'] = "CanadaPacific";
        TimezoneEnum[TimezoneEnum["CanadaSaskatchewan"] = 'Canada/Saskatchewan'] = "CanadaSaskatchewan";
        TimezoneEnum[TimezoneEnum["CanadaYukon"] = 'Canada/Yukon'] = "CanadaYukon";
        TimezoneEnum[TimezoneEnum["ChileContinental"] = 'Chile/Continental'] = "ChileContinental";
        TimezoneEnum[TimezoneEnum["ChileEasterIsland"] = 'Chile/EasterIsland'] = "ChileEasterIsland";
        TimezoneEnum[TimezoneEnum["Cuba"] = 'Cuba'] = "Cuba";
        TimezoneEnum[TimezoneEnum["EET"] = 'EET'] = "EET";
        TimezoneEnum[TimezoneEnum["EST"] = 'EST'] = "EST";
        TimezoneEnum[TimezoneEnum["EST5EDT"] = 'EST5EDT'] = "EST5EDT";
        TimezoneEnum[TimezoneEnum["Egypt"] = 'Egypt'] = "Egypt";
        TimezoneEnum[TimezoneEnum["Eire"] = 'Eire'] = "Eire";
        TimezoneEnum[TimezoneEnum["EtcGMT"] = 'Etc/GMT'] = "EtcGMT";
        TimezoneEnum[TimezoneEnum["EtcGMT0"] = 'Etc/GMT+0'] = "EtcGMT0";
        TimezoneEnum[TimezoneEnum["EtcGMT1"] = 'Etc/GMT+1'] = "EtcGMT1";
        TimezoneEnum[TimezoneEnum["EtcGMT10"] = 'Etc/GMT+10'] = "EtcGMT10";
        TimezoneEnum[TimezoneEnum["EtcGMT11"] = 'Etc/GMT+11'] = "EtcGMT11";
        TimezoneEnum[TimezoneEnum["EtcGMT12"] = 'Etc/GMT+12'] = "EtcGMT12";
        TimezoneEnum[TimezoneEnum["EtcGMT2"] = 'Etc/GMT+2'] = "EtcGMT2";
        TimezoneEnum[TimezoneEnum["EtcGMT3"] = 'Etc/GMT+3'] = "EtcGMT3";
        TimezoneEnum[TimezoneEnum["EtcGMT4"] = 'Etc/GMT+4'] = "EtcGMT4";
        TimezoneEnum[TimezoneEnum["EtcGMT5"] = 'Etc/GMT+5'] = "EtcGMT5";
        TimezoneEnum[TimezoneEnum["EtcGMT6"] = 'Etc/GMT+6'] = "EtcGMT6";
        TimezoneEnum[TimezoneEnum["EtcGMT7"] = 'Etc/GMT+7'] = "EtcGMT7";
        TimezoneEnum[TimezoneEnum["EtcGMT8"] = 'Etc/GMT+8'] = "EtcGMT8";
        TimezoneEnum[TimezoneEnum["EtcGMT9"] = 'Etc/GMT+9'] = "EtcGMT9";
        TimezoneEnum[TimezoneEnum["EtcGMT0_404"] = 'Etc/GMT-0'] = "EtcGMT0_404";
        TimezoneEnum[TimezoneEnum["EtcGMT1_405"] = 'Etc/GMT-1'] = "EtcGMT1_405";
        TimezoneEnum[TimezoneEnum["EtcGMT10_406"] = 'Etc/GMT-10'] = "EtcGMT10_406";
        TimezoneEnum[TimezoneEnum["EtcGMT11_407"] = 'Etc/GMT-11'] = "EtcGMT11_407";
        TimezoneEnum[TimezoneEnum["EtcGMT12_408"] = 'Etc/GMT-12'] = "EtcGMT12_408";
        TimezoneEnum[TimezoneEnum["EtcGMT13"] = 'Etc/GMT-13'] = "EtcGMT13";
        TimezoneEnum[TimezoneEnum["EtcGMT14"] = 'Etc/GMT-14'] = "EtcGMT14";
        TimezoneEnum[TimezoneEnum["EtcGMT2_411"] = 'Etc/GMT-2'] = "EtcGMT2_411";
        TimezoneEnum[TimezoneEnum["EtcGMT3_412"] = 'Etc/GMT-3'] = "EtcGMT3_412";
        TimezoneEnum[TimezoneEnum["EtcGMT4_413"] = 'Etc/GMT-4'] = "EtcGMT4_413";
        TimezoneEnum[TimezoneEnum["EtcGMT5_414"] = 'Etc/GMT-5'] = "EtcGMT5_414";
        TimezoneEnum[TimezoneEnum["EtcGMT6_415"] = 'Etc/GMT-6'] = "EtcGMT6_415";
        TimezoneEnum[TimezoneEnum["EtcGMT7_416"] = 'Etc/GMT-7'] = "EtcGMT7_416";
        TimezoneEnum[TimezoneEnum["EtcGMT8_417"] = 'Etc/GMT-8'] = "EtcGMT8_417";
        TimezoneEnum[TimezoneEnum["EtcGMT9_418"] = 'Etc/GMT-9'] = "EtcGMT9_418";
        TimezoneEnum[TimezoneEnum["EtcGMT0_419"] = 'Etc/GMT0'] = "EtcGMT0_419";
        TimezoneEnum[TimezoneEnum["EtcGreenwich"] = 'Etc/Greenwich'] = "EtcGreenwich";
        TimezoneEnum[TimezoneEnum["EtcUCT"] = 'Etc/UCT'] = "EtcUCT";
        TimezoneEnum[TimezoneEnum["EtcUTC"] = 'Etc/UTC'] = "EtcUTC";
        TimezoneEnum[TimezoneEnum["EtcUniversal"] = 'Etc/Universal'] = "EtcUniversal";
        TimezoneEnum[TimezoneEnum["EtcZulu"] = 'Etc/Zulu'] = "EtcZulu";
        TimezoneEnum[TimezoneEnum["EuropeAmsterdam"] = 'Europe/Amsterdam'] = "EuropeAmsterdam";
        TimezoneEnum[TimezoneEnum["EuropeAndorra"] = 'Europe/Andorra'] = "EuropeAndorra";
        TimezoneEnum[TimezoneEnum["EuropeAstrakhan"] = 'Europe/Astrakhan'] = "EuropeAstrakhan";
        TimezoneEnum[TimezoneEnum["EuropeAthens"] = 'Europe/Athens'] = "EuropeAthens";
        TimezoneEnum[TimezoneEnum["EuropeBelfast"] = 'Europe/Belfast'] = "EuropeBelfast";
        TimezoneEnum[TimezoneEnum["EuropeBelgrade"] = 'Europe/Belgrade'] = "EuropeBelgrade";
        TimezoneEnum[TimezoneEnum["EuropeBerlin"] = 'Europe/Berlin'] = "EuropeBerlin";
        TimezoneEnum[TimezoneEnum["EuropeBratislava"] = 'Europe/Bratislava'] = "EuropeBratislava";
        TimezoneEnum[TimezoneEnum["EuropeBrussels"] = 'Europe/Brussels'] = "EuropeBrussels";
        TimezoneEnum[TimezoneEnum["EuropeBucharest"] = 'Europe/Bucharest'] = "EuropeBucharest";
        TimezoneEnum[TimezoneEnum["EuropeBudapest"] = 'Europe/Budapest'] = "EuropeBudapest";
        TimezoneEnum[TimezoneEnum["EuropeBusingen"] = 'Europe/Busingen'] = "EuropeBusingen";
        TimezoneEnum[TimezoneEnum["EuropeChisinau"] = 'Europe/Chisinau'] = "EuropeChisinau";
        TimezoneEnum[TimezoneEnum["EuropeCopenhagen"] = 'Europe/Copenhagen'] = "EuropeCopenhagen";
        TimezoneEnum[TimezoneEnum["EuropeDublin"] = 'Europe/Dublin'] = "EuropeDublin";
        TimezoneEnum[TimezoneEnum["EuropeGibraltar"] = 'Europe/Gibraltar'] = "EuropeGibraltar";
        TimezoneEnum[TimezoneEnum["EuropeGuernsey"] = 'Europe/Guernsey'] = "EuropeGuernsey";
        TimezoneEnum[TimezoneEnum["EuropeHelsinki"] = 'Europe/Helsinki'] = "EuropeHelsinki";
        TimezoneEnum[TimezoneEnum["EuropeIsleOfMan"] = 'Europe/Isle_of_Man'] = "EuropeIsleOfMan";
        TimezoneEnum[TimezoneEnum["EuropeIstanbul"] = 'Europe/Istanbul'] = "EuropeIstanbul";
        TimezoneEnum[TimezoneEnum["EuropeJersey"] = 'Europe/Jersey'] = "EuropeJersey";
        TimezoneEnum[TimezoneEnum["EuropeKaliningrad"] = 'Europe/Kaliningrad'] = "EuropeKaliningrad";
        TimezoneEnum[TimezoneEnum["EuropeKiev"] = 'Europe/Kiev'] = "EuropeKiev";
        TimezoneEnum[TimezoneEnum["EuropeKirov"] = 'Europe/Kirov'] = "EuropeKirov";
        TimezoneEnum[TimezoneEnum["EuropeLisbon"] = 'Europe/Lisbon'] = "EuropeLisbon";
        TimezoneEnum[TimezoneEnum["EuropeLjubljana"] = 'Europe/Ljubljana'] = "EuropeLjubljana";
        TimezoneEnum[TimezoneEnum["EuropeLondon"] = 'Europe/London'] = "EuropeLondon";
        TimezoneEnum[TimezoneEnum["EuropeLuxembourg"] = 'Europe/Luxembourg'] = "EuropeLuxembourg";
        TimezoneEnum[TimezoneEnum["EuropeMadrid"] = 'Europe/Madrid'] = "EuropeMadrid";
        TimezoneEnum[TimezoneEnum["EuropeMalta"] = 'Europe/Malta'] = "EuropeMalta";
        TimezoneEnum[TimezoneEnum["EuropeMariehamn"] = 'Europe/Mariehamn'] = "EuropeMariehamn";
        TimezoneEnum[TimezoneEnum["EuropeMinsk"] = 'Europe/Minsk'] = "EuropeMinsk";
        TimezoneEnum[TimezoneEnum["EuropeMonaco"] = 'Europe/Monaco'] = "EuropeMonaco";
        TimezoneEnum[TimezoneEnum["EuropeMoscow"] = 'Europe/Moscow'] = "EuropeMoscow";
        TimezoneEnum[TimezoneEnum["EuropeNicosia"] = 'Europe/Nicosia'] = "EuropeNicosia";
        TimezoneEnum[TimezoneEnum["EuropeOslo"] = 'Europe/Oslo'] = "EuropeOslo";
        TimezoneEnum[TimezoneEnum["EuropeParis"] = 'Europe/Paris'] = "EuropeParis";
        TimezoneEnum[TimezoneEnum["EuropePodgorica"] = 'Europe/Podgorica'] = "EuropePodgorica";
        TimezoneEnum[TimezoneEnum["EuropePrague"] = 'Europe/Prague'] = "EuropePrague";
        TimezoneEnum[TimezoneEnum["EuropeRiga"] = 'Europe/Riga'] = "EuropeRiga";
        TimezoneEnum[TimezoneEnum["EuropeRome"] = 'Europe/Rome'] = "EuropeRome";
        TimezoneEnum[TimezoneEnum["EuropeSamara"] = 'Europe/Samara'] = "EuropeSamara";
        TimezoneEnum[TimezoneEnum["EuropeSanMarino"] = 'Europe/San_Marino'] = "EuropeSanMarino";
        TimezoneEnum[TimezoneEnum["EuropeSarajevo"] = 'Europe/Sarajevo'] = "EuropeSarajevo";
        TimezoneEnum[TimezoneEnum["EuropeSaratov"] = 'Europe/Saratov'] = "EuropeSaratov";
        TimezoneEnum[TimezoneEnum["EuropeSimferopol"] = 'Europe/Simferopol'] = "EuropeSimferopol";
        TimezoneEnum[TimezoneEnum["EuropeSkopje"] = 'Europe/Skopje'] = "EuropeSkopje";
        TimezoneEnum[TimezoneEnum["EuropeSofia"] = 'Europe/Sofia'] = "EuropeSofia";
        TimezoneEnum[TimezoneEnum["EuropeStockholm"] = 'Europe/Stockholm'] = "EuropeStockholm";
        TimezoneEnum[TimezoneEnum["EuropeTallinn"] = 'Europe/Tallinn'] = "EuropeTallinn";
        TimezoneEnum[TimezoneEnum["EuropeTirane"] = 'Europe/Tirane'] = "EuropeTirane";
        TimezoneEnum[TimezoneEnum["EuropeTiraspol"] = 'Europe/Tiraspol'] = "EuropeTiraspol";
        TimezoneEnum[TimezoneEnum["EuropeUlyanovsk"] = 'Europe/Ulyanovsk'] = "EuropeUlyanovsk";
        TimezoneEnum[TimezoneEnum["EuropeUzhgorod"] = 'Europe/Uzhgorod'] = "EuropeUzhgorod";
        TimezoneEnum[TimezoneEnum["EuropeVaduz"] = 'Europe/Vaduz'] = "EuropeVaduz";
        TimezoneEnum[TimezoneEnum["EuropeVatican"] = 'Europe/Vatican'] = "EuropeVatican";
        TimezoneEnum[TimezoneEnum["EuropeVienna"] = 'Europe/Vienna'] = "EuropeVienna";
        TimezoneEnum[TimezoneEnum["EuropeVilnius"] = 'Europe/Vilnius'] = "EuropeVilnius";
        TimezoneEnum[TimezoneEnum["EuropeVolgograd"] = 'Europe/Volgograd'] = "EuropeVolgograd";
        TimezoneEnum[TimezoneEnum["EuropeWarsaw"] = 'Europe/Warsaw'] = "EuropeWarsaw";
        TimezoneEnum[TimezoneEnum["EuropeZagreb"] = 'Europe/Zagreb'] = "EuropeZagreb";
        TimezoneEnum[TimezoneEnum["EuropeZaporozhye"] = 'Europe/Zaporozhye'] = "EuropeZaporozhye";
        TimezoneEnum[TimezoneEnum["EuropeZurich"] = 'Europe/Zurich'] = "EuropeZurich";
        TimezoneEnum[TimezoneEnum["GB"] = 'GB'] = "GB";
        TimezoneEnum[TimezoneEnum["GBEire"] = 'GB-Eire'] = "GBEire";
        TimezoneEnum[TimezoneEnum["GMT"] = 'GMT'] = "GMT";
        TimezoneEnum[TimezoneEnum["GMT0"] = 'GMT+0'] = "GMT0";
        TimezoneEnum[TimezoneEnum["GMT0_492"] = 'GMT-0'] = "GMT0_492";
        TimezoneEnum[TimezoneEnum["GMT0_493"] = 'GMT0'] = "GMT0_493";
        TimezoneEnum[TimezoneEnum["Greenwich"] = 'Greenwich'] = "Greenwich";
        TimezoneEnum[TimezoneEnum["HST"] = 'HST'] = "HST";
        TimezoneEnum[TimezoneEnum["Hongkong"] = 'Hongkong'] = "Hongkong";
        TimezoneEnum[TimezoneEnum["Iceland"] = 'Iceland'] = "Iceland";
        TimezoneEnum[TimezoneEnum["IndianAntananarivo"] = 'Indian/Antananarivo'] = "IndianAntananarivo";
        TimezoneEnum[TimezoneEnum["IndianChagos"] = 'Indian/Chagos'] = "IndianChagos";
        TimezoneEnum[TimezoneEnum["IndianChristmas"] = 'Indian/Christmas'] = "IndianChristmas";
        TimezoneEnum[TimezoneEnum["IndianCocos"] = 'Indian/Cocos'] = "IndianCocos";
        TimezoneEnum[TimezoneEnum["IndianComoro"] = 'Indian/Comoro'] = "IndianComoro";
        TimezoneEnum[TimezoneEnum["IndianKerguelen"] = 'Indian/Kerguelen'] = "IndianKerguelen";
        TimezoneEnum[TimezoneEnum["IndianMahe"] = 'Indian/Mahe'] = "IndianMahe";
        TimezoneEnum[TimezoneEnum["IndianMaldives"] = 'Indian/Maldives'] = "IndianMaldives";
        TimezoneEnum[TimezoneEnum["IndianMauritius"] = 'Indian/Mauritius'] = "IndianMauritius";
        TimezoneEnum[TimezoneEnum["IndianMayotte"] = 'Indian/Mayotte'] = "IndianMayotte";
        TimezoneEnum[TimezoneEnum["IndianReunion"] = 'Indian/Reunion'] = "IndianReunion";
        TimezoneEnum[TimezoneEnum["Iran"] = 'Iran'] = "Iran";
        TimezoneEnum[TimezoneEnum["Israel"] = 'Israel'] = "Israel";
        TimezoneEnum[TimezoneEnum["Jamaica"] = 'Jamaica'] = "Jamaica";
        TimezoneEnum[TimezoneEnum["Japan"] = 'Japan'] = "Japan";
        TimezoneEnum[TimezoneEnum["Kwajalein"] = 'Kwajalein'] = "Kwajalein";
        TimezoneEnum[TimezoneEnum["Libya"] = 'Libya'] = "Libya";
        TimezoneEnum[TimezoneEnum["MET"] = 'MET'] = "MET";
        TimezoneEnum[TimezoneEnum["MST"] = 'MST'] = "MST";
        TimezoneEnum[TimezoneEnum["MST7MDT"] = 'MST7MDT'] = "MST7MDT";
        TimezoneEnum[TimezoneEnum["MexicoBajaNorte"] = 'Mexico/BajaNorte'] = "MexicoBajaNorte";
        TimezoneEnum[TimezoneEnum["MexicoBajaSur"] = 'Mexico/BajaSur'] = "MexicoBajaSur";
        TimezoneEnum[TimezoneEnum["MexicoGeneral"] = 'Mexico/General'] = "MexicoGeneral";
        TimezoneEnum[TimezoneEnum["NZ"] = 'NZ'] = "NZ";
        TimezoneEnum[TimezoneEnum["NZCHAT"] = 'NZ-CHAT'] = "NZCHAT";
        TimezoneEnum[TimezoneEnum["Navajo"] = 'Navajo'] = "Navajo";
        TimezoneEnum[TimezoneEnum["PRC"] = 'PRC'] = "PRC";
        TimezoneEnum[TimezoneEnum["PST8PDT"] = 'PST8PDT'] = "PST8PDT";
        TimezoneEnum[TimezoneEnum["PacificApia"] = 'Pacific/Apia'] = "PacificApia";
        TimezoneEnum[TimezoneEnum["PacificAuckland"] = 'Pacific/Auckland'] = "PacificAuckland";
        TimezoneEnum[TimezoneEnum["PacificBougainville"] = 'Pacific/Bougainville'] = "PacificBougainville";
        TimezoneEnum[TimezoneEnum["PacificChatham"] = 'Pacific/Chatham'] = "PacificChatham";
        TimezoneEnum[TimezoneEnum["PacificChuuk"] = 'Pacific/Chuuk'] = "PacificChuuk";
        TimezoneEnum[TimezoneEnum["PacificEaster"] = 'Pacific/Easter'] = "PacificEaster";
        TimezoneEnum[TimezoneEnum["PacificEfate"] = 'Pacific/Efate'] = "PacificEfate";
        TimezoneEnum[TimezoneEnum["PacificEnderbury"] = 'Pacific/Enderbury'] = "PacificEnderbury";
        TimezoneEnum[TimezoneEnum["PacificFakaofo"] = 'Pacific/Fakaofo'] = "PacificFakaofo";
        TimezoneEnum[TimezoneEnum["PacificFiji"] = 'Pacific/Fiji'] = "PacificFiji";
        TimezoneEnum[TimezoneEnum["PacificFunafuti"] = 'Pacific/Funafuti'] = "PacificFunafuti";
        TimezoneEnum[TimezoneEnum["PacificGalapagos"] = 'Pacific/Galapagos'] = "PacificGalapagos";
        TimezoneEnum[TimezoneEnum["PacificGambier"] = 'Pacific/Gambier'] = "PacificGambier";
        TimezoneEnum[TimezoneEnum["PacificGuadalcanal"] = 'Pacific/Guadalcanal'] = "PacificGuadalcanal";
        TimezoneEnum[TimezoneEnum["PacificGuam"] = 'Pacific/Guam'] = "PacificGuam";
        TimezoneEnum[TimezoneEnum["PacificHonolulu"] = 'Pacific/Honolulu'] = "PacificHonolulu";
        TimezoneEnum[TimezoneEnum["PacificJohnston"] = 'Pacific/Johnston'] = "PacificJohnston";
        TimezoneEnum[TimezoneEnum["PacificKanton"] = 'Pacific/Kanton'] = "PacificKanton";
        TimezoneEnum[TimezoneEnum["PacificKiritimati"] = 'Pacific/Kiritimati'] = "PacificKiritimati";
        TimezoneEnum[TimezoneEnum["PacificKosrae"] = 'Pacific/Kosrae'] = "PacificKosrae";
        TimezoneEnum[TimezoneEnum["PacificKwajalein"] = 'Pacific/Kwajalein'] = "PacificKwajalein";
        TimezoneEnum[TimezoneEnum["PacificMajuro"] = 'Pacific/Majuro'] = "PacificMajuro";
        TimezoneEnum[TimezoneEnum["PacificMarquesas"] = 'Pacific/Marquesas'] = "PacificMarquesas";
        TimezoneEnum[TimezoneEnum["PacificMidway"] = 'Pacific/Midway'] = "PacificMidway";
        TimezoneEnum[TimezoneEnum["PacificNauru"] = 'Pacific/Nauru'] = "PacificNauru";
        TimezoneEnum[TimezoneEnum["PacificNiue"] = 'Pacific/Niue'] = "PacificNiue";
        TimezoneEnum[TimezoneEnum["PacificNorfolk"] = 'Pacific/Norfolk'] = "PacificNorfolk";
        TimezoneEnum[TimezoneEnum["PacificNoumea"] = 'Pacific/Noumea'] = "PacificNoumea";
        TimezoneEnum[TimezoneEnum["PacificPagoPago"] = 'Pacific/Pago_Pago'] = "PacificPagoPago";
        TimezoneEnum[TimezoneEnum["PacificPalau"] = 'Pacific/Palau'] = "PacificPalau";
        TimezoneEnum[TimezoneEnum["PacificPitcairn"] = 'Pacific/Pitcairn'] = "PacificPitcairn";
        TimezoneEnum[TimezoneEnum["PacificPohnpei"] = 'Pacific/Pohnpei'] = "PacificPohnpei";
        TimezoneEnum[TimezoneEnum["PacificPonape"] = 'Pacific/Ponape'] = "PacificPonape";
        TimezoneEnum[TimezoneEnum["PacificPortMoresby"] = 'Pacific/Port_Moresby'] = "PacificPortMoresby";
        TimezoneEnum[TimezoneEnum["PacificRarotonga"] = 'Pacific/Rarotonga'] = "PacificRarotonga";
        TimezoneEnum[TimezoneEnum["PacificSaipan"] = 'Pacific/Saipan'] = "PacificSaipan";
        TimezoneEnum[TimezoneEnum["PacificSamoa"] = 'Pacific/Samoa'] = "PacificSamoa";
        TimezoneEnum[TimezoneEnum["PacificTahiti"] = 'Pacific/Tahiti'] = "PacificTahiti";
        TimezoneEnum[TimezoneEnum["PacificTarawa"] = 'Pacific/Tarawa'] = "PacificTarawa";
        TimezoneEnum[TimezoneEnum["PacificTongatapu"] = 'Pacific/Tongatapu'] = "PacificTongatapu";
        TimezoneEnum[TimezoneEnum["PacificTruk"] = 'Pacific/Truk'] = "PacificTruk";
        TimezoneEnum[TimezoneEnum["PacificWake"] = 'Pacific/Wake'] = "PacificWake";
        TimezoneEnum[TimezoneEnum["PacificWallis"] = 'Pacific/Wallis'] = "PacificWallis";
        TimezoneEnum[TimezoneEnum["PacificYap"] = 'Pacific/Yap'] = "PacificYap";
        TimezoneEnum[TimezoneEnum["Poland"] = 'Poland'] = "Poland";
        TimezoneEnum[TimezoneEnum["Portugal"] = 'Portugal'] = "Portugal";
        TimezoneEnum[TimezoneEnum["ROC"] = 'ROC'] = "ROC";
        TimezoneEnum[TimezoneEnum["ROK"] = 'ROK'] = "ROK";
        TimezoneEnum[TimezoneEnum["Singapore"] = 'Singapore'] = "Singapore";
        TimezoneEnum[TimezoneEnum["Turkey"] = 'Turkey'] = "Turkey";
        TimezoneEnum[TimezoneEnum["UCT"] = 'UCT'] = "UCT";
        TimezoneEnum[TimezoneEnum["USAlaska"] = 'US/Alaska'] = "USAlaska";
        TimezoneEnum[TimezoneEnum["USAleutian"] = 'US/Aleutian'] = "USAleutian";
        TimezoneEnum[TimezoneEnum["USArizona"] = 'US/Arizona'] = "USArizona";
        TimezoneEnum[TimezoneEnum["USCentral"] = 'US/Central'] = "USCentral";
        TimezoneEnum[TimezoneEnum["USEastIndiana"] = 'US/East-Indiana'] = "USEastIndiana";
        TimezoneEnum[TimezoneEnum["USEastern"] = 'US/Eastern'] = "USEastern";
        TimezoneEnum[TimezoneEnum["USHawaii"] = 'US/Hawaii'] = "USHawaii";
        TimezoneEnum[TimezoneEnum["USIndianaStarke"] = 'US/Indiana-Starke'] = "USIndianaStarke";
        TimezoneEnum[TimezoneEnum["USMichigan"] = 'US/Michigan'] = "USMichigan";
        TimezoneEnum[TimezoneEnum["USMountain"] = 'US/Mountain'] = "USMountain";
        TimezoneEnum[TimezoneEnum["USPacific"] = 'US/Pacific'] = "USPacific";
        TimezoneEnum[TimezoneEnum["USSamoa"] = 'US/Samoa'] = "USSamoa";
        TimezoneEnum[TimezoneEnum["UTC"] = 'UTC'] = "UTC";
        TimezoneEnum[TimezoneEnum["Universal"] = 'Universal'] = "Universal";
        TimezoneEnum[TimezoneEnum["WSU"] = 'W-SU'] = "WSU";
        TimezoneEnum[TimezoneEnum["WET"] = 'WET'] = "WET";
        TimezoneEnum[TimezoneEnum["Zulu"] = 'Zulu'] = "Zulu";
    })(TimezoneEnum = ReportScheduleRestApiPost.TimezoneEnum || (ReportScheduleRestApiPost.TimezoneEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Alert"] = 'Alert'] = "Alert";
        TypeEnum[TypeEnum["Report"] = 'Report'] = "Report";
    })(TypeEnum = ReportScheduleRestApiPost.TypeEnum || (ReportScheduleRestApiPost.TypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let ValidatorTypeEnum;
    (function (ValidatorTypeEnum) {
        ValidatorTypeEnum[ValidatorTypeEnum["NotNull"] = 'not null'] = "NotNull";
        ValidatorTypeEnum[ValidatorTypeEnum["Operator"] = 'operator'] = "Operator";
    })(ValidatorTypeEnum = ReportScheduleRestApiPost.ValidatorTypeEnum || (ReportScheduleRestApiPost.ValidatorTypeEnum = {}));
})(ReportScheduleRestApiPost = exports.ReportScheduleRestApiPost || (exports.ReportScheduleRestApiPost = {}));
/**
 * @export
 * @namespace ReportScheduleRestApiPut
 */
var ReportScheduleRestApiPut;
(function (ReportScheduleRestApiPut) {
    /**
     * @export
     * @enum {string}
     */
    let ReportFormatEnum;
    (function (ReportFormatEnum) {
        ReportFormatEnum[ReportFormatEnum["PNG"] = 'PNG'] = "PNG";
        ReportFormatEnum[ReportFormatEnum["CSV"] = 'CSV'] = "CSV";
        ReportFormatEnum[ReportFormatEnum["TEXT"] = 'TEXT'] = "TEXT";
    })(ReportFormatEnum = ReportScheduleRestApiPut.ReportFormatEnum || (ReportScheduleRestApiPut.ReportFormatEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let TimezoneEnum;
    (function (TimezoneEnum) {
        TimezoneEnum[TimezoneEnum["AfricaAbidjan"] = 'Africa/Abidjan'] = "AfricaAbidjan";
        TimezoneEnum[TimezoneEnum["AfricaAccra"] = 'Africa/Accra'] = "AfricaAccra";
        TimezoneEnum[TimezoneEnum["AfricaAddisAbaba"] = 'Africa/Addis_Ababa'] = "AfricaAddisAbaba";
        TimezoneEnum[TimezoneEnum["AfricaAlgiers"] = 'Africa/Algiers'] = "AfricaAlgiers";
        TimezoneEnum[TimezoneEnum["AfricaAsmara"] = 'Africa/Asmara'] = "AfricaAsmara";
        TimezoneEnum[TimezoneEnum["AfricaAsmera"] = 'Africa/Asmera'] = "AfricaAsmera";
        TimezoneEnum[TimezoneEnum["AfricaBamako"] = 'Africa/Bamako'] = "AfricaBamako";
        TimezoneEnum[TimezoneEnum["AfricaBangui"] = 'Africa/Bangui'] = "AfricaBangui";
        TimezoneEnum[TimezoneEnum["AfricaBanjul"] = 'Africa/Banjul'] = "AfricaBanjul";
        TimezoneEnum[TimezoneEnum["AfricaBissau"] = 'Africa/Bissau'] = "AfricaBissau";
        TimezoneEnum[TimezoneEnum["AfricaBlantyre"] = 'Africa/Blantyre'] = "AfricaBlantyre";
        TimezoneEnum[TimezoneEnum["AfricaBrazzaville"] = 'Africa/Brazzaville'] = "AfricaBrazzaville";
        TimezoneEnum[TimezoneEnum["AfricaBujumbura"] = 'Africa/Bujumbura'] = "AfricaBujumbura";
        TimezoneEnum[TimezoneEnum["AfricaCairo"] = 'Africa/Cairo'] = "AfricaCairo";
        TimezoneEnum[TimezoneEnum["AfricaCasablanca"] = 'Africa/Casablanca'] = "AfricaCasablanca";
        TimezoneEnum[TimezoneEnum["AfricaCeuta"] = 'Africa/Ceuta'] = "AfricaCeuta";
        TimezoneEnum[TimezoneEnum["AfricaConakry"] = 'Africa/Conakry'] = "AfricaConakry";
        TimezoneEnum[TimezoneEnum["AfricaDakar"] = 'Africa/Dakar'] = "AfricaDakar";
        TimezoneEnum[TimezoneEnum["AfricaDarEsSalaam"] = 'Africa/Dar_es_Salaam'] = "AfricaDarEsSalaam";
        TimezoneEnum[TimezoneEnum["AfricaDjibouti"] = 'Africa/Djibouti'] = "AfricaDjibouti";
        TimezoneEnum[TimezoneEnum["AfricaDouala"] = 'Africa/Douala'] = "AfricaDouala";
        TimezoneEnum[TimezoneEnum["AfricaElAaiun"] = 'Africa/El_Aaiun'] = "AfricaElAaiun";
        TimezoneEnum[TimezoneEnum["AfricaFreetown"] = 'Africa/Freetown'] = "AfricaFreetown";
        TimezoneEnum[TimezoneEnum["AfricaGaborone"] = 'Africa/Gaborone'] = "AfricaGaborone";
        TimezoneEnum[TimezoneEnum["AfricaHarare"] = 'Africa/Harare'] = "AfricaHarare";
        TimezoneEnum[TimezoneEnum["AfricaJohannesburg"] = 'Africa/Johannesburg'] = "AfricaJohannesburg";
        TimezoneEnum[TimezoneEnum["AfricaJuba"] = 'Africa/Juba'] = "AfricaJuba";
        TimezoneEnum[TimezoneEnum["AfricaKampala"] = 'Africa/Kampala'] = "AfricaKampala";
        TimezoneEnum[TimezoneEnum["AfricaKhartoum"] = 'Africa/Khartoum'] = "AfricaKhartoum";
        TimezoneEnum[TimezoneEnum["AfricaKigali"] = 'Africa/Kigali'] = "AfricaKigali";
        TimezoneEnum[TimezoneEnum["AfricaKinshasa"] = 'Africa/Kinshasa'] = "AfricaKinshasa";
        TimezoneEnum[TimezoneEnum["AfricaLagos"] = 'Africa/Lagos'] = "AfricaLagos";
        TimezoneEnum[TimezoneEnum["AfricaLibreville"] = 'Africa/Libreville'] = "AfricaLibreville";
        TimezoneEnum[TimezoneEnum["AfricaLome"] = 'Africa/Lome'] = "AfricaLome";
        TimezoneEnum[TimezoneEnum["AfricaLuanda"] = 'Africa/Luanda'] = "AfricaLuanda";
        TimezoneEnum[TimezoneEnum["AfricaLubumbashi"] = 'Africa/Lubumbashi'] = "AfricaLubumbashi";
        TimezoneEnum[TimezoneEnum["AfricaLusaka"] = 'Africa/Lusaka'] = "AfricaLusaka";
        TimezoneEnum[TimezoneEnum["AfricaMalabo"] = 'Africa/Malabo'] = "AfricaMalabo";
        TimezoneEnum[TimezoneEnum["AfricaMaputo"] = 'Africa/Maputo'] = "AfricaMaputo";
        TimezoneEnum[TimezoneEnum["AfricaMaseru"] = 'Africa/Maseru'] = "AfricaMaseru";
        TimezoneEnum[TimezoneEnum["AfricaMbabane"] = 'Africa/Mbabane'] = "AfricaMbabane";
        TimezoneEnum[TimezoneEnum["AfricaMogadishu"] = 'Africa/Mogadishu'] = "AfricaMogadishu";
        TimezoneEnum[TimezoneEnum["AfricaMonrovia"] = 'Africa/Monrovia'] = "AfricaMonrovia";
        TimezoneEnum[TimezoneEnum["AfricaNairobi"] = 'Africa/Nairobi'] = "AfricaNairobi";
        TimezoneEnum[TimezoneEnum["AfricaNdjamena"] = 'Africa/Ndjamena'] = "AfricaNdjamena";
        TimezoneEnum[TimezoneEnum["AfricaNiamey"] = 'Africa/Niamey'] = "AfricaNiamey";
        TimezoneEnum[TimezoneEnum["AfricaNouakchott"] = 'Africa/Nouakchott'] = "AfricaNouakchott";
        TimezoneEnum[TimezoneEnum["AfricaOuagadougou"] = 'Africa/Ouagadougou'] = "AfricaOuagadougou";
        TimezoneEnum[TimezoneEnum["AfricaPortoNovo"] = 'Africa/Porto-Novo'] = "AfricaPortoNovo";
        TimezoneEnum[TimezoneEnum["AfricaSaoTome"] = 'Africa/Sao_Tome'] = "AfricaSaoTome";
        TimezoneEnum[TimezoneEnum["AfricaTimbuktu"] = 'Africa/Timbuktu'] = "AfricaTimbuktu";
        TimezoneEnum[TimezoneEnum["AfricaTripoli"] = 'Africa/Tripoli'] = "AfricaTripoli";
        TimezoneEnum[TimezoneEnum["AfricaTunis"] = 'Africa/Tunis'] = "AfricaTunis";
        TimezoneEnum[TimezoneEnum["AfricaWindhoek"] = 'Africa/Windhoek'] = "AfricaWindhoek";
        TimezoneEnum[TimezoneEnum["AmericaAdak"] = 'America/Adak'] = "AmericaAdak";
        TimezoneEnum[TimezoneEnum["AmericaAnchorage"] = 'America/Anchorage'] = "AmericaAnchorage";
        TimezoneEnum[TimezoneEnum["AmericaAnguilla"] = 'America/Anguilla'] = "AmericaAnguilla";
        TimezoneEnum[TimezoneEnum["AmericaAntigua"] = 'America/Antigua'] = "AmericaAntigua";
        TimezoneEnum[TimezoneEnum["AmericaAraguaina"] = 'America/Araguaina'] = "AmericaAraguaina";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaBuenosAires"] = 'America/Argentina/Buenos_Aires'] = "AmericaArgentinaBuenosAires";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaCatamarca"] = 'America/Argentina/Catamarca'] = "AmericaArgentinaCatamarca";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaComodRivadavia"] = 'America/Argentina/ComodRivadavia'] = "AmericaArgentinaComodRivadavia";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaCordoba"] = 'America/Argentina/Cordoba'] = "AmericaArgentinaCordoba";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaJujuy"] = 'America/Argentina/Jujuy'] = "AmericaArgentinaJujuy";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaLaRioja"] = 'America/Argentina/La_Rioja'] = "AmericaArgentinaLaRioja";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaMendoza"] = 'America/Argentina/Mendoza'] = "AmericaArgentinaMendoza";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaRioGallegos"] = 'America/Argentina/Rio_Gallegos'] = "AmericaArgentinaRioGallegos";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaSalta"] = 'America/Argentina/Salta'] = "AmericaArgentinaSalta";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaSanJuan"] = 'America/Argentina/San_Juan'] = "AmericaArgentinaSanJuan";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaSanLuis"] = 'America/Argentina/San_Luis'] = "AmericaArgentinaSanLuis";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaTucuman"] = 'America/Argentina/Tucuman'] = "AmericaArgentinaTucuman";
        TimezoneEnum[TimezoneEnum["AmericaArgentinaUshuaia"] = 'America/Argentina/Ushuaia'] = "AmericaArgentinaUshuaia";
        TimezoneEnum[TimezoneEnum["AmericaAruba"] = 'America/Aruba'] = "AmericaAruba";
        TimezoneEnum[TimezoneEnum["AmericaAsuncion"] = 'America/Asuncion'] = "AmericaAsuncion";
        TimezoneEnum[TimezoneEnum["AmericaAtikokan"] = 'America/Atikokan'] = "AmericaAtikokan";
        TimezoneEnum[TimezoneEnum["AmericaAtka"] = 'America/Atka'] = "AmericaAtka";
        TimezoneEnum[TimezoneEnum["AmericaBahia"] = 'America/Bahia'] = "AmericaBahia";
        TimezoneEnum[TimezoneEnum["AmericaBahiaBanderas"] = 'America/Bahia_Banderas'] = "AmericaBahiaBanderas";
        TimezoneEnum[TimezoneEnum["AmericaBarbados"] = 'America/Barbados'] = "AmericaBarbados";
        TimezoneEnum[TimezoneEnum["AmericaBelem"] = 'America/Belem'] = "AmericaBelem";
        TimezoneEnum[TimezoneEnum["AmericaBelize"] = 'America/Belize'] = "AmericaBelize";
        TimezoneEnum[TimezoneEnum["AmericaBlancSablon"] = 'America/Blanc-Sablon'] = "AmericaBlancSablon";
        TimezoneEnum[TimezoneEnum["AmericaBoaVista"] = 'America/Boa_Vista'] = "AmericaBoaVista";
        TimezoneEnum[TimezoneEnum["AmericaBogota"] = 'America/Bogota'] = "AmericaBogota";
        TimezoneEnum[TimezoneEnum["AmericaBoise"] = 'America/Boise'] = "AmericaBoise";
        TimezoneEnum[TimezoneEnum["AmericaBuenosAires"] = 'America/Buenos_Aires'] = "AmericaBuenosAires";
        TimezoneEnum[TimezoneEnum["AmericaCambridgeBay"] = 'America/Cambridge_Bay'] = "AmericaCambridgeBay";
        TimezoneEnum[TimezoneEnum["AmericaCampoGrande"] = 'America/Campo_Grande'] = "AmericaCampoGrande";
        TimezoneEnum[TimezoneEnum["AmericaCancun"] = 'America/Cancun'] = "AmericaCancun";
        TimezoneEnum[TimezoneEnum["AmericaCaracas"] = 'America/Caracas'] = "AmericaCaracas";
        TimezoneEnum[TimezoneEnum["AmericaCatamarca"] = 'America/Catamarca'] = "AmericaCatamarca";
        TimezoneEnum[TimezoneEnum["AmericaCayenne"] = 'America/Cayenne'] = "AmericaCayenne";
        TimezoneEnum[TimezoneEnum["AmericaCayman"] = 'America/Cayman'] = "AmericaCayman";
        TimezoneEnum[TimezoneEnum["AmericaChicago"] = 'America/Chicago'] = "AmericaChicago";
        TimezoneEnum[TimezoneEnum["AmericaChihuahua"] = 'America/Chihuahua'] = "AmericaChihuahua";
        TimezoneEnum[TimezoneEnum["AmericaCoralHarbour"] = 'America/Coral_Harbour'] = "AmericaCoralHarbour";
        TimezoneEnum[TimezoneEnum["AmericaCordoba"] = 'America/Cordoba'] = "AmericaCordoba";
        TimezoneEnum[TimezoneEnum["AmericaCostaRica"] = 'America/Costa_Rica'] = "AmericaCostaRica";
        TimezoneEnum[TimezoneEnum["AmericaCreston"] = 'America/Creston'] = "AmericaCreston";
        TimezoneEnum[TimezoneEnum["AmericaCuiaba"] = 'America/Cuiaba'] = "AmericaCuiaba";
        TimezoneEnum[TimezoneEnum["AmericaCuracao"] = 'America/Curacao'] = "AmericaCuracao";
        TimezoneEnum[TimezoneEnum["AmericaDanmarkshavn"] = 'America/Danmarkshavn'] = "AmericaDanmarkshavn";
        TimezoneEnum[TimezoneEnum["AmericaDawson"] = 'America/Dawson'] = "AmericaDawson";
        TimezoneEnum[TimezoneEnum["AmericaDawsonCreek"] = 'America/Dawson_Creek'] = "AmericaDawsonCreek";
        TimezoneEnum[TimezoneEnum["AmericaDenver"] = 'America/Denver'] = "AmericaDenver";
        TimezoneEnum[TimezoneEnum["AmericaDetroit"] = 'America/Detroit'] = "AmericaDetroit";
        TimezoneEnum[TimezoneEnum["AmericaDominica"] = 'America/Dominica'] = "AmericaDominica";
        TimezoneEnum[TimezoneEnum["AmericaEdmonton"] = 'America/Edmonton'] = "AmericaEdmonton";
        TimezoneEnum[TimezoneEnum["AmericaEirunepe"] = 'America/Eirunepe'] = "AmericaEirunepe";
        TimezoneEnum[TimezoneEnum["AmericaElSalvador"] = 'America/El_Salvador'] = "AmericaElSalvador";
        TimezoneEnum[TimezoneEnum["AmericaEnsenada"] = 'America/Ensenada'] = "AmericaEnsenada";
        TimezoneEnum[TimezoneEnum["AmericaFortNelson"] = 'America/Fort_Nelson'] = "AmericaFortNelson";
        TimezoneEnum[TimezoneEnum["AmericaFortWayne"] = 'America/Fort_Wayne'] = "AmericaFortWayne";
        TimezoneEnum[TimezoneEnum["AmericaFortaleza"] = 'America/Fortaleza'] = "AmericaFortaleza";
        TimezoneEnum[TimezoneEnum["AmericaGlaceBay"] = 'America/Glace_Bay'] = "AmericaGlaceBay";
        TimezoneEnum[TimezoneEnum["AmericaGodthab"] = 'America/Godthab'] = "AmericaGodthab";
        TimezoneEnum[TimezoneEnum["AmericaGooseBay"] = 'America/Goose_Bay'] = "AmericaGooseBay";
        TimezoneEnum[TimezoneEnum["AmericaGrandTurk"] = 'America/Grand_Turk'] = "AmericaGrandTurk";
        TimezoneEnum[TimezoneEnum["AmericaGrenada"] = 'America/Grenada'] = "AmericaGrenada";
        TimezoneEnum[TimezoneEnum["AmericaGuadeloupe"] = 'America/Guadeloupe'] = "AmericaGuadeloupe";
        TimezoneEnum[TimezoneEnum["AmericaGuatemala"] = 'America/Guatemala'] = "AmericaGuatemala";
        TimezoneEnum[TimezoneEnum["AmericaGuayaquil"] = 'America/Guayaquil'] = "AmericaGuayaquil";
        TimezoneEnum[TimezoneEnum["AmericaGuyana"] = 'America/Guyana'] = "AmericaGuyana";
        TimezoneEnum[TimezoneEnum["AmericaHalifax"] = 'America/Halifax'] = "AmericaHalifax";
        TimezoneEnum[TimezoneEnum["AmericaHavana"] = 'America/Havana'] = "AmericaHavana";
        TimezoneEnum[TimezoneEnum["AmericaHermosillo"] = 'America/Hermosillo'] = "AmericaHermosillo";
        TimezoneEnum[TimezoneEnum["AmericaIndianaIndianapolis"] = 'America/Indiana/Indianapolis'] = "AmericaIndianaIndianapolis";
        TimezoneEnum[TimezoneEnum["AmericaIndianaKnox"] = 'America/Indiana/Knox'] = "AmericaIndianaKnox";
        TimezoneEnum[TimezoneEnum["AmericaIndianaMarengo"] = 'America/Indiana/Marengo'] = "AmericaIndianaMarengo";
        TimezoneEnum[TimezoneEnum["AmericaIndianaPetersburg"] = 'America/Indiana/Petersburg'] = "AmericaIndianaPetersburg";
        TimezoneEnum[TimezoneEnum["AmericaIndianaTellCity"] = 'America/Indiana/Tell_City'] = "AmericaIndianaTellCity";
        TimezoneEnum[TimezoneEnum["AmericaIndianaVevay"] = 'America/Indiana/Vevay'] = "AmericaIndianaVevay";
        TimezoneEnum[TimezoneEnum["AmericaIndianaVincennes"] = 'America/Indiana/Vincennes'] = "AmericaIndianaVincennes";
        TimezoneEnum[TimezoneEnum["AmericaIndianaWinamac"] = 'America/Indiana/Winamac'] = "AmericaIndianaWinamac";
        TimezoneEnum[TimezoneEnum["AmericaIndianapolis"] = 'America/Indianapolis'] = "AmericaIndianapolis";
        TimezoneEnum[TimezoneEnum["AmericaInuvik"] = 'America/Inuvik'] = "AmericaInuvik";
        TimezoneEnum[TimezoneEnum["AmericaIqaluit"] = 'America/Iqaluit'] = "AmericaIqaluit";
        TimezoneEnum[TimezoneEnum["AmericaJamaica"] = 'America/Jamaica'] = "AmericaJamaica";
        TimezoneEnum[TimezoneEnum["AmericaJujuy"] = 'America/Jujuy'] = "AmericaJujuy";
        TimezoneEnum[TimezoneEnum["AmericaJuneau"] = 'America/Juneau'] = "AmericaJuneau";
        TimezoneEnum[TimezoneEnum["AmericaKentuckyLouisville"] = 'America/Kentucky/Louisville'] = "AmericaKentuckyLouisville";
        TimezoneEnum[TimezoneEnum["AmericaKentuckyMonticello"] = 'America/Kentucky/Monticello'] = "AmericaKentuckyMonticello";
        TimezoneEnum[TimezoneEnum["AmericaKnoxIN"] = 'America/Knox_IN'] = "AmericaKnoxIN";
        TimezoneEnum[TimezoneEnum["AmericaKralendijk"] = 'America/Kralendijk'] = "AmericaKralendijk";
        TimezoneEnum[TimezoneEnum["AmericaLaPaz"] = 'America/La_Paz'] = "AmericaLaPaz";
        TimezoneEnum[TimezoneEnum["AmericaLima"] = 'America/Lima'] = "AmericaLima";
        TimezoneEnum[TimezoneEnum["AmericaLosAngeles"] = 'America/Los_Angeles'] = "AmericaLosAngeles";
        TimezoneEnum[TimezoneEnum["AmericaLouisville"] = 'America/Louisville'] = "AmericaLouisville";
        TimezoneEnum[TimezoneEnum["AmericaLowerPrinces"] = 'America/Lower_Princes'] = "AmericaLowerPrinces";
        TimezoneEnum[TimezoneEnum["AmericaMaceio"] = 'America/Maceio'] = "AmericaMaceio";
        TimezoneEnum[TimezoneEnum["AmericaManagua"] = 'America/Managua'] = "AmericaManagua";
        TimezoneEnum[TimezoneEnum["AmericaManaus"] = 'America/Manaus'] = "AmericaManaus";
        TimezoneEnum[TimezoneEnum["AmericaMarigot"] = 'America/Marigot'] = "AmericaMarigot";
        TimezoneEnum[TimezoneEnum["AmericaMartinique"] = 'America/Martinique'] = "AmericaMartinique";
        TimezoneEnum[TimezoneEnum["AmericaMatamoros"] = 'America/Matamoros'] = "AmericaMatamoros";
        TimezoneEnum[TimezoneEnum["AmericaMazatlan"] = 'America/Mazatlan'] = "AmericaMazatlan";
        TimezoneEnum[TimezoneEnum["AmericaMendoza"] = 'America/Mendoza'] = "AmericaMendoza";
        TimezoneEnum[TimezoneEnum["AmericaMenominee"] = 'America/Menominee'] = "AmericaMenominee";
        TimezoneEnum[TimezoneEnum["AmericaMerida"] = 'America/Merida'] = "AmericaMerida";
        TimezoneEnum[TimezoneEnum["AmericaMetlakatla"] = 'America/Metlakatla'] = "AmericaMetlakatla";
        TimezoneEnum[TimezoneEnum["AmericaMexicoCity"] = 'America/Mexico_City'] = "AmericaMexicoCity";
        TimezoneEnum[TimezoneEnum["AmericaMiquelon"] = 'America/Miquelon'] = "AmericaMiquelon";
        TimezoneEnum[TimezoneEnum["AmericaMoncton"] = 'America/Moncton'] = "AmericaMoncton";
        TimezoneEnum[TimezoneEnum["AmericaMonterrey"] = 'America/Monterrey'] = "AmericaMonterrey";
        TimezoneEnum[TimezoneEnum["AmericaMontevideo"] = 'America/Montevideo'] = "AmericaMontevideo";
        TimezoneEnum[TimezoneEnum["AmericaMontreal"] = 'America/Montreal'] = "AmericaMontreal";
        TimezoneEnum[TimezoneEnum["AmericaMontserrat"] = 'America/Montserrat'] = "AmericaMontserrat";
        TimezoneEnum[TimezoneEnum["AmericaNassau"] = 'America/Nassau'] = "AmericaNassau";
        TimezoneEnum[TimezoneEnum["AmericaNewYork"] = 'America/New_York'] = "AmericaNewYork";
        TimezoneEnum[TimezoneEnum["AmericaNipigon"] = 'America/Nipigon'] = "AmericaNipigon";
        TimezoneEnum[TimezoneEnum["AmericaNome"] = 'America/Nome'] = "AmericaNome";
        TimezoneEnum[TimezoneEnum["AmericaNoronha"] = 'America/Noronha'] = "AmericaNoronha";
        TimezoneEnum[TimezoneEnum["AmericaNorthDakotaBeulah"] = 'America/North_Dakota/Beulah'] = "AmericaNorthDakotaBeulah";
        TimezoneEnum[TimezoneEnum["AmericaNorthDakotaCenter"] = 'America/North_Dakota/Center'] = "AmericaNorthDakotaCenter";
        TimezoneEnum[TimezoneEnum["AmericaNorthDakotaNewSalem"] = 'America/North_Dakota/New_Salem'] = "AmericaNorthDakotaNewSalem";
        TimezoneEnum[TimezoneEnum["AmericaNuuk"] = 'America/Nuuk'] = "AmericaNuuk";
        TimezoneEnum[TimezoneEnum["AmericaOjinaga"] = 'America/Ojinaga'] = "AmericaOjinaga";
        TimezoneEnum[TimezoneEnum["AmericaPanama"] = 'America/Panama'] = "AmericaPanama";
        TimezoneEnum[TimezoneEnum["AmericaPangnirtung"] = 'America/Pangnirtung'] = "AmericaPangnirtung";
        TimezoneEnum[TimezoneEnum["AmericaParamaribo"] = 'America/Paramaribo'] = "AmericaParamaribo";
        TimezoneEnum[TimezoneEnum["AmericaPhoenix"] = 'America/Phoenix'] = "AmericaPhoenix";
        TimezoneEnum[TimezoneEnum["AmericaPortAuPrince"] = 'America/Port-au-Prince'] = "AmericaPortAuPrince";
        TimezoneEnum[TimezoneEnum["AmericaPortOfSpain"] = 'America/Port_of_Spain'] = "AmericaPortOfSpain";
        TimezoneEnum[TimezoneEnum["AmericaPortoAcre"] = 'America/Porto_Acre'] = "AmericaPortoAcre";
        TimezoneEnum[TimezoneEnum["AmericaPortoVelho"] = 'America/Porto_Velho'] = "AmericaPortoVelho";
        TimezoneEnum[TimezoneEnum["AmericaPuertoRico"] = 'America/Puerto_Rico'] = "AmericaPuertoRico";
        TimezoneEnum[TimezoneEnum["AmericaPuntaArenas"] = 'America/Punta_Arenas'] = "AmericaPuntaArenas";
        TimezoneEnum[TimezoneEnum["AmericaRainyRiver"] = 'America/Rainy_River'] = "AmericaRainyRiver";
        TimezoneEnum[TimezoneEnum["AmericaRankinInlet"] = 'America/Rankin_Inlet'] = "AmericaRankinInlet";
        TimezoneEnum[TimezoneEnum["AmericaRecife"] = 'America/Recife'] = "AmericaRecife";
        TimezoneEnum[TimezoneEnum["AmericaRegina"] = 'America/Regina'] = "AmericaRegina";
        TimezoneEnum[TimezoneEnum["AmericaResolute"] = 'America/Resolute'] = "AmericaResolute";
        TimezoneEnum[TimezoneEnum["AmericaRioBranco"] = 'America/Rio_Branco'] = "AmericaRioBranco";
        TimezoneEnum[TimezoneEnum["AmericaRosario"] = 'America/Rosario'] = "AmericaRosario";
        TimezoneEnum[TimezoneEnum["AmericaSantaIsabel"] = 'America/Santa_Isabel'] = "AmericaSantaIsabel";
        TimezoneEnum[TimezoneEnum["AmericaSantarem"] = 'America/Santarem'] = "AmericaSantarem";
        TimezoneEnum[TimezoneEnum["AmericaSantiago"] = 'America/Santiago'] = "AmericaSantiago";
        TimezoneEnum[TimezoneEnum["AmericaSantoDomingo"] = 'America/Santo_Domingo'] = "AmericaSantoDomingo";
        TimezoneEnum[TimezoneEnum["AmericaSaoPaulo"] = 'America/Sao_Paulo'] = "AmericaSaoPaulo";
        TimezoneEnum[TimezoneEnum["AmericaScoresbysund"] = 'America/Scoresbysund'] = "AmericaScoresbysund";
        TimezoneEnum[TimezoneEnum["AmericaShiprock"] = 'America/Shiprock'] = "AmericaShiprock";
        TimezoneEnum[TimezoneEnum["AmericaSitka"] = 'America/Sitka'] = "AmericaSitka";
        TimezoneEnum[TimezoneEnum["AmericaStBarthelemy"] = 'America/St_Barthelemy'] = "AmericaStBarthelemy";
        TimezoneEnum[TimezoneEnum["AmericaStJohns"] = 'America/St_Johns'] = "AmericaStJohns";
        TimezoneEnum[TimezoneEnum["AmericaStKitts"] = 'America/St_Kitts'] = "AmericaStKitts";
        TimezoneEnum[TimezoneEnum["AmericaStLucia"] = 'America/St_Lucia'] = "AmericaStLucia";
        TimezoneEnum[TimezoneEnum["AmericaStThomas"] = 'America/St_Thomas'] = "AmericaStThomas";
        TimezoneEnum[TimezoneEnum["AmericaStVincent"] = 'America/St_Vincent'] = "AmericaStVincent";
        TimezoneEnum[TimezoneEnum["AmericaSwiftCurrent"] = 'America/Swift_Current'] = "AmericaSwiftCurrent";
        TimezoneEnum[TimezoneEnum["AmericaTegucigalpa"] = 'America/Tegucigalpa'] = "AmericaTegucigalpa";
        TimezoneEnum[TimezoneEnum["AmericaThule"] = 'America/Thule'] = "AmericaThule";
        TimezoneEnum[TimezoneEnum["AmericaThunderBay"] = 'America/Thunder_Bay'] = "AmericaThunderBay";
        TimezoneEnum[TimezoneEnum["AmericaTijuana"] = 'America/Tijuana'] = "AmericaTijuana";
        TimezoneEnum[TimezoneEnum["AmericaToronto"] = 'America/Toronto'] = "AmericaToronto";
        TimezoneEnum[TimezoneEnum["AmericaTortola"] = 'America/Tortola'] = "AmericaTortola";
        TimezoneEnum[TimezoneEnum["AmericaVancouver"] = 'America/Vancouver'] = "AmericaVancouver";
        TimezoneEnum[TimezoneEnum["AmericaVirgin"] = 'America/Virgin'] = "AmericaVirgin";
        TimezoneEnum[TimezoneEnum["AmericaWhitehorse"] = 'America/Whitehorse'] = "AmericaWhitehorse";
        TimezoneEnum[TimezoneEnum["AmericaWinnipeg"] = 'America/Winnipeg'] = "AmericaWinnipeg";
        TimezoneEnum[TimezoneEnum["AmericaYakutat"] = 'America/Yakutat'] = "AmericaYakutat";
        TimezoneEnum[TimezoneEnum["AmericaYellowknife"] = 'America/Yellowknife'] = "AmericaYellowknife";
        TimezoneEnum[TimezoneEnum["AntarcticaCasey"] = 'Antarctica/Casey'] = "AntarcticaCasey";
        TimezoneEnum[TimezoneEnum["AntarcticaDavis"] = 'Antarctica/Davis'] = "AntarcticaDavis";
        TimezoneEnum[TimezoneEnum["AntarcticaDumontDUrville"] = 'Antarctica/DumontDUrville'] = "AntarcticaDumontDUrville";
        TimezoneEnum[TimezoneEnum["AntarcticaMacquarie"] = 'Antarctica/Macquarie'] = "AntarcticaMacquarie";
        TimezoneEnum[TimezoneEnum["AntarcticaMawson"] = 'Antarctica/Mawson'] = "AntarcticaMawson";
        TimezoneEnum[TimezoneEnum["AntarcticaMcMurdo"] = 'Antarctica/McMurdo'] = "AntarcticaMcMurdo";
        TimezoneEnum[TimezoneEnum["AntarcticaPalmer"] = 'Antarctica/Palmer'] = "AntarcticaPalmer";
        TimezoneEnum[TimezoneEnum["AntarcticaRothera"] = 'Antarctica/Rothera'] = "AntarcticaRothera";
        TimezoneEnum[TimezoneEnum["AntarcticaSouthPole"] = 'Antarctica/South_Pole'] = "AntarcticaSouthPole";
        TimezoneEnum[TimezoneEnum["AntarcticaSyowa"] = 'Antarctica/Syowa'] = "AntarcticaSyowa";
        TimezoneEnum[TimezoneEnum["AntarcticaTroll"] = 'Antarctica/Troll'] = "AntarcticaTroll";
        TimezoneEnum[TimezoneEnum["AntarcticaVostok"] = 'Antarctica/Vostok'] = "AntarcticaVostok";
        TimezoneEnum[TimezoneEnum["ArcticLongyearbyen"] = 'Arctic/Longyearbyen'] = "ArcticLongyearbyen";
        TimezoneEnum[TimezoneEnum["AsiaAden"] = 'Asia/Aden'] = "AsiaAden";
        TimezoneEnum[TimezoneEnum["AsiaAlmaty"] = 'Asia/Almaty'] = "AsiaAlmaty";
        TimezoneEnum[TimezoneEnum["AsiaAmman"] = 'Asia/Amman'] = "AsiaAmman";
        TimezoneEnum[TimezoneEnum["AsiaAnadyr"] = 'Asia/Anadyr'] = "AsiaAnadyr";
        TimezoneEnum[TimezoneEnum["AsiaAqtau"] = 'Asia/Aqtau'] = "AsiaAqtau";
        TimezoneEnum[TimezoneEnum["AsiaAqtobe"] = 'Asia/Aqtobe'] = "AsiaAqtobe";
        TimezoneEnum[TimezoneEnum["AsiaAshgabat"] = 'Asia/Ashgabat'] = "AsiaAshgabat";
        TimezoneEnum[TimezoneEnum["AsiaAshkhabad"] = 'Asia/Ashkhabad'] = "AsiaAshkhabad";
        TimezoneEnum[TimezoneEnum["AsiaAtyrau"] = 'Asia/Atyrau'] = "AsiaAtyrau";
        TimezoneEnum[TimezoneEnum["AsiaBaghdad"] = 'Asia/Baghdad'] = "AsiaBaghdad";
        TimezoneEnum[TimezoneEnum["AsiaBahrain"] = 'Asia/Bahrain'] = "AsiaBahrain";
        TimezoneEnum[TimezoneEnum["AsiaBaku"] = 'Asia/Baku'] = "AsiaBaku";
        TimezoneEnum[TimezoneEnum["AsiaBangkok"] = 'Asia/Bangkok'] = "AsiaBangkok";
        TimezoneEnum[TimezoneEnum["AsiaBarnaul"] = 'Asia/Barnaul'] = "AsiaBarnaul";
        TimezoneEnum[TimezoneEnum["AsiaBeirut"] = 'Asia/Beirut'] = "AsiaBeirut";
        TimezoneEnum[TimezoneEnum["AsiaBishkek"] = 'Asia/Bishkek'] = "AsiaBishkek";
        TimezoneEnum[TimezoneEnum["AsiaBrunei"] = 'Asia/Brunei'] = "AsiaBrunei";
        TimezoneEnum[TimezoneEnum["AsiaCalcutta"] = 'Asia/Calcutta'] = "AsiaCalcutta";
        TimezoneEnum[TimezoneEnum["AsiaChita"] = 'Asia/Chita'] = "AsiaChita";
        TimezoneEnum[TimezoneEnum["AsiaChoibalsan"] = 'Asia/Choibalsan'] = "AsiaChoibalsan";
        TimezoneEnum[TimezoneEnum["AsiaChongqing"] = 'Asia/Chongqing'] = "AsiaChongqing";
        TimezoneEnum[TimezoneEnum["AsiaChungking"] = 'Asia/Chungking'] = "AsiaChungking";
        TimezoneEnum[TimezoneEnum["AsiaColombo"] = 'Asia/Colombo'] = "AsiaColombo";
        TimezoneEnum[TimezoneEnum["AsiaDacca"] = 'Asia/Dacca'] = "AsiaDacca";
        TimezoneEnum[TimezoneEnum["AsiaDamascus"] = 'Asia/Damascus'] = "AsiaDamascus";
        TimezoneEnum[TimezoneEnum["AsiaDhaka"] = 'Asia/Dhaka'] = "AsiaDhaka";
        TimezoneEnum[TimezoneEnum["AsiaDili"] = 'Asia/Dili'] = "AsiaDili";
        TimezoneEnum[TimezoneEnum["AsiaDubai"] = 'Asia/Dubai'] = "AsiaDubai";
        TimezoneEnum[TimezoneEnum["AsiaDushanbe"] = 'Asia/Dushanbe'] = "AsiaDushanbe";
        TimezoneEnum[TimezoneEnum["AsiaFamagusta"] = 'Asia/Famagusta'] = "AsiaFamagusta";
        TimezoneEnum[TimezoneEnum["AsiaGaza"] = 'Asia/Gaza'] = "AsiaGaza";
        TimezoneEnum[TimezoneEnum["AsiaHarbin"] = 'Asia/Harbin'] = "AsiaHarbin";
        TimezoneEnum[TimezoneEnum["AsiaHebron"] = 'Asia/Hebron'] = "AsiaHebron";
        TimezoneEnum[TimezoneEnum["AsiaHoChiMinh"] = 'Asia/Ho_Chi_Minh'] = "AsiaHoChiMinh";
        TimezoneEnum[TimezoneEnum["AsiaHongKong"] = 'Asia/Hong_Kong'] = "AsiaHongKong";
        TimezoneEnum[TimezoneEnum["AsiaHovd"] = 'Asia/Hovd'] = "AsiaHovd";
        TimezoneEnum[TimezoneEnum["AsiaIrkutsk"] = 'Asia/Irkutsk'] = "AsiaIrkutsk";
        TimezoneEnum[TimezoneEnum["AsiaIstanbul"] = 'Asia/Istanbul'] = "AsiaIstanbul";
        TimezoneEnum[TimezoneEnum["AsiaJakarta"] = 'Asia/Jakarta'] = "AsiaJakarta";
        TimezoneEnum[TimezoneEnum["AsiaJayapura"] = 'Asia/Jayapura'] = "AsiaJayapura";
        TimezoneEnum[TimezoneEnum["AsiaJerusalem"] = 'Asia/Jerusalem'] = "AsiaJerusalem";
        TimezoneEnum[TimezoneEnum["AsiaKabul"] = 'Asia/Kabul'] = "AsiaKabul";
        TimezoneEnum[TimezoneEnum["AsiaKamchatka"] = 'Asia/Kamchatka'] = "AsiaKamchatka";
        TimezoneEnum[TimezoneEnum["AsiaKarachi"] = 'Asia/Karachi'] = "AsiaKarachi";
        TimezoneEnum[TimezoneEnum["AsiaKashgar"] = 'Asia/Kashgar'] = "AsiaKashgar";
        TimezoneEnum[TimezoneEnum["AsiaKathmandu"] = 'Asia/Kathmandu'] = "AsiaKathmandu";
        TimezoneEnum[TimezoneEnum["AsiaKatmandu"] = 'Asia/Katmandu'] = "AsiaKatmandu";
        TimezoneEnum[TimezoneEnum["AsiaKhandyga"] = 'Asia/Khandyga'] = "AsiaKhandyga";
        TimezoneEnum[TimezoneEnum["AsiaKolkata"] = 'Asia/Kolkata'] = "AsiaKolkata";
        TimezoneEnum[TimezoneEnum["AsiaKrasnoyarsk"] = 'Asia/Krasnoyarsk'] = "AsiaKrasnoyarsk";
        TimezoneEnum[TimezoneEnum["AsiaKualaLumpur"] = 'Asia/Kuala_Lumpur'] = "AsiaKualaLumpur";
        TimezoneEnum[TimezoneEnum["AsiaKuching"] = 'Asia/Kuching'] = "AsiaKuching";
        TimezoneEnum[TimezoneEnum["AsiaKuwait"] = 'Asia/Kuwait'] = "AsiaKuwait";
        TimezoneEnum[TimezoneEnum["AsiaMacao"] = 'Asia/Macao'] = "AsiaMacao";
        TimezoneEnum[TimezoneEnum["AsiaMacau"] = 'Asia/Macau'] = "AsiaMacau";
        TimezoneEnum[TimezoneEnum["AsiaMagadan"] = 'Asia/Magadan'] = "AsiaMagadan";
        TimezoneEnum[TimezoneEnum["AsiaMakassar"] = 'Asia/Makassar'] = "AsiaMakassar";
        TimezoneEnum[TimezoneEnum["AsiaManila"] = 'Asia/Manila'] = "AsiaManila";
        TimezoneEnum[TimezoneEnum["AsiaMuscat"] = 'Asia/Muscat'] = "AsiaMuscat";
        TimezoneEnum[TimezoneEnum["AsiaNicosia"] = 'Asia/Nicosia'] = "AsiaNicosia";
        TimezoneEnum[TimezoneEnum["AsiaNovokuznetsk"] = 'Asia/Novokuznetsk'] = "AsiaNovokuznetsk";
        TimezoneEnum[TimezoneEnum["AsiaNovosibirsk"] = 'Asia/Novosibirsk'] = "AsiaNovosibirsk";
        TimezoneEnum[TimezoneEnum["AsiaOmsk"] = 'Asia/Omsk'] = "AsiaOmsk";
        TimezoneEnum[TimezoneEnum["AsiaOral"] = 'Asia/Oral'] = "AsiaOral";
        TimezoneEnum[TimezoneEnum["AsiaPhnomPenh"] = 'Asia/Phnom_Penh'] = "AsiaPhnomPenh";
        TimezoneEnum[TimezoneEnum["AsiaPontianak"] = 'Asia/Pontianak'] = "AsiaPontianak";
        TimezoneEnum[TimezoneEnum["AsiaPyongyang"] = 'Asia/Pyongyang'] = "AsiaPyongyang";
        TimezoneEnum[TimezoneEnum["AsiaQatar"] = 'Asia/Qatar'] = "AsiaQatar";
        TimezoneEnum[TimezoneEnum["AsiaQostanay"] = 'Asia/Qostanay'] = "AsiaQostanay";
        TimezoneEnum[TimezoneEnum["AsiaQyzylorda"] = 'Asia/Qyzylorda'] = "AsiaQyzylorda";
        TimezoneEnum[TimezoneEnum["AsiaRangoon"] = 'Asia/Rangoon'] = "AsiaRangoon";
        TimezoneEnum[TimezoneEnum["AsiaRiyadh"] = 'Asia/Riyadh'] = "AsiaRiyadh";
        TimezoneEnum[TimezoneEnum["AsiaSaigon"] = 'Asia/Saigon'] = "AsiaSaigon";
        TimezoneEnum[TimezoneEnum["AsiaSakhalin"] = 'Asia/Sakhalin'] = "AsiaSakhalin";
        TimezoneEnum[TimezoneEnum["AsiaSamarkand"] = 'Asia/Samarkand'] = "AsiaSamarkand";
        TimezoneEnum[TimezoneEnum["AsiaSeoul"] = 'Asia/Seoul'] = "AsiaSeoul";
        TimezoneEnum[TimezoneEnum["AsiaShanghai"] = 'Asia/Shanghai'] = "AsiaShanghai";
        TimezoneEnum[TimezoneEnum["AsiaSingapore"] = 'Asia/Singapore'] = "AsiaSingapore";
        TimezoneEnum[TimezoneEnum["AsiaSrednekolymsk"] = 'Asia/Srednekolymsk'] = "AsiaSrednekolymsk";
        TimezoneEnum[TimezoneEnum["AsiaTaipei"] = 'Asia/Taipei'] = "AsiaTaipei";
        TimezoneEnum[TimezoneEnum["AsiaTashkent"] = 'Asia/Tashkent'] = "AsiaTashkent";
        TimezoneEnum[TimezoneEnum["AsiaTbilisi"] = 'Asia/Tbilisi'] = "AsiaTbilisi";
        TimezoneEnum[TimezoneEnum["AsiaTehran"] = 'Asia/Tehran'] = "AsiaTehran";
        TimezoneEnum[TimezoneEnum["AsiaTelAviv"] = 'Asia/Tel_Aviv'] = "AsiaTelAviv";
        TimezoneEnum[TimezoneEnum["AsiaThimbu"] = 'Asia/Thimbu'] = "AsiaThimbu";
        TimezoneEnum[TimezoneEnum["AsiaThimphu"] = 'Asia/Thimphu'] = "AsiaThimphu";
        TimezoneEnum[TimezoneEnum["AsiaTokyo"] = 'Asia/Tokyo'] = "AsiaTokyo";
        TimezoneEnum[TimezoneEnum["AsiaTomsk"] = 'Asia/Tomsk'] = "AsiaTomsk";
        TimezoneEnum[TimezoneEnum["AsiaUjungPandang"] = 'Asia/Ujung_Pandang'] = "AsiaUjungPandang";
        TimezoneEnum[TimezoneEnum["AsiaUlaanbaatar"] = 'Asia/Ulaanbaatar'] = "AsiaUlaanbaatar";
        TimezoneEnum[TimezoneEnum["AsiaUlanBator"] = 'Asia/Ulan_Bator'] = "AsiaUlanBator";
        TimezoneEnum[TimezoneEnum["AsiaUrumqi"] = 'Asia/Urumqi'] = "AsiaUrumqi";
        TimezoneEnum[TimezoneEnum["AsiaUstNera"] = 'Asia/Ust-Nera'] = "AsiaUstNera";
        TimezoneEnum[TimezoneEnum["AsiaVientiane"] = 'Asia/Vientiane'] = "AsiaVientiane";
        TimezoneEnum[TimezoneEnum["AsiaVladivostok"] = 'Asia/Vladivostok'] = "AsiaVladivostok";
        TimezoneEnum[TimezoneEnum["AsiaYakutsk"] = 'Asia/Yakutsk'] = "AsiaYakutsk";
        TimezoneEnum[TimezoneEnum["AsiaYangon"] = 'Asia/Yangon'] = "AsiaYangon";
        TimezoneEnum[TimezoneEnum["AsiaYekaterinburg"] = 'Asia/Yekaterinburg'] = "AsiaYekaterinburg";
        TimezoneEnum[TimezoneEnum["AsiaYerevan"] = 'Asia/Yerevan'] = "AsiaYerevan";
        TimezoneEnum[TimezoneEnum["AtlanticAzores"] = 'Atlantic/Azores'] = "AtlanticAzores";
        TimezoneEnum[TimezoneEnum["AtlanticBermuda"] = 'Atlantic/Bermuda'] = "AtlanticBermuda";
        TimezoneEnum[TimezoneEnum["AtlanticCanary"] = 'Atlantic/Canary'] = "AtlanticCanary";
        TimezoneEnum[TimezoneEnum["AtlanticCapeVerde"] = 'Atlantic/Cape_Verde'] = "AtlanticCapeVerde";
        TimezoneEnum[TimezoneEnum["AtlanticFaeroe"] = 'Atlantic/Faeroe'] = "AtlanticFaeroe";
        TimezoneEnum[TimezoneEnum["AtlanticFaroe"] = 'Atlantic/Faroe'] = "AtlanticFaroe";
        TimezoneEnum[TimezoneEnum["AtlanticJanMayen"] = 'Atlantic/Jan_Mayen'] = "AtlanticJanMayen";
        TimezoneEnum[TimezoneEnum["AtlanticMadeira"] = 'Atlantic/Madeira'] = "AtlanticMadeira";
        TimezoneEnum[TimezoneEnum["AtlanticReykjavik"] = 'Atlantic/Reykjavik'] = "AtlanticReykjavik";
        TimezoneEnum[TimezoneEnum["AtlanticSouthGeorgia"] = 'Atlantic/South_Georgia'] = "AtlanticSouthGeorgia";
        TimezoneEnum[TimezoneEnum["AtlanticStHelena"] = 'Atlantic/St_Helena'] = "AtlanticStHelena";
        TimezoneEnum[TimezoneEnum["AtlanticStanley"] = 'Atlantic/Stanley'] = "AtlanticStanley";
        TimezoneEnum[TimezoneEnum["AustraliaACT"] = 'Australia/ACT'] = "AustraliaACT";
        TimezoneEnum[TimezoneEnum["AustraliaAdelaide"] = 'Australia/Adelaide'] = "AustraliaAdelaide";
        TimezoneEnum[TimezoneEnum["AustraliaBrisbane"] = 'Australia/Brisbane'] = "AustraliaBrisbane";
        TimezoneEnum[TimezoneEnum["AustraliaBrokenHill"] = 'Australia/Broken_Hill'] = "AustraliaBrokenHill";
        TimezoneEnum[TimezoneEnum["AustraliaCanberra"] = 'Australia/Canberra'] = "AustraliaCanberra";
        TimezoneEnum[TimezoneEnum["AustraliaCurrie"] = 'Australia/Currie'] = "AustraliaCurrie";
        TimezoneEnum[TimezoneEnum["AustraliaDarwin"] = 'Australia/Darwin'] = "AustraliaDarwin";
        TimezoneEnum[TimezoneEnum["AustraliaEucla"] = 'Australia/Eucla'] = "AustraliaEucla";
        TimezoneEnum[TimezoneEnum["AustraliaHobart"] = 'Australia/Hobart'] = "AustraliaHobart";
        TimezoneEnum[TimezoneEnum["AustraliaLHI"] = 'Australia/LHI'] = "AustraliaLHI";
        TimezoneEnum[TimezoneEnum["AustraliaLindeman"] = 'Australia/Lindeman'] = "AustraliaLindeman";
        TimezoneEnum[TimezoneEnum["AustraliaLordHowe"] = 'Australia/Lord_Howe'] = "AustraliaLordHowe";
        TimezoneEnum[TimezoneEnum["AustraliaMelbourne"] = 'Australia/Melbourne'] = "AustraliaMelbourne";
        TimezoneEnum[TimezoneEnum["AustraliaNSW"] = 'Australia/NSW'] = "AustraliaNSW";
        TimezoneEnum[TimezoneEnum["AustraliaNorth"] = 'Australia/North'] = "AustraliaNorth";
        TimezoneEnum[TimezoneEnum["AustraliaPerth"] = 'Australia/Perth'] = "AustraliaPerth";
        TimezoneEnum[TimezoneEnum["AustraliaQueensland"] = 'Australia/Queensland'] = "AustraliaQueensland";
        TimezoneEnum[TimezoneEnum["AustraliaSouth"] = 'Australia/South'] = "AustraliaSouth";
        TimezoneEnum[TimezoneEnum["AustraliaSydney"] = 'Australia/Sydney'] = "AustraliaSydney";
        TimezoneEnum[TimezoneEnum["AustraliaTasmania"] = 'Australia/Tasmania'] = "AustraliaTasmania";
        TimezoneEnum[TimezoneEnum["AustraliaVictoria"] = 'Australia/Victoria'] = "AustraliaVictoria";
        TimezoneEnum[TimezoneEnum["AustraliaWest"] = 'Australia/West'] = "AustraliaWest";
        TimezoneEnum[TimezoneEnum["AustraliaYancowinna"] = 'Australia/Yancowinna'] = "AustraliaYancowinna";
        TimezoneEnum[TimezoneEnum["BrazilAcre"] = 'Brazil/Acre'] = "BrazilAcre";
        TimezoneEnum[TimezoneEnum["BrazilDeNoronha"] = 'Brazil/DeNoronha'] = "BrazilDeNoronha";
        TimezoneEnum[TimezoneEnum["BrazilEast"] = 'Brazil/East'] = "BrazilEast";
        TimezoneEnum[TimezoneEnum["BrazilWest"] = 'Brazil/West'] = "BrazilWest";
        TimezoneEnum[TimezoneEnum["CET"] = 'CET'] = "CET";
        TimezoneEnum[TimezoneEnum["CST6CDT"] = 'CST6CDT'] = "CST6CDT";
        TimezoneEnum[TimezoneEnum["CanadaAtlantic"] = 'Canada/Atlantic'] = "CanadaAtlantic";
        TimezoneEnum[TimezoneEnum["CanadaCentral"] = 'Canada/Central'] = "CanadaCentral";
        TimezoneEnum[TimezoneEnum["CanadaEastern"] = 'Canada/Eastern'] = "CanadaEastern";
        TimezoneEnum[TimezoneEnum["CanadaMountain"] = 'Canada/Mountain'] = "CanadaMountain";
        TimezoneEnum[TimezoneEnum["CanadaNewfoundland"] = 'Canada/Newfoundland'] = "CanadaNewfoundland";
        TimezoneEnum[TimezoneEnum["CanadaPacific"] = 'Canada/Pacific'] = "CanadaPacific";
        TimezoneEnum[TimezoneEnum["CanadaSaskatchewan"] = 'Canada/Saskatchewan'] = "CanadaSaskatchewan";
        TimezoneEnum[TimezoneEnum["CanadaYukon"] = 'Canada/Yukon'] = "CanadaYukon";
        TimezoneEnum[TimezoneEnum["ChileContinental"] = 'Chile/Continental'] = "ChileContinental";
        TimezoneEnum[TimezoneEnum["ChileEasterIsland"] = 'Chile/EasterIsland'] = "ChileEasterIsland";
        TimezoneEnum[TimezoneEnum["Cuba"] = 'Cuba'] = "Cuba";
        TimezoneEnum[TimezoneEnum["EET"] = 'EET'] = "EET";
        TimezoneEnum[TimezoneEnum["EST"] = 'EST'] = "EST";
        TimezoneEnum[TimezoneEnum["EST5EDT"] = 'EST5EDT'] = "EST5EDT";
        TimezoneEnum[TimezoneEnum["Egypt"] = 'Egypt'] = "Egypt";
        TimezoneEnum[TimezoneEnum["Eire"] = 'Eire'] = "Eire";
        TimezoneEnum[TimezoneEnum["EtcGMT"] = 'Etc/GMT'] = "EtcGMT";
        TimezoneEnum[TimezoneEnum["EtcGMT0"] = 'Etc/GMT+0'] = "EtcGMT0";
        TimezoneEnum[TimezoneEnum["EtcGMT1"] = 'Etc/GMT+1'] = "EtcGMT1";
        TimezoneEnum[TimezoneEnum["EtcGMT10"] = 'Etc/GMT+10'] = "EtcGMT10";
        TimezoneEnum[TimezoneEnum["EtcGMT11"] = 'Etc/GMT+11'] = "EtcGMT11";
        TimezoneEnum[TimezoneEnum["EtcGMT12"] = 'Etc/GMT+12'] = "EtcGMT12";
        TimezoneEnum[TimezoneEnum["EtcGMT2"] = 'Etc/GMT+2'] = "EtcGMT2";
        TimezoneEnum[TimezoneEnum["EtcGMT3"] = 'Etc/GMT+3'] = "EtcGMT3";
        TimezoneEnum[TimezoneEnum["EtcGMT4"] = 'Etc/GMT+4'] = "EtcGMT4";
        TimezoneEnum[TimezoneEnum["EtcGMT5"] = 'Etc/GMT+5'] = "EtcGMT5";
        TimezoneEnum[TimezoneEnum["EtcGMT6"] = 'Etc/GMT+6'] = "EtcGMT6";
        TimezoneEnum[TimezoneEnum["EtcGMT7"] = 'Etc/GMT+7'] = "EtcGMT7";
        TimezoneEnum[TimezoneEnum["EtcGMT8"] = 'Etc/GMT+8'] = "EtcGMT8";
        TimezoneEnum[TimezoneEnum["EtcGMT9"] = 'Etc/GMT+9'] = "EtcGMT9";
        TimezoneEnum[TimezoneEnum["EtcGMT0_404"] = 'Etc/GMT-0'] = "EtcGMT0_404";
        TimezoneEnum[TimezoneEnum["EtcGMT1_405"] = 'Etc/GMT-1'] = "EtcGMT1_405";
        TimezoneEnum[TimezoneEnum["EtcGMT10_406"] = 'Etc/GMT-10'] = "EtcGMT10_406";
        TimezoneEnum[TimezoneEnum["EtcGMT11_407"] = 'Etc/GMT-11'] = "EtcGMT11_407";
        TimezoneEnum[TimezoneEnum["EtcGMT12_408"] = 'Etc/GMT-12'] = "EtcGMT12_408";
        TimezoneEnum[TimezoneEnum["EtcGMT13"] = 'Etc/GMT-13'] = "EtcGMT13";
        TimezoneEnum[TimezoneEnum["EtcGMT14"] = 'Etc/GMT-14'] = "EtcGMT14";
        TimezoneEnum[TimezoneEnum["EtcGMT2_411"] = 'Etc/GMT-2'] = "EtcGMT2_411";
        TimezoneEnum[TimezoneEnum["EtcGMT3_412"] = 'Etc/GMT-3'] = "EtcGMT3_412";
        TimezoneEnum[TimezoneEnum["EtcGMT4_413"] = 'Etc/GMT-4'] = "EtcGMT4_413";
        TimezoneEnum[TimezoneEnum["EtcGMT5_414"] = 'Etc/GMT-5'] = "EtcGMT5_414";
        TimezoneEnum[TimezoneEnum["EtcGMT6_415"] = 'Etc/GMT-6'] = "EtcGMT6_415";
        TimezoneEnum[TimezoneEnum["EtcGMT7_416"] = 'Etc/GMT-7'] = "EtcGMT7_416";
        TimezoneEnum[TimezoneEnum["EtcGMT8_417"] = 'Etc/GMT-8'] = "EtcGMT8_417";
        TimezoneEnum[TimezoneEnum["EtcGMT9_418"] = 'Etc/GMT-9'] = "EtcGMT9_418";
        TimezoneEnum[TimezoneEnum["EtcGMT0_419"] = 'Etc/GMT0'] = "EtcGMT0_419";
        TimezoneEnum[TimezoneEnum["EtcGreenwich"] = 'Etc/Greenwich'] = "EtcGreenwich";
        TimezoneEnum[TimezoneEnum["EtcUCT"] = 'Etc/UCT'] = "EtcUCT";
        TimezoneEnum[TimezoneEnum["EtcUTC"] = 'Etc/UTC'] = "EtcUTC";
        TimezoneEnum[TimezoneEnum["EtcUniversal"] = 'Etc/Universal'] = "EtcUniversal";
        TimezoneEnum[TimezoneEnum["EtcZulu"] = 'Etc/Zulu'] = "EtcZulu";
        TimezoneEnum[TimezoneEnum["EuropeAmsterdam"] = 'Europe/Amsterdam'] = "EuropeAmsterdam";
        TimezoneEnum[TimezoneEnum["EuropeAndorra"] = 'Europe/Andorra'] = "EuropeAndorra";
        TimezoneEnum[TimezoneEnum["EuropeAstrakhan"] = 'Europe/Astrakhan'] = "EuropeAstrakhan";
        TimezoneEnum[TimezoneEnum["EuropeAthens"] = 'Europe/Athens'] = "EuropeAthens";
        TimezoneEnum[TimezoneEnum["EuropeBelfast"] = 'Europe/Belfast'] = "EuropeBelfast";
        TimezoneEnum[TimezoneEnum["EuropeBelgrade"] = 'Europe/Belgrade'] = "EuropeBelgrade";
        TimezoneEnum[TimezoneEnum["EuropeBerlin"] = 'Europe/Berlin'] = "EuropeBerlin";
        TimezoneEnum[TimezoneEnum["EuropeBratislava"] = 'Europe/Bratislava'] = "EuropeBratislava";
        TimezoneEnum[TimezoneEnum["EuropeBrussels"] = 'Europe/Brussels'] = "EuropeBrussels";
        TimezoneEnum[TimezoneEnum["EuropeBucharest"] = 'Europe/Bucharest'] = "EuropeBucharest";
        TimezoneEnum[TimezoneEnum["EuropeBudapest"] = 'Europe/Budapest'] = "EuropeBudapest";
        TimezoneEnum[TimezoneEnum["EuropeBusingen"] = 'Europe/Busingen'] = "EuropeBusingen";
        TimezoneEnum[TimezoneEnum["EuropeChisinau"] = 'Europe/Chisinau'] = "EuropeChisinau";
        TimezoneEnum[TimezoneEnum["EuropeCopenhagen"] = 'Europe/Copenhagen'] = "EuropeCopenhagen";
        TimezoneEnum[TimezoneEnum["EuropeDublin"] = 'Europe/Dublin'] = "EuropeDublin";
        TimezoneEnum[TimezoneEnum["EuropeGibraltar"] = 'Europe/Gibraltar'] = "EuropeGibraltar";
        TimezoneEnum[TimezoneEnum["EuropeGuernsey"] = 'Europe/Guernsey'] = "EuropeGuernsey";
        TimezoneEnum[TimezoneEnum["EuropeHelsinki"] = 'Europe/Helsinki'] = "EuropeHelsinki";
        TimezoneEnum[TimezoneEnum["EuropeIsleOfMan"] = 'Europe/Isle_of_Man'] = "EuropeIsleOfMan";
        TimezoneEnum[TimezoneEnum["EuropeIstanbul"] = 'Europe/Istanbul'] = "EuropeIstanbul";
        TimezoneEnum[TimezoneEnum["EuropeJersey"] = 'Europe/Jersey'] = "EuropeJersey";
        TimezoneEnum[TimezoneEnum["EuropeKaliningrad"] = 'Europe/Kaliningrad'] = "EuropeKaliningrad";
        TimezoneEnum[TimezoneEnum["EuropeKiev"] = 'Europe/Kiev'] = "EuropeKiev";
        TimezoneEnum[TimezoneEnum["EuropeKirov"] = 'Europe/Kirov'] = "EuropeKirov";
        TimezoneEnum[TimezoneEnum["EuropeLisbon"] = 'Europe/Lisbon'] = "EuropeLisbon";
        TimezoneEnum[TimezoneEnum["EuropeLjubljana"] = 'Europe/Ljubljana'] = "EuropeLjubljana";
        TimezoneEnum[TimezoneEnum["EuropeLondon"] = 'Europe/London'] = "EuropeLondon";
        TimezoneEnum[TimezoneEnum["EuropeLuxembourg"] = 'Europe/Luxembourg'] = "EuropeLuxembourg";
        TimezoneEnum[TimezoneEnum["EuropeMadrid"] = 'Europe/Madrid'] = "EuropeMadrid";
        TimezoneEnum[TimezoneEnum["EuropeMalta"] = 'Europe/Malta'] = "EuropeMalta";
        TimezoneEnum[TimezoneEnum["EuropeMariehamn"] = 'Europe/Mariehamn'] = "EuropeMariehamn";
        TimezoneEnum[TimezoneEnum["EuropeMinsk"] = 'Europe/Minsk'] = "EuropeMinsk";
        TimezoneEnum[TimezoneEnum["EuropeMonaco"] = 'Europe/Monaco'] = "EuropeMonaco";
        TimezoneEnum[TimezoneEnum["EuropeMoscow"] = 'Europe/Moscow'] = "EuropeMoscow";
        TimezoneEnum[TimezoneEnum["EuropeNicosia"] = 'Europe/Nicosia'] = "EuropeNicosia";
        TimezoneEnum[TimezoneEnum["EuropeOslo"] = 'Europe/Oslo'] = "EuropeOslo";
        TimezoneEnum[TimezoneEnum["EuropeParis"] = 'Europe/Paris'] = "EuropeParis";
        TimezoneEnum[TimezoneEnum["EuropePodgorica"] = 'Europe/Podgorica'] = "EuropePodgorica";
        TimezoneEnum[TimezoneEnum["EuropePrague"] = 'Europe/Prague'] = "EuropePrague";
        TimezoneEnum[TimezoneEnum["EuropeRiga"] = 'Europe/Riga'] = "EuropeRiga";
        TimezoneEnum[TimezoneEnum["EuropeRome"] = 'Europe/Rome'] = "EuropeRome";
        TimezoneEnum[TimezoneEnum["EuropeSamara"] = 'Europe/Samara'] = "EuropeSamara";
        TimezoneEnum[TimezoneEnum["EuropeSanMarino"] = 'Europe/San_Marino'] = "EuropeSanMarino";
        TimezoneEnum[TimezoneEnum["EuropeSarajevo"] = 'Europe/Sarajevo'] = "EuropeSarajevo";
        TimezoneEnum[TimezoneEnum["EuropeSaratov"] = 'Europe/Saratov'] = "EuropeSaratov";
        TimezoneEnum[TimezoneEnum["EuropeSimferopol"] = 'Europe/Simferopol'] = "EuropeSimferopol";
        TimezoneEnum[TimezoneEnum["EuropeSkopje"] = 'Europe/Skopje'] = "EuropeSkopje";
        TimezoneEnum[TimezoneEnum["EuropeSofia"] = 'Europe/Sofia'] = "EuropeSofia";
        TimezoneEnum[TimezoneEnum["EuropeStockholm"] = 'Europe/Stockholm'] = "EuropeStockholm";
        TimezoneEnum[TimezoneEnum["EuropeTallinn"] = 'Europe/Tallinn'] = "EuropeTallinn";
        TimezoneEnum[TimezoneEnum["EuropeTirane"] = 'Europe/Tirane'] = "EuropeTirane";
        TimezoneEnum[TimezoneEnum["EuropeTiraspol"] = 'Europe/Tiraspol'] = "EuropeTiraspol";
        TimezoneEnum[TimezoneEnum["EuropeUlyanovsk"] = 'Europe/Ulyanovsk'] = "EuropeUlyanovsk";
        TimezoneEnum[TimezoneEnum["EuropeUzhgorod"] = 'Europe/Uzhgorod'] = "EuropeUzhgorod";
        TimezoneEnum[TimezoneEnum["EuropeVaduz"] = 'Europe/Vaduz'] = "EuropeVaduz";
        TimezoneEnum[TimezoneEnum["EuropeVatican"] = 'Europe/Vatican'] = "EuropeVatican";
        TimezoneEnum[TimezoneEnum["EuropeVienna"] = 'Europe/Vienna'] = "EuropeVienna";
        TimezoneEnum[TimezoneEnum["EuropeVilnius"] = 'Europe/Vilnius'] = "EuropeVilnius";
        TimezoneEnum[TimezoneEnum["EuropeVolgograd"] = 'Europe/Volgograd'] = "EuropeVolgograd";
        TimezoneEnum[TimezoneEnum["EuropeWarsaw"] = 'Europe/Warsaw'] = "EuropeWarsaw";
        TimezoneEnum[TimezoneEnum["EuropeZagreb"] = 'Europe/Zagreb'] = "EuropeZagreb";
        TimezoneEnum[TimezoneEnum["EuropeZaporozhye"] = 'Europe/Zaporozhye'] = "EuropeZaporozhye";
        TimezoneEnum[TimezoneEnum["EuropeZurich"] = 'Europe/Zurich'] = "EuropeZurich";
        TimezoneEnum[TimezoneEnum["GB"] = 'GB'] = "GB";
        TimezoneEnum[TimezoneEnum["GBEire"] = 'GB-Eire'] = "GBEire";
        TimezoneEnum[TimezoneEnum["GMT"] = 'GMT'] = "GMT";
        TimezoneEnum[TimezoneEnum["GMT0"] = 'GMT+0'] = "GMT0";
        TimezoneEnum[TimezoneEnum["GMT0_492"] = 'GMT-0'] = "GMT0_492";
        TimezoneEnum[TimezoneEnum["GMT0_493"] = 'GMT0'] = "GMT0_493";
        TimezoneEnum[TimezoneEnum["Greenwich"] = 'Greenwich'] = "Greenwich";
        TimezoneEnum[TimezoneEnum["HST"] = 'HST'] = "HST";
        TimezoneEnum[TimezoneEnum["Hongkong"] = 'Hongkong'] = "Hongkong";
        TimezoneEnum[TimezoneEnum["Iceland"] = 'Iceland'] = "Iceland";
        TimezoneEnum[TimezoneEnum["IndianAntananarivo"] = 'Indian/Antananarivo'] = "IndianAntananarivo";
        TimezoneEnum[TimezoneEnum["IndianChagos"] = 'Indian/Chagos'] = "IndianChagos";
        TimezoneEnum[TimezoneEnum["IndianChristmas"] = 'Indian/Christmas'] = "IndianChristmas";
        TimezoneEnum[TimezoneEnum["IndianCocos"] = 'Indian/Cocos'] = "IndianCocos";
        TimezoneEnum[TimezoneEnum["IndianComoro"] = 'Indian/Comoro'] = "IndianComoro";
        TimezoneEnum[TimezoneEnum["IndianKerguelen"] = 'Indian/Kerguelen'] = "IndianKerguelen";
        TimezoneEnum[TimezoneEnum["IndianMahe"] = 'Indian/Mahe'] = "IndianMahe";
        TimezoneEnum[TimezoneEnum["IndianMaldives"] = 'Indian/Maldives'] = "IndianMaldives";
        TimezoneEnum[TimezoneEnum["IndianMauritius"] = 'Indian/Mauritius'] = "IndianMauritius";
        TimezoneEnum[TimezoneEnum["IndianMayotte"] = 'Indian/Mayotte'] = "IndianMayotte";
        TimezoneEnum[TimezoneEnum["IndianReunion"] = 'Indian/Reunion'] = "IndianReunion";
        TimezoneEnum[TimezoneEnum["Iran"] = 'Iran'] = "Iran";
        TimezoneEnum[TimezoneEnum["Israel"] = 'Israel'] = "Israel";
        TimezoneEnum[TimezoneEnum["Jamaica"] = 'Jamaica'] = "Jamaica";
        TimezoneEnum[TimezoneEnum["Japan"] = 'Japan'] = "Japan";
        TimezoneEnum[TimezoneEnum["Kwajalein"] = 'Kwajalein'] = "Kwajalein";
        TimezoneEnum[TimezoneEnum["Libya"] = 'Libya'] = "Libya";
        TimezoneEnum[TimezoneEnum["MET"] = 'MET'] = "MET";
        TimezoneEnum[TimezoneEnum["MST"] = 'MST'] = "MST";
        TimezoneEnum[TimezoneEnum["MST7MDT"] = 'MST7MDT'] = "MST7MDT";
        TimezoneEnum[TimezoneEnum["MexicoBajaNorte"] = 'Mexico/BajaNorte'] = "MexicoBajaNorte";
        TimezoneEnum[TimezoneEnum["MexicoBajaSur"] = 'Mexico/BajaSur'] = "MexicoBajaSur";
        TimezoneEnum[TimezoneEnum["MexicoGeneral"] = 'Mexico/General'] = "MexicoGeneral";
        TimezoneEnum[TimezoneEnum["NZ"] = 'NZ'] = "NZ";
        TimezoneEnum[TimezoneEnum["NZCHAT"] = 'NZ-CHAT'] = "NZCHAT";
        TimezoneEnum[TimezoneEnum["Navajo"] = 'Navajo'] = "Navajo";
        TimezoneEnum[TimezoneEnum["PRC"] = 'PRC'] = "PRC";
        TimezoneEnum[TimezoneEnum["PST8PDT"] = 'PST8PDT'] = "PST8PDT";
        TimezoneEnum[TimezoneEnum["PacificApia"] = 'Pacific/Apia'] = "PacificApia";
        TimezoneEnum[TimezoneEnum["PacificAuckland"] = 'Pacific/Auckland'] = "PacificAuckland";
        TimezoneEnum[TimezoneEnum["PacificBougainville"] = 'Pacific/Bougainville'] = "PacificBougainville";
        TimezoneEnum[TimezoneEnum["PacificChatham"] = 'Pacific/Chatham'] = "PacificChatham";
        TimezoneEnum[TimezoneEnum["PacificChuuk"] = 'Pacific/Chuuk'] = "PacificChuuk";
        TimezoneEnum[TimezoneEnum["PacificEaster"] = 'Pacific/Easter'] = "PacificEaster";
        TimezoneEnum[TimezoneEnum["PacificEfate"] = 'Pacific/Efate'] = "PacificEfate";
        TimezoneEnum[TimezoneEnum["PacificEnderbury"] = 'Pacific/Enderbury'] = "PacificEnderbury";
        TimezoneEnum[TimezoneEnum["PacificFakaofo"] = 'Pacific/Fakaofo'] = "PacificFakaofo";
        TimezoneEnum[TimezoneEnum["PacificFiji"] = 'Pacific/Fiji'] = "PacificFiji";
        TimezoneEnum[TimezoneEnum["PacificFunafuti"] = 'Pacific/Funafuti'] = "PacificFunafuti";
        TimezoneEnum[TimezoneEnum["PacificGalapagos"] = 'Pacific/Galapagos'] = "PacificGalapagos";
        TimezoneEnum[TimezoneEnum["PacificGambier"] = 'Pacific/Gambier'] = "PacificGambier";
        TimezoneEnum[TimezoneEnum["PacificGuadalcanal"] = 'Pacific/Guadalcanal'] = "PacificGuadalcanal";
        TimezoneEnum[TimezoneEnum["PacificGuam"] = 'Pacific/Guam'] = "PacificGuam";
        TimezoneEnum[TimezoneEnum["PacificHonolulu"] = 'Pacific/Honolulu'] = "PacificHonolulu";
        TimezoneEnum[TimezoneEnum["PacificJohnston"] = 'Pacific/Johnston'] = "PacificJohnston";
        TimezoneEnum[TimezoneEnum["PacificKanton"] = 'Pacific/Kanton'] = "PacificKanton";
        TimezoneEnum[TimezoneEnum["PacificKiritimati"] = 'Pacific/Kiritimati'] = "PacificKiritimati";
        TimezoneEnum[TimezoneEnum["PacificKosrae"] = 'Pacific/Kosrae'] = "PacificKosrae";
        TimezoneEnum[TimezoneEnum["PacificKwajalein"] = 'Pacific/Kwajalein'] = "PacificKwajalein";
        TimezoneEnum[TimezoneEnum["PacificMajuro"] = 'Pacific/Majuro'] = "PacificMajuro";
        TimezoneEnum[TimezoneEnum["PacificMarquesas"] = 'Pacific/Marquesas'] = "PacificMarquesas";
        TimezoneEnum[TimezoneEnum["PacificMidway"] = 'Pacific/Midway'] = "PacificMidway";
        TimezoneEnum[TimezoneEnum["PacificNauru"] = 'Pacific/Nauru'] = "PacificNauru";
        TimezoneEnum[TimezoneEnum["PacificNiue"] = 'Pacific/Niue'] = "PacificNiue";
        TimezoneEnum[TimezoneEnum["PacificNorfolk"] = 'Pacific/Norfolk'] = "PacificNorfolk";
        TimezoneEnum[TimezoneEnum["PacificNoumea"] = 'Pacific/Noumea'] = "PacificNoumea";
        TimezoneEnum[TimezoneEnum["PacificPagoPago"] = 'Pacific/Pago_Pago'] = "PacificPagoPago";
        TimezoneEnum[TimezoneEnum["PacificPalau"] = 'Pacific/Palau'] = "PacificPalau";
        TimezoneEnum[TimezoneEnum["PacificPitcairn"] = 'Pacific/Pitcairn'] = "PacificPitcairn";
        TimezoneEnum[TimezoneEnum["PacificPohnpei"] = 'Pacific/Pohnpei'] = "PacificPohnpei";
        TimezoneEnum[TimezoneEnum["PacificPonape"] = 'Pacific/Ponape'] = "PacificPonape";
        TimezoneEnum[TimezoneEnum["PacificPortMoresby"] = 'Pacific/Port_Moresby'] = "PacificPortMoresby";
        TimezoneEnum[TimezoneEnum["PacificRarotonga"] = 'Pacific/Rarotonga'] = "PacificRarotonga";
        TimezoneEnum[TimezoneEnum["PacificSaipan"] = 'Pacific/Saipan'] = "PacificSaipan";
        TimezoneEnum[TimezoneEnum["PacificSamoa"] = 'Pacific/Samoa'] = "PacificSamoa";
        TimezoneEnum[TimezoneEnum["PacificTahiti"] = 'Pacific/Tahiti'] = "PacificTahiti";
        TimezoneEnum[TimezoneEnum["PacificTarawa"] = 'Pacific/Tarawa'] = "PacificTarawa";
        TimezoneEnum[TimezoneEnum["PacificTongatapu"] = 'Pacific/Tongatapu'] = "PacificTongatapu";
        TimezoneEnum[TimezoneEnum["PacificTruk"] = 'Pacific/Truk'] = "PacificTruk";
        TimezoneEnum[TimezoneEnum["PacificWake"] = 'Pacific/Wake'] = "PacificWake";
        TimezoneEnum[TimezoneEnum["PacificWallis"] = 'Pacific/Wallis'] = "PacificWallis";
        TimezoneEnum[TimezoneEnum["PacificYap"] = 'Pacific/Yap'] = "PacificYap";
        TimezoneEnum[TimezoneEnum["Poland"] = 'Poland'] = "Poland";
        TimezoneEnum[TimezoneEnum["Portugal"] = 'Portugal'] = "Portugal";
        TimezoneEnum[TimezoneEnum["ROC"] = 'ROC'] = "ROC";
        TimezoneEnum[TimezoneEnum["ROK"] = 'ROK'] = "ROK";
        TimezoneEnum[TimezoneEnum["Singapore"] = 'Singapore'] = "Singapore";
        TimezoneEnum[TimezoneEnum["Turkey"] = 'Turkey'] = "Turkey";
        TimezoneEnum[TimezoneEnum["UCT"] = 'UCT'] = "UCT";
        TimezoneEnum[TimezoneEnum["USAlaska"] = 'US/Alaska'] = "USAlaska";
        TimezoneEnum[TimezoneEnum["USAleutian"] = 'US/Aleutian'] = "USAleutian";
        TimezoneEnum[TimezoneEnum["USArizona"] = 'US/Arizona'] = "USArizona";
        TimezoneEnum[TimezoneEnum["USCentral"] = 'US/Central'] = "USCentral";
        TimezoneEnum[TimezoneEnum["USEastIndiana"] = 'US/East-Indiana'] = "USEastIndiana";
        TimezoneEnum[TimezoneEnum["USEastern"] = 'US/Eastern'] = "USEastern";
        TimezoneEnum[TimezoneEnum["USHawaii"] = 'US/Hawaii'] = "USHawaii";
        TimezoneEnum[TimezoneEnum["USIndianaStarke"] = 'US/Indiana-Starke'] = "USIndianaStarke";
        TimezoneEnum[TimezoneEnum["USMichigan"] = 'US/Michigan'] = "USMichigan";
        TimezoneEnum[TimezoneEnum["USMountain"] = 'US/Mountain'] = "USMountain";
        TimezoneEnum[TimezoneEnum["USPacific"] = 'US/Pacific'] = "USPacific";
        TimezoneEnum[TimezoneEnum["USSamoa"] = 'US/Samoa'] = "USSamoa";
        TimezoneEnum[TimezoneEnum["UTC"] = 'UTC'] = "UTC";
        TimezoneEnum[TimezoneEnum["Universal"] = 'Universal'] = "Universal";
        TimezoneEnum[TimezoneEnum["WSU"] = 'W-SU'] = "WSU";
        TimezoneEnum[TimezoneEnum["WET"] = 'WET'] = "WET";
        TimezoneEnum[TimezoneEnum["Zulu"] = 'Zulu'] = "Zulu";
    })(TimezoneEnum = ReportScheduleRestApiPut.TimezoneEnum || (ReportScheduleRestApiPut.TimezoneEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Alert"] = 'Alert'] = "Alert";
        TypeEnum[TypeEnum["Report"] = 'Report'] = "Report";
    })(TypeEnum = ReportScheduleRestApiPut.TypeEnum || (ReportScheduleRestApiPut.TypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let ValidatorTypeEnum;
    (function (ValidatorTypeEnum) {
        ValidatorTypeEnum[ValidatorTypeEnum["NotNull"] = 'not null'] = "NotNull";
        ValidatorTypeEnum[ValidatorTypeEnum["Operator"] = 'operator'] = "Operator";
    })(ValidatorTypeEnum = ReportScheduleRestApiPut.ValidatorTypeEnum || (ReportScheduleRestApiPut.ValidatorTypeEnum = {}));
})(ReportScheduleRestApiPut = exports.ReportScheduleRestApiPut || (exports.ReportScheduleRestApiPut = {}));
/**
 * @export
 * @namespace SecurityLoginBody
 */
var SecurityLoginBody;
(function (SecurityLoginBody) {
    /**
     * @export
     * @enum {string}
     */
    let ProviderEnum;
    (function (ProviderEnum) {
        ProviderEnum[ProviderEnum["Db"] = 'db'] = "Db";
        ProviderEnum[ProviderEnum["Ldap"] = 'ldap'] = "Ldap";
    })(ProviderEnum = SecurityLoginBody.ProviderEnum || (SecurityLoginBody.ProviderEnum = {}));
})(SecurityLoginBody = exports.SecurityLoginBody || (exports.SecurityLoginBody = {}));
/**
 * @export
 * @namespace ValidatorConfigJSON
 */
var ValidatorConfigJSON;
(function (ValidatorConfigJSON) {
    /**
     * @export
     * @enum {string}
     */
    let OpEnum;
    (function (OpEnum) {
        OpEnum[OpEnum["LessThan"] = '<'] = "LessThan";
        OpEnum[OpEnum["LessThanOrEqualTo"] = '<='] = "LessThanOrEqualTo";
        OpEnum[OpEnum["GreaterThan"] = '>'] = "GreaterThan";
        OpEnum[OpEnum["GreaterThanOrEqualTo"] = '>='] = "GreaterThanOrEqualTo";
        OpEnum[OpEnum["Equal"] = '=='] = "Equal";
        OpEnum[OpEnum["NotEqual"] = '!='] = "NotEqual";
    })(OpEnum = ValidatorConfigJSON.OpEnum || (ValidatorConfigJSON.OpEnum = {}));
})(ValidatorConfigJSON = exports.ValidatorConfigJSON || (exports.ValidatorConfigJSON = {}));
/**
 * AdvancedDataTypeApi - fetch parameter creator
 * @export
 */
const AdvancedDataTypeApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Returns a AdvancedDataTypeResponse object populated with the passed in args.
         * @param {AdvancedDataTypeConvertSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdvancedDataTypeConvertGet(q, options = {}) {
            const localVarPath = `/api/v1/advanced_data_type/convert`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of available advanced data types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdvancedDataTypeTypesGet(options = {}) {
            const localVarPath = `/api/v1/advanced_data_type/types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AdvancedDataTypeApiFetchParamCreator = AdvancedDataTypeApiFetchParamCreator;
/**
 * AdvancedDataTypeApi - functional programming interface
 * @export
 */
const AdvancedDataTypeApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Returns a AdvancedDataTypeResponse object populated with the passed in args.
         * @param {AdvancedDataTypeConvertSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdvancedDataTypeConvertGet(q, options) {
            const localVarFetchArgs = (0, exports.AdvancedDataTypeApiFetchParamCreator)(configuration).apiV1AdvancedDataTypeConvertGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of available advanced data types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdvancedDataTypeTypesGet(options) {
            const localVarFetchArgs = (0, exports.AdvancedDataTypeApiFetchParamCreator)(configuration).apiV1AdvancedDataTypeTypesGet(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.AdvancedDataTypeApiFp = AdvancedDataTypeApiFp;
/**
 * AdvancedDataTypeApi - factory interface
 * @export
 */
const AdvancedDataTypeApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Returns a AdvancedDataTypeResponse object populated with the passed in args.
         * @param {AdvancedDataTypeConvertSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdvancedDataTypeConvertGet(q, options) {
            return (0, exports.AdvancedDataTypeApiFp)(configuration).apiV1AdvancedDataTypeConvertGet(q, options)(fetch, basePath);
        },
        /**
         * Returns a list of available advanced data types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdvancedDataTypeTypesGet(options) {
            return (0, exports.AdvancedDataTypeApiFp)(configuration).apiV1AdvancedDataTypeTypesGet(options)(fetch, basePath);
        },
    };
};
exports.AdvancedDataTypeApiFactory = AdvancedDataTypeApiFactory;
/**
 * AdvancedDataTypeApi - object-oriented interface
 * @export
 * @class AdvancedDataTypeApi
 * @extends {BaseAPI}
 */
class AdvancedDataTypeApi extends BaseAPI {
    /**
     *
     * @summary Returns a AdvancedDataTypeResponse object populated with the passed in args.
     * @param {AdvancedDataTypeConvertSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvancedDataTypeApi
     */
    apiV1AdvancedDataTypeConvertGet(q, options) {
        return (0, exports.AdvancedDataTypeApiFp)(this.configuration).apiV1AdvancedDataTypeConvertGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of available advanced data types.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvancedDataTypeApi
     */
    apiV1AdvancedDataTypeTypesGet(options) {
        return (0, exports.AdvancedDataTypeApiFp)(this.configuration).apiV1AdvancedDataTypeTypesGet(options)(this.fetch, this.basePath);
    }
}
exports.AdvancedDataTypeApi = AdvancedDataTypeApi;
/**
 * AnnotationLayersApi - fetch parameter creator
 * @export
 */
const AnnotationLayersApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Deletes multiple annotation layers in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerDelete(q, options = {}) {
            const localVarPath = `/api/v1/annotation_layer/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerGet(q, options = {}) {
            const localVarPath = `/api/v1/annotation_layer/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerInfoGet(q, options = {}) {
            const localVarPath = `/api/v1/annotation_layer/_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdDelete.');
            }
            // verify required parameter 'annotationId' is not null or undefined
            if (annotationId === null || annotationId === undefined) {
                throw new RequiredError('annotationId', 'Required parameter annotationId was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdDelete.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}/annotation/{annotation_id}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"annotation_id"}}`, encodeURIComponent(String(annotationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdGet.');
            }
            // verify required parameter 'annotationId' is not null or undefined
            if (annotationId === null || annotationId === undefined) {
                throw new RequiredError('annotationId', 'Required parameter annotationId was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdGet.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}/annotation/{annotation_id}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"annotation_id"}}`, encodeURIComponent(String(annotationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an Annotation layer
         * @param {AnnotationRestApiPut} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdPut.');
            }
            // verify required parameter 'annotationId' is not null or undefined
            if (annotationId === null || annotationId === undefined) {
                throw new RequiredError('annotationId', 'Required parameter annotationId was null or undefined when calling apiV1AnnotationLayerPkAnnotationAnnotationIdPut.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}/annotation/{annotation_id}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"annotation_id"}}`, encodeURIComponent(String(annotationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("AnnotationRestApiPut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes multiple annotation in a bulk operation.
         * @param {number} pk The annotation layer pk for this annotation
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationDelete(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkAnnotationDelete.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}/annotation/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {number} pk The annotation layer id for this annotation
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkAnnotationGet.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}/annotation/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Annotation layer
         * @param {AnnotationRestApiPost} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationPost(body, pk, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1AnnotationLayerPkAnnotationPost.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkAnnotationPost.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}/annotation/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("AnnotationRestApiPost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkDelete(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkDelete.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Annotation layer
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkGet.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an Annotation layer
         * @param {AnnotationLayerRestApiPut} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkPut(body, pk, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1AnnotationLayerPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1AnnotationLayerPkPut.');
            }
            const localVarPath = `/api/v1/annotation_layer/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("AnnotationLayerRestApiPut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Annotation layer
         * @param {AnnotationLayerRestApiPost} body Annotation Layer schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1AnnotationLayerPost.');
            }
            const localVarPath = `/api/v1/annotation_layer/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("AnnotationLayerRestApiPost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerRelatedColumnNameGet(columnName, q, options = {}) {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1AnnotationLayerRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/annotation_layer/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AnnotationLayersApiFetchParamCreator = AnnotationLayersApiFetchParamCreator;
/**
 * AnnotationLayersApi - functional programming interface
 * @export
 */
const AnnotationLayersApiFp = function (configuration) {
    return {
        /**
         * Deletes multiple annotation layers in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerDelete(q, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerDelete(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerGet(q, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerInfoGet(q, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerInfoGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get an Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, q, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update an Annotation layer
         * @param {AnnotationRestApiPut} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes multiple annotation in a bulk operation.
         * @param {number} pk The annotation layer pk for this annotation
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationDelete(pk, q, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerPkAnnotationDelete(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {number} pk The annotation layer id for this annotation
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerPkAnnotationGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create an Annotation layer
         * @param {AnnotationRestApiPost} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationPost(body, pk, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerPkAnnotationPost(body, pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkDelete(pk, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerPkDelete(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get an Annotation layer
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerPkGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update an Annotation layer
         * @param {AnnotationLayerRestApiPut} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkPut(body, pk, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerPkPut(body, pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create an Annotation layer
         * @param {AnnotationLayerRestApiPost} body Annotation Layer schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPost(body, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerRelatedColumnNameGet(columnName, q, options) {
            const localVarFetchArgs = (0, exports.AnnotationLayersApiFetchParamCreator)(configuration).apiV1AnnotationLayerRelatedColumnNameGet(columnName, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.AnnotationLayersApiFp = AnnotationLayersApiFp;
/**
 * AnnotationLayersApi - factory interface
 * @export
 */
const AnnotationLayersApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Deletes multiple annotation layers in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerDelete(q, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerDelete(q, options)(fetch, basePath);
        },
        /**
         * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerGet(q, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerGet(q, options)(fetch, basePath);
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerInfoGet(q, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerInfoGet(q, options)(fetch, basePath);
        },
        /**
         * Delete Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, options)(fetch, basePath);
        },
        /**
         * Get an Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, q, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, q, options)(fetch, basePath);
        },
        /**
         * Update an Annotation layer
         * @param {AnnotationRestApiPut} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {number} annotationId The annotation pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId, options)(fetch, basePath);
        },
        /**
         * Deletes multiple annotation in a bulk operation.
         * @param {number} pk The annotation layer pk for this annotation
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationDelete(pk, q, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerPkAnnotationDelete(pk, q, options)(fetch, basePath);
        },
        /**
         * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {number} pk The annotation layer id for this annotation
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationGet(pk, q, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerPkAnnotationGet(pk, q, options)(fetch, basePath);
        },
        /**
         * Create an Annotation layer
         * @param {AnnotationRestApiPost} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkAnnotationPost(body, pk, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerPkAnnotationPost(body, pk, options)(fetch, basePath);
        },
        /**
         * Delete Annotation layer
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkDelete(pk, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerPkDelete(pk, options)(fetch, basePath);
        },
        /**
         * Get an Annotation layer
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkGet(pk, q, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerPkGet(pk, q, options)(fetch, basePath);
        },
        /**
         * Update an Annotation layer
         * @param {AnnotationLayerRestApiPut} body Annotation schema
         * @param {number} pk The annotation layer pk for this annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPkPut(body, pk, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerPkPut(body, pk, options)(fetch, basePath);
        },
        /**
         * Create an Annotation layer
         * @param {AnnotationLayerRestApiPost} body Annotation Layer schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerPost(body, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerPost(body, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnnotationLayerRelatedColumnNameGet(columnName, q, options) {
            return (0, exports.AnnotationLayersApiFp)(configuration).apiV1AnnotationLayerRelatedColumnNameGet(columnName, q, options)(fetch, basePath);
        },
    };
};
exports.AnnotationLayersApiFactory = AnnotationLayersApiFactory;
/**
 * AnnotationLayersApi - object-oriented interface
 * @export
 * @class AnnotationLayersApi
 * @extends {BaseAPI}
 */
class AnnotationLayersApi extends BaseAPI {
    /**
     * Deletes multiple annotation layers in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerDelete(q, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerDelete(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerGet(q, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get metadata information about this API resource
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerInfoGet(q, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerInfoGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Delete Annotation layer
     * @param {number} pk The annotation layer pk for this annotation
     * @param {number} annotationId The annotation pk for this annotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdDelete(pk, annotationId, options)(this.fetch, this.basePath);
    }
    /**
     * Get an Annotation layer
     * @param {number} pk The annotation layer pk for this annotation
     * @param {number} annotationId The annotation pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, q, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdGet(pk, annotationId, q, options)(this.fetch, this.basePath);
    }
    /**
     * Update an Annotation layer
     * @param {AnnotationRestApiPut} body Annotation schema
     * @param {number} pk The annotation layer pk for this annotation
     * @param {number} annotationId The annotation pk for this annotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerPkAnnotationAnnotationIdPut(body, pk, annotationId, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes multiple annotation in a bulk operation.
     * @param {number} pk The annotation layer pk for this annotation
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerPkAnnotationDelete(pk, q, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerPkAnnotationDelete(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of Annotation layers, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {number} pk The annotation layer id for this annotation
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerPkAnnotationGet(pk, q, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerPkAnnotationGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     * Create an Annotation layer
     * @param {AnnotationRestApiPost} body Annotation schema
     * @param {number} pk The annotation layer pk for this annotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerPkAnnotationPost(body, pk, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerPkAnnotationPost(body, pk, options)(this.fetch, this.basePath);
    }
    /**
     * Delete Annotation layer
     * @param {number} pk The annotation layer pk for this annotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerPkDelete(pk, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerPkDelete(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get an Annotation layer
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerPkGet(pk, q, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerPkGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     * Update an Annotation layer
     * @param {AnnotationLayerRestApiPut} body Annotation schema
     * @param {number} pk The annotation layer pk for this annotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerPkPut(body, pk, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerPkPut(body, pk, options)(this.fetch, this.basePath);
    }
    /**
     * Create an Annotation layer
     * @param {AnnotationLayerRestApiPost} body Annotation Layer schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerPost(body, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerPost(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationLayersApi
     */
    apiV1AnnotationLayerRelatedColumnNameGet(columnName, q, options) {
        return (0, exports.AnnotationLayersApiFp)(this.configuration).apiV1AnnotationLayerRelatedColumnNameGet(columnName, q, options)(this.fetch, this.basePath);
    }
}
exports.AnnotationLayersApi = AnnotationLayersApi;
/**
 * AsyncEventsRestApiApi - fetch parameter creator
 * @export
 */
const AsyncEventsRestApiApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Reads off of the Redis events stream, using the user's JWT token and optional query params for last event received.
         * @param {string} [lastId] Last ID received by the client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AsyncEventGet(lastId, options = {}) {
            const localVarPath = `/api/v1/async_event/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (lastId !== undefined) {
                localVarQueryParameter['last_id'] = lastId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AsyncEventsRestApiApiFetchParamCreator = AsyncEventsRestApiApiFetchParamCreator;
/**
 * AsyncEventsRestApiApi - functional programming interface
 * @export
 */
const AsyncEventsRestApiApiFp = function (configuration) {
    return {
        /**
         * Reads off of the Redis events stream, using the user's JWT token and optional query params for last event received.
         * @param {string} [lastId] Last ID received by the client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AsyncEventGet(lastId, options) {
            const localVarFetchArgs = (0, exports.AsyncEventsRestApiApiFetchParamCreator)(configuration).apiV1AsyncEventGet(lastId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.AsyncEventsRestApiApiFp = AsyncEventsRestApiApiFp;
/**
 * AsyncEventsRestApiApi - factory interface
 * @export
 */
const AsyncEventsRestApiApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Reads off of the Redis events stream, using the user's JWT token and optional query params for last event received.
         * @param {string} [lastId] Last ID received by the client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AsyncEventGet(lastId, options) {
            return (0, exports.AsyncEventsRestApiApiFp)(configuration).apiV1AsyncEventGet(lastId, options)(fetch, basePath);
        },
    };
};
exports.AsyncEventsRestApiApiFactory = AsyncEventsRestApiApiFactory;
/**
 * AsyncEventsRestApiApi - object-oriented interface
 * @export
 * @class AsyncEventsRestApiApi
 * @extends {BaseAPI}
 */
class AsyncEventsRestApiApi extends BaseAPI {
    /**
     * Reads off of the Redis events stream, using the user's JWT token and optional query params for last event received.
     * @param {string} [lastId] Last ID received by the client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AsyncEventsRestApiApi
     */
    apiV1AsyncEventGet(lastId, options) {
        return (0, exports.AsyncEventsRestApiApiFp)(this.configuration).apiV1AsyncEventGet(lastId, options)(this.fetch, this.basePath);
    }
}
exports.AsyncEventsRestApiApi = AsyncEventsRestApiApi;
/**
 * AvailableDomainsApi - fetch parameter creator
 * @export
 */
const AvailableDomainsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get all available domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AvailableDomainsGet(options = {}) {
            const localVarPath = `/api/v1/available_domains/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AvailableDomainsApiFetchParamCreator = AvailableDomainsApiFetchParamCreator;
/**
 * AvailableDomainsApi - functional programming interface
 * @export
 */
const AvailableDomainsApiFp = function (configuration) {
    return {
        /**
         * Get all available domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AvailableDomainsGet(options) {
            const localVarFetchArgs = (0, exports.AvailableDomainsApiFetchParamCreator)(configuration).apiV1AvailableDomainsGet(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.AvailableDomainsApiFp = AvailableDomainsApiFp;
/**
 * AvailableDomainsApi - factory interface
 * @export
 */
const AvailableDomainsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get all available domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AvailableDomainsGet(options) {
            return (0, exports.AvailableDomainsApiFp)(configuration).apiV1AvailableDomainsGet(options)(fetch, basePath);
        },
    };
};
exports.AvailableDomainsApiFactory = AvailableDomainsApiFactory;
/**
 * AvailableDomainsApi - object-oriented interface
 * @export
 * @class AvailableDomainsApi
 * @extends {BaseAPI}
 */
class AvailableDomainsApi extends BaseAPI {
    /**
     * Get all available domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailableDomainsApi
     */
    apiV1AvailableDomainsGet(options) {
        return (0, exports.AvailableDomainsApiFp)(this.configuration).apiV1AvailableDomainsGet(options)(this.fetch, this.basePath);
    }
}
exports.AvailableDomainsApi = AvailableDomainsApi;
/**
 * CSSTemplatesApi - fetch parameter creator
 * @export
 */
const CSSTemplatesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Deletes multiple css templates in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplateDelete(q, options = {}) {
            const localVarPath = `/api/v1/css_template/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of CSS templates, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplateGet(q, options = {}) {
            const localVarPath = `/api/v1/css_template/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplateInfoGet(q, options = {}) {
            const localVarPath = `/api/v1/css_template/_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete CSS template
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplatePkDelete(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1CssTemplatePkDelete.');
            }
            const localVarPath = `/api/v1/css_template/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a CSS template
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplatePkGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1CssTemplatePkGet.');
            }
            const localVarPath = `/api/v1/css_template/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a CSS template
         * @param {CssTemplateRestApiPut} body Model schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplatePkPut(body, pk, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1CssTemplatePkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1CssTemplatePkPut.');
            }
            const localVarPath = `/api/v1/css_template/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CssTemplateRestApiPut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a CSS template
         * @param {CssTemplateRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplatePost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1CssTemplatePost.');
            }
            const localVarPath = `/api/v1/css_template/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CssTemplateRestApiPost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplateRelatedColumnNameGet(columnName, q, options = {}) {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1CssTemplateRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/css_template/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CSSTemplatesApiFetchParamCreator = CSSTemplatesApiFetchParamCreator;
/**
 * CSSTemplatesApi - functional programming interface
 * @export
 */
const CSSTemplatesApiFp = function (configuration) {
    return {
        /**
         * Deletes multiple css templates in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplateDelete(q, options) {
            const localVarFetchArgs = (0, exports.CSSTemplatesApiFetchParamCreator)(configuration).apiV1CssTemplateDelete(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of CSS templates, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplateGet(q, options) {
            const localVarFetchArgs = (0, exports.CSSTemplatesApiFetchParamCreator)(configuration).apiV1CssTemplateGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplateInfoGet(q, options) {
            const localVarFetchArgs = (0, exports.CSSTemplatesApiFetchParamCreator)(configuration).apiV1CssTemplateInfoGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete CSS template
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplatePkDelete(pk, options) {
            const localVarFetchArgs = (0, exports.CSSTemplatesApiFetchParamCreator)(configuration).apiV1CssTemplatePkDelete(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a CSS template
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplatePkGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.CSSTemplatesApiFetchParamCreator)(configuration).apiV1CssTemplatePkGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a CSS template
         * @param {CssTemplateRestApiPut} body Model schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplatePkPut(body, pk, options) {
            const localVarFetchArgs = (0, exports.CSSTemplatesApiFetchParamCreator)(configuration).apiV1CssTemplatePkPut(body, pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a CSS template
         * @param {CssTemplateRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplatePost(body, options) {
            const localVarFetchArgs = (0, exports.CSSTemplatesApiFetchParamCreator)(configuration).apiV1CssTemplatePost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplateRelatedColumnNameGet(columnName, q, options) {
            const localVarFetchArgs = (0, exports.CSSTemplatesApiFetchParamCreator)(configuration).apiV1CssTemplateRelatedColumnNameGet(columnName, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.CSSTemplatesApiFp = CSSTemplatesApiFp;
/**
 * CSSTemplatesApi - factory interface
 * @export
 */
const CSSTemplatesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Deletes multiple css templates in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplateDelete(q, options) {
            return (0, exports.CSSTemplatesApiFp)(configuration).apiV1CssTemplateDelete(q, options)(fetch, basePath);
        },
        /**
         * Get a list of CSS templates, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplateGet(q, options) {
            return (0, exports.CSSTemplatesApiFp)(configuration).apiV1CssTemplateGet(q, options)(fetch, basePath);
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplateInfoGet(q, options) {
            return (0, exports.CSSTemplatesApiFp)(configuration).apiV1CssTemplateInfoGet(q, options)(fetch, basePath);
        },
        /**
         * Delete CSS template
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplatePkDelete(pk, options) {
            return (0, exports.CSSTemplatesApiFp)(configuration).apiV1CssTemplatePkDelete(pk, options)(fetch, basePath);
        },
        /**
         * Get a CSS template
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplatePkGet(pk, q, options) {
            return (0, exports.CSSTemplatesApiFp)(configuration).apiV1CssTemplatePkGet(pk, q, options)(fetch, basePath);
        },
        /**
         * Update a CSS template
         * @param {CssTemplateRestApiPut} body Model schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplatePkPut(body, pk, options) {
            return (0, exports.CSSTemplatesApiFp)(configuration).apiV1CssTemplatePkPut(body, pk, options)(fetch, basePath);
        },
        /**
         * Create a CSS template
         * @param {CssTemplateRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplatePost(body, options) {
            return (0, exports.CSSTemplatesApiFp)(configuration).apiV1CssTemplatePost(body, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CssTemplateRelatedColumnNameGet(columnName, q, options) {
            return (0, exports.CSSTemplatesApiFp)(configuration).apiV1CssTemplateRelatedColumnNameGet(columnName, q, options)(fetch, basePath);
        },
    };
};
exports.CSSTemplatesApiFactory = CSSTemplatesApiFactory;
/**
 * CSSTemplatesApi - object-oriented interface
 * @export
 * @class CSSTemplatesApi
 * @extends {BaseAPI}
 */
class CSSTemplatesApi extends BaseAPI {
    /**
     * Deletes multiple css templates in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSSTemplatesApi
     */
    apiV1CssTemplateDelete(q, options) {
        return (0, exports.CSSTemplatesApiFp)(this.configuration).apiV1CssTemplateDelete(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of CSS templates, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSSTemplatesApi
     */
    apiV1CssTemplateGet(q, options) {
        return (0, exports.CSSTemplatesApiFp)(this.configuration).apiV1CssTemplateGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get metadata information about this API resource
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSSTemplatesApi
     */
    apiV1CssTemplateInfoGet(q, options) {
        return (0, exports.CSSTemplatesApiFp)(this.configuration).apiV1CssTemplateInfoGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Delete CSS template
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSSTemplatesApi
     */
    apiV1CssTemplatePkDelete(pk, options) {
        return (0, exports.CSSTemplatesApiFp)(this.configuration).apiV1CssTemplatePkDelete(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get a CSS template
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSSTemplatesApi
     */
    apiV1CssTemplatePkGet(pk, q, options) {
        return (0, exports.CSSTemplatesApiFp)(this.configuration).apiV1CssTemplatePkGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     * Update a CSS template
     * @param {CssTemplateRestApiPut} body Model schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSSTemplatesApi
     */
    apiV1CssTemplatePkPut(body, pk, options) {
        return (0, exports.CSSTemplatesApiFp)(this.configuration).apiV1CssTemplatePkPut(body, pk, options)(this.fetch, this.basePath);
    }
    /**
     * Create a CSS template
     * @param {CssTemplateRestApiPost} body Model schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSSTemplatesApi
     */
    apiV1CssTemplatePost(body, options) {
        return (0, exports.CSSTemplatesApiFp)(this.configuration).apiV1CssTemplatePost(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSSTemplatesApi
     */
    apiV1CssTemplateRelatedColumnNameGet(columnName, q, options) {
        return (0, exports.CSSTemplatesApiFp)(this.configuration).apiV1CssTemplateRelatedColumnNameGet(columnName, q, options)(this.fetch, this.basePath);
    }
}
exports.CSSTemplatesApi = CSSTemplatesApi;
/**
 * CacheRestApiApi - fetch parameter creator
 * @export
 */
const CacheRestApiApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Takes a list of datasources, finds the associated cache records and invalidates them and removes the database records
         * @param {CacheInvalidationRequestSchema} body A list of datasources uuid or the tuples of database and datasource names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CachekeyInvalidatePost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1CachekeyInvalidatePost.');
            }
            const localVarPath = `/api/v1/cachekey/invalidate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CacheInvalidationRequestSchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CacheRestApiApiFetchParamCreator = CacheRestApiApiFetchParamCreator;
/**
 * CacheRestApiApi - functional programming interface
 * @export
 */
const CacheRestApiApiFp = function (configuration) {
    return {
        /**
         * Takes a list of datasources, finds the associated cache records and invalidates them and removes the database records
         * @param {CacheInvalidationRequestSchema} body A list of datasources uuid or the tuples of database and datasource names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CachekeyInvalidatePost(body, options) {
            const localVarFetchArgs = (0, exports.CacheRestApiApiFetchParamCreator)(configuration).apiV1CachekeyInvalidatePost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.CacheRestApiApiFp = CacheRestApiApiFp;
/**
 * CacheRestApiApi - factory interface
 * @export
 */
const CacheRestApiApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Takes a list of datasources, finds the associated cache records and invalidates them and removes the database records
         * @param {CacheInvalidationRequestSchema} body A list of datasources uuid or the tuples of database and datasource names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CachekeyInvalidatePost(body, options) {
            return (0, exports.CacheRestApiApiFp)(configuration).apiV1CachekeyInvalidatePost(body, options)(fetch, basePath);
        },
    };
};
exports.CacheRestApiApiFactory = CacheRestApiApiFactory;
/**
 * CacheRestApiApi - object-oriented interface
 * @export
 * @class CacheRestApiApi
 * @extends {BaseAPI}
 */
class CacheRestApiApi extends BaseAPI {
    /**
     * Takes a list of datasources, finds the associated cache records and invalidates them and removes the database records
     * @param {CacheInvalidationRequestSchema} body A list of datasources uuid or the tuples of database and datasource names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CacheRestApiApi
     */
    apiV1CachekeyInvalidatePost(body, options) {
        return (0, exports.CacheRestApiApiFp)(this.configuration).apiV1CachekeyInvalidatePost(body, options)(this.fetch, this.basePath);
    }
}
exports.CacheRestApiApi = CacheRestApiApi;
/**
 * ChartsApi - fetch parameter creator
 * @export
 */
const ChartsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Takes a query context cache key and returns payload data response for the given query.
         * @param {string} cacheKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataCacheKeyGet(cacheKey, options = {}) {
            // verify required parameter 'cacheKey' is not null or undefined
            if (cacheKey === null || cacheKey === undefined) {
                throw new RequiredError('cacheKey', 'Required parameter cacheKey was null or undefined when calling apiV1ChartDataCacheKeyGet.');
            }
            const localVarPath = `/api/v1/chart/data/{cache_key}`
                .replace(`{${"cache_key"}}`, encodeURIComponent(String(cacheKey)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a query context constructed in the client and returns payload data response for the given query.
         * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1ChartDataPost.');
            }
            const localVarPath = `/api/v1/chart/data`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ChartDataQueryContextSchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes multiple Charts in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDelete(q, options = {}) {
            const localVarPath = `/api/v1/chart/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exports multiple charts and downloads them as YAML files
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartExportGet(q, options = {}) {
            const localVarPath = `/api/v1/chart/export/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartFavoriteStatusGet(q, options = {}) {
            const localVarPath = `/api/v1/chart/favorite_status/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartGet(q, options = {}) {
            const localVarPath = `/api/v1/chart/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options = {}) {
            // verify required parameter 'formData' is not null or undefined
            if (formData === null || formData === undefined) {
                throw new RequiredError('formData', 'Required parameter formData was null or undefined when calling apiV1ChartImportPost.');
            }
            // verify required parameter 'overwrite' is not null or undefined
            if (overwrite === null || overwrite === undefined) {
                throw new RequiredError('overwrite', 'Required parameter overwrite was null or undefined when calling apiV1ChartImportPost.');
            }
            // verify required parameter 'passwords' is not null or undefined
            if (passwords === null || passwords === undefined) {
                throw new RequiredError('passwords', 'Required parameter passwords was null or undefined when calling apiV1ChartImportPost.');
            }
            // verify required parameter 'sshTunnelPasswords' is not null or undefined
            if (sshTunnelPasswords === null || sshTunnelPasswords === undefined) {
                throw new RequiredError('sshTunnelPasswords', 'Required parameter sshTunnelPasswords was null or undefined when calling apiV1ChartImportPost.');
            }
            // verify required parameter 'sshTunnelPrivateKeyPasswords' is not null or undefined
            if (sshTunnelPrivateKeyPasswords === null || sshTunnelPrivateKeyPasswords === undefined) {
                throw new RequiredError('sshTunnelPrivateKeyPasswords', 'Required parameter sshTunnelPrivateKeyPasswords was null or undefined when calling apiV1ChartImportPost.');
            }
            // verify required parameter 'sshTunnelPrivateKeys' is not null or undefined
            if (sshTunnelPrivateKeys === null || sshTunnelPrivateKeys === undefined) {
                throw new RequiredError('sshTunnelPrivateKeys', 'Required parameter sshTunnelPrivateKeys was null or undefined when calling apiV1ChartImportPost.');
            }
            const localVarPath = `/api/v1/chart/import/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            // authentication jwt required
            if (formData !== undefined) {
                localVarFormParams.set('formData', formData);
            }
            if (overwrite !== undefined) {
                localVarFormParams.set('overwrite', overwrite);
            }
            if (passwords !== undefined) {
                localVarFormParams.set('passwords', passwords);
            }
            if (sshTunnelPasswords !== undefined) {
                localVarFormParams.set('ssh_tunnel_passwords', sshTunnelPasswords);
            }
            if (sshTunnelPrivateKeyPasswords !== undefined) {
                localVarFormParams.set('ssh_tunnel_private_key_passwords', sshTunnelPrivateKeyPasswords);
            }
            if (sshTunnelPrivateKeys !== undefined) {
                localVarFormParams.set('ssh_tunnel_private_keys', sshTunnelPrivateKeys);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Several metadata information about chart API endpoints.
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartInfoGet(q, options = {}) {
            const localVarPath = `/api/v1/chart/_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Compute and cache a screenshot.
         * @param {number} pk
         * @param {ScreenshotQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkCacheScreenshotGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkCacheScreenshotGet.');
            }
            const localVarPath = `/api/v1/chart/{pk}/cache_screenshot/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
         * @param {number} pk The chart ID
         * @param {string} [format] The format in which the data should be returned
         * @param {string} [type] The type in which the data should be returned
         * @param {boolean} [force] Should the queries be forced to load from the source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDataGet(pk, format, type, force, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkDataGet.');
            }
            const localVarPath = `/api/v1/chart/{pk}/data/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Chart.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDelete(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkDelete.');
            }
            const localVarPath = `/api/v1/chart/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the chart from the user favorite list
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkFavoritesDelete(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkFavoritesDelete.');
            }
            const localVarPath = `/api/v1/chart/{pk}/favorites/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks the chart as favorite for the current user
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkFavoritesPost(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkFavoritesPost.');
            }
            const localVarPath = `/api/v1/chart/{pk}/favorites/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a chart detail information.
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkGet.');
            }
            const localVarPath = `/api/v1/chart/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes a Chart.
         * @param {ChartRestApiPut} body Chart schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkPut(body, pk, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1ChartPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkPut.');
            }
            const localVarPath = `/api/v1/chart/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ChartRestApiPut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a computed screenshot from cache.
         * @param {number} pk
         * @param {string} digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkScreenshotDigestGet(pk, digest, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkScreenshotDigestGet.');
            }
            // verify required parameter 'digest' is not null or undefined
            if (digest === null || digest === undefined) {
                throw new RequiredError('digest', 'Required parameter digest was null or undefined when calling apiV1ChartPkScreenshotDigestGet.');
            }
            const localVarPath = `/api/v1/chart/{pk}/screenshot/{digest}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"digest"}}`, encodeURIComponent(String(digest)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Compute or get already computed chart thumbnail from cache.
         * @param {number} pk
         * @param {string} digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkThumbnailDigestGet(pk, digest, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ChartPkThumbnailDigestGet.');
            }
            // verify required parameter 'digest' is not null or undefined
            if (digest === null || digest === undefined) {
                throw new RequiredError('digest', 'Required parameter digest was null or undefined when calling apiV1ChartPkThumbnailDigestGet.');
            }
            const localVarPath = `/api/v1/chart/{pk}/thumbnail/{digest}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"digest"}}`, encodeURIComponent(String(digest)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Chart.
         * @param {ChartRestApiPost} body Chart schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1ChartPost.');
            }
            const localVarPath = `/api/v1/chart/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ChartRestApiPost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartRelatedColumnNameGet(columnName, q, options = {}) {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1ChartRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/chart/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ChartsApiFetchParamCreator = ChartsApiFetchParamCreator;
/**
 * ChartsApi - functional programming interface
 * @export
 */
const ChartsApiFp = function (configuration) {
    return {
        /**
         * Takes a query context cache key and returns payload data response for the given query.
         * @param {string} cacheKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataCacheKeyGet(cacheKey, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartDataCacheKeyGet(cacheKey, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Takes a query context constructed in the client and returns payload data response for the given query.
         * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataPost(body, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartDataPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes multiple Charts in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDelete(q, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartDelete(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Exports multiple charts and downloads them as YAML files
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartExportGet(q, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartExportGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartFavoriteStatusGet(q, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartFavoriteStatusGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartGet(q, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Several metadata information about chart API endpoints.
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartInfoGet(q, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartInfoGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Compute and cache a screenshot.
         * @param {number} pk
         * @param {ScreenshotQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkCacheScreenshotGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartPkCacheScreenshotGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
         * @param {number} pk The chart ID
         * @param {string} [format] The format in which the data should be returned
         * @param {string} [type] The type in which the data should be returned
         * @param {boolean} [force] Should the queries be forced to load from the source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDataGet(pk, format, type, force, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartPkDataGet(pk, format, type, force, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Chart.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDelete(pk, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartPkDelete(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Remove the chart from the user favorite list
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkFavoritesDelete(pk, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartPkFavoritesDelete(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Marks the chart as favorite for the current user
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkFavoritesPost(pk, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartPkFavoritesPost(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a chart detail information.
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartPkGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Changes a Chart.
         * @param {ChartRestApiPut} body Chart schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkPut(body, pk, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartPkPut(body, pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a computed screenshot from cache.
         * @param {number} pk
         * @param {string} digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkScreenshotDigestGet(pk, digest, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartPkScreenshotDigestGet(pk, digest, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Compute or get already computed chart thumbnail from cache.
         * @param {number} pk
         * @param {string} digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkThumbnailDigestGet(pk, digest, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartPkThumbnailDigestGet(pk, digest, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new Chart.
         * @param {ChartRestApiPost} body Chart schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPost(body, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartRelatedColumnNameGet(columnName, q, options) {
            const localVarFetchArgs = (0, exports.ChartsApiFetchParamCreator)(configuration).apiV1ChartRelatedColumnNameGet(columnName, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.ChartsApiFp = ChartsApiFp;
/**
 * ChartsApi - factory interface
 * @export
 */
const ChartsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Takes a query context cache key and returns payload data response for the given query.
         * @param {string} cacheKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataCacheKeyGet(cacheKey, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartDataCacheKeyGet(cacheKey, options)(fetch, basePath);
        },
        /**
         * Takes a query context constructed in the client and returns payload data response for the given query.
         * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDataPost(body, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartDataPost(body, options)(fetch, basePath);
        },
        /**
         * Deletes multiple Charts in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartDelete(q, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartDelete(q, options)(fetch, basePath);
        },
        /**
         * Exports multiple charts and downloads them as YAML files
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartExportGet(q, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartExportGet(q, options)(fetch, basePath);
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartFavoriteStatusGet(q, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartFavoriteStatusGet(q, options)(fetch, basePath);
        },
        /**
         * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartGet(q, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartGet(q, options)(fetch, basePath);
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options)(fetch, basePath);
        },
        /**
         * Several metadata information about chart API endpoints.
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartInfoGet(q, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartInfoGet(q, options)(fetch, basePath);
        },
        /**
         * Compute and cache a screenshot.
         * @param {number} pk
         * @param {ScreenshotQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkCacheScreenshotGet(pk, q, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartPkCacheScreenshotGet(pk, q, options)(fetch, basePath);
        },
        /**
         * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
         * @param {number} pk The chart ID
         * @param {string} [format] The format in which the data should be returned
         * @param {string} [type] The type in which the data should be returned
         * @param {boolean} [force] Should the queries be forced to load from the source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDataGet(pk, format, type, force, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartPkDataGet(pk, format, type, force, options)(fetch, basePath);
        },
        /**
         * Deletes a Chart.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkDelete(pk, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartPkDelete(pk, options)(fetch, basePath);
        },
        /**
         * Remove the chart from the user favorite list
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkFavoritesDelete(pk, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartPkFavoritesDelete(pk, options)(fetch, basePath);
        },
        /**
         * Marks the chart as favorite for the current user
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkFavoritesPost(pk, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartPkFavoritesPost(pk, options)(fetch, basePath);
        },
        /**
         * Get a chart detail information.
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkGet(pk, q, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartPkGet(pk, q, options)(fetch, basePath);
        },
        /**
         * Changes a Chart.
         * @param {ChartRestApiPut} body Chart schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkPut(body, pk, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartPkPut(body, pk, options)(fetch, basePath);
        },
        /**
         * Get a computed screenshot from cache.
         * @param {number} pk
         * @param {string} digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkScreenshotDigestGet(pk, digest, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartPkScreenshotDigestGet(pk, digest, options)(fetch, basePath);
        },
        /**
         * Compute or get already computed chart thumbnail from cache.
         * @param {number} pk
         * @param {string} digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPkThumbnailDigestGet(pk, digest, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartPkThumbnailDigestGet(pk, digest, options)(fetch, basePath);
        },
        /**
         * Create a new Chart.
         * @param {ChartRestApiPost} body Chart schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartPost(body, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartPost(body, options)(fetch, basePath);
        },
        /**
         * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChartRelatedColumnNameGet(columnName, q, options) {
            return (0, exports.ChartsApiFp)(configuration).apiV1ChartRelatedColumnNameGet(columnName, q, options)(fetch, basePath);
        },
    };
};
exports.ChartsApiFactory = ChartsApiFactory;
/**
 * ChartsApi - object-oriented interface
 * @export
 * @class ChartsApi
 * @extends {BaseAPI}
 */
class ChartsApi extends BaseAPI {
    /**
     * Takes a query context cache key and returns payload data response for the given query.
     * @param {string} cacheKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartDataCacheKeyGet(cacheKey, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartDataCacheKeyGet(cacheKey, options)(this.fetch, this.basePath);
    }
    /**
     * Takes a query context constructed in the client and returns payload data response for the given query.
     * @param {ChartDataQueryContextSchema} body A query context consists of a datasource from which to fetch data and one or many query objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartDataPost(body, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartDataPost(body, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes multiple Charts in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartDelete(q, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartDelete(q, options)(this.fetch, this.basePath);
    }
    /**
     * Exports multiple charts and downloads them as YAML files
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartExportGet(q, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartExportGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Check favorited dashboards for current user
     * @param {GetFavStarIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartFavoriteStatusGet(q, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartFavoriteStatusGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartGet(q, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartGet(q, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {string} sshTunnelPasswords
     * @param {string} sshTunnelPrivateKeyPasswords
     * @param {string} sshTunnelPrivateKeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options)(this.fetch, this.basePath);
    }
    /**
     * Several metadata information about chart API endpoints.
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartInfoGet(q, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartInfoGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Compute and cache a screenshot.
     * @param {number} pk
     * @param {ScreenshotQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkCacheScreenshotGet(pk, q, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkCacheScreenshotGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     * Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
     * @param {number} pk The chart ID
     * @param {string} [format] The format in which the data should be returned
     * @param {string} [type] The type in which the data should be returned
     * @param {boolean} [force] Should the queries be forced to load from the source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkDataGet(pk, format, type, force, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkDataGet(pk, format, type, force, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes a Chart.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkDelete(pk, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkDelete(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Remove the chart from the user favorite list
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkFavoritesDelete(pk, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkFavoritesDelete(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Marks the chart as favorite for the current user
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkFavoritesPost(pk, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkFavoritesPost(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get a chart detail information.
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkGet(pk, q, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     * Changes a Chart.
     * @param {ChartRestApiPut} body Chart schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkPut(body, pk, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkPut(body, pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get a computed screenshot from cache.
     * @param {number} pk
     * @param {string} digest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkScreenshotDigestGet(pk, digest, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkScreenshotDigestGet(pk, digest, options)(this.fetch, this.basePath);
    }
    /**
     * Compute or get already computed chart thumbnail from cache.
     * @param {number} pk
     * @param {string} digest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPkThumbnailDigestGet(pk, digest, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPkThumbnailDigestGet(pk, digest, options)(this.fetch, this.basePath);
    }
    /**
     * Create a new Chart.
     * @param {ChartRestApiPost} body Chart schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartPost(body, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartPost(body, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV1ChartRelatedColumnNameGet(columnName, q, options) {
        return (0, exports.ChartsApiFp)(this.configuration).apiV1ChartRelatedColumnNameGet(columnName, q, options)(this.fetch, this.basePath);
    }
}
exports.ChartsApi = ChartsApi;
/**
 * CurrentUserApi - fetch parameter creator
 * @export
 */
const CurrentUserApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns the user object corresponding to the agent making the request, or returns a 401 error if the user is unauthenticated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MeGet(options = {}) {
            const localVarPath = `/api/v1/me/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the user roles corresponding to the agent making the request, or returns a 401 error if the user is unauthenticated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MeRolesGet(options = {}) {
            const localVarPath = `/api/v1/me/roles/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CurrentUserApiFetchParamCreator = CurrentUserApiFetchParamCreator;
/**
 * CurrentUserApi - functional programming interface
 * @export
 */
const CurrentUserApiFp = function (configuration) {
    return {
        /**
         * Returns the user object corresponding to the agent making the request, or returns a 401 error if the user is unauthenticated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MeGet(options) {
            const localVarFetchArgs = (0, exports.CurrentUserApiFetchParamCreator)(configuration).apiV1MeGet(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the user roles corresponding to the agent making the request, or returns a 401 error if the user is unauthenticated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MeRolesGet(options) {
            const localVarFetchArgs = (0, exports.CurrentUserApiFetchParamCreator)(configuration).apiV1MeRolesGet(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.CurrentUserApiFp = CurrentUserApiFp;
/**
 * CurrentUserApi - factory interface
 * @export
 */
const CurrentUserApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns the user object corresponding to the agent making the request, or returns a 401 error if the user is unauthenticated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MeGet(options) {
            return (0, exports.CurrentUserApiFp)(configuration).apiV1MeGet(options)(fetch, basePath);
        },
        /**
         * Returns the user roles corresponding to the agent making the request, or returns a 401 error if the user is unauthenticated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MeRolesGet(options) {
            return (0, exports.CurrentUserApiFp)(configuration).apiV1MeRolesGet(options)(fetch, basePath);
        },
    };
};
exports.CurrentUserApiFactory = CurrentUserApiFactory;
/**
 * CurrentUserApi - object-oriented interface
 * @export
 * @class CurrentUserApi
 * @extends {BaseAPI}
 */
class CurrentUserApi extends BaseAPI {
    /**
     * Returns the user object corresponding to the agent making the request, or returns a 401 error if the user is unauthenticated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApi
     */
    apiV1MeGet(options) {
        return (0, exports.CurrentUserApiFp)(this.configuration).apiV1MeGet(options)(this.fetch, this.basePath);
    }
    /**
     * Returns the user roles corresponding to the agent making the request, or returns a 401 error if the user is unauthenticated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApi
     */
    apiV1MeRolesGet(options) {
        return (0, exports.CurrentUserApiFp)(this.configuration).apiV1MeRolesGet(options)(this.fetch, this.basePath);
    }
}
exports.CurrentUserApi = CurrentUserApi;
/**
 * DashboardFilterStateApi - fetch parameter creator
 * @export
 */
const DashboardFilterStateApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Deletes a value.
         * @param {number} pk
         * @param {string} key The value key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFilterStateKeyDelete(pk, key, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DashboardPkFilterStateKeyDelete.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key', 'Required parameter key was null or undefined when calling apiV1DashboardPkFilterStateKeyDelete.');
            }
            const localVarPath = `/api/v1/dashboard/{pk}/filter_state/{key}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrives a value.
         * @param {number} pk
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFilterStateKeyGet(pk, key, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DashboardPkFilterStateKeyGet.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key', 'Required parameter key was null or undefined when calling apiV1DashboardPkFilterStateKeyGet.');
            }
            const localVarPath = `/api/v1/dashboard/{pk}/filter_state/{key}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing value.
         * @param {TemporaryCachePutSchema} body
         * @param {number} pk
         * @param {string} key
         * @param {number} [tabId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFilterStateKeyPut(body, pk, key, tabId, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DashboardPkFilterStateKeyPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DashboardPkFilterStateKeyPut.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key', 'Required parameter key was null or undefined when calling apiV1DashboardPkFilterStateKeyPut.');
            }
            const localVarPath = `/api/v1/dashboard/{pk}/filter_state/{key}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (tabId !== undefined) {
                localVarQueryParameter['tab_id'] = tabId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("TemporaryCachePutSchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stores a new value.
         * @param {TemporaryCachePostSchema} body
         * @param {number} pk
         * @param {number} [tabId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFilterStatePost(body, pk, tabId, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DashboardPkFilterStatePost.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DashboardPkFilterStatePost.');
            }
            const localVarPath = `/api/v1/dashboard/{pk}/filter_state`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (tabId !== undefined) {
                localVarQueryParameter['tab_id'] = tabId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("TemporaryCachePostSchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DashboardFilterStateApiFetchParamCreator = DashboardFilterStateApiFetchParamCreator;
/**
 * DashboardFilterStateApi - functional programming interface
 * @export
 */
const DashboardFilterStateApiFp = function (configuration) {
    return {
        /**
         * Deletes a value.
         * @param {number} pk
         * @param {string} key The value key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFilterStateKeyDelete(pk, key, options) {
            const localVarFetchArgs = (0, exports.DashboardFilterStateApiFetchParamCreator)(configuration).apiV1DashboardPkFilterStateKeyDelete(pk, key, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrives a value.
         * @param {number} pk
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFilterStateKeyGet(pk, key, options) {
            const localVarFetchArgs = (0, exports.DashboardFilterStateApiFetchParamCreator)(configuration).apiV1DashboardPkFilterStateKeyGet(pk, key, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an existing value.
         * @param {TemporaryCachePutSchema} body
         * @param {number} pk
         * @param {string} key
         * @param {number} [tabId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFilterStateKeyPut(body, pk, key, tabId, options) {
            const localVarFetchArgs = (0, exports.DashboardFilterStateApiFetchParamCreator)(configuration).apiV1DashboardPkFilterStateKeyPut(body, pk, key, tabId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Stores a new value.
         * @param {TemporaryCachePostSchema} body
         * @param {number} pk
         * @param {number} [tabId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFilterStatePost(body, pk, tabId, options) {
            const localVarFetchArgs = (0, exports.DashboardFilterStateApiFetchParamCreator)(configuration).apiV1DashboardPkFilterStatePost(body, pk, tabId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.DashboardFilterStateApiFp = DashboardFilterStateApiFp;
/**
 * DashboardFilterStateApi - factory interface
 * @export
 */
const DashboardFilterStateApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Deletes a value.
         * @param {number} pk
         * @param {string} key The value key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFilterStateKeyDelete(pk, key, options) {
            return (0, exports.DashboardFilterStateApiFp)(configuration).apiV1DashboardPkFilterStateKeyDelete(pk, key, options)(fetch, basePath);
        },
        /**
         * Retrives a value.
         * @param {number} pk
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFilterStateKeyGet(pk, key, options) {
            return (0, exports.DashboardFilterStateApiFp)(configuration).apiV1DashboardPkFilterStateKeyGet(pk, key, options)(fetch, basePath);
        },
        /**
         * Updates an existing value.
         * @param {TemporaryCachePutSchema} body
         * @param {number} pk
         * @param {string} key
         * @param {number} [tabId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFilterStateKeyPut(body, pk, key, tabId, options) {
            return (0, exports.DashboardFilterStateApiFp)(configuration).apiV1DashboardPkFilterStateKeyPut(body, pk, key, tabId, options)(fetch, basePath);
        },
        /**
         * Stores a new value.
         * @param {TemporaryCachePostSchema} body
         * @param {number} pk
         * @param {number} [tabId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFilterStatePost(body, pk, tabId, options) {
            return (0, exports.DashboardFilterStateApiFp)(configuration).apiV1DashboardPkFilterStatePost(body, pk, tabId, options)(fetch, basePath);
        },
    };
};
exports.DashboardFilterStateApiFactory = DashboardFilterStateApiFactory;
/**
 * DashboardFilterStateApi - object-oriented interface
 * @export
 * @class DashboardFilterStateApi
 * @extends {BaseAPI}
 */
class DashboardFilterStateApi extends BaseAPI {
    /**
     * Deletes a value.
     * @param {number} pk
     * @param {string} key The value key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardFilterStateApi
     */
    apiV1DashboardPkFilterStateKeyDelete(pk, key, options) {
        return (0, exports.DashboardFilterStateApiFp)(this.configuration).apiV1DashboardPkFilterStateKeyDelete(pk, key, options)(this.fetch, this.basePath);
    }
    /**
     * Retrives a value.
     * @param {number} pk
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardFilterStateApi
     */
    apiV1DashboardPkFilterStateKeyGet(pk, key, options) {
        return (0, exports.DashboardFilterStateApiFp)(this.configuration).apiV1DashboardPkFilterStateKeyGet(pk, key, options)(this.fetch, this.basePath);
    }
    /**
     * Updates an existing value.
     * @param {TemporaryCachePutSchema} body
     * @param {number} pk
     * @param {string} key
     * @param {number} [tabId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardFilterStateApi
     */
    apiV1DashboardPkFilterStateKeyPut(body, pk, key, tabId, options) {
        return (0, exports.DashboardFilterStateApiFp)(this.configuration).apiV1DashboardPkFilterStateKeyPut(body, pk, key, tabId, options)(this.fetch, this.basePath);
    }
    /**
     * Stores a new value.
     * @param {TemporaryCachePostSchema} body
     * @param {number} pk
     * @param {number} [tabId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardFilterStateApi
     */
    apiV1DashboardPkFilterStatePost(body, pk, tabId, options) {
        return (0, exports.DashboardFilterStateApiFp)(this.configuration).apiV1DashboardPkFilterStatePost(body, pk, tabId, options)(this.fetch, this.basePath);
    }
}
exports.DashboardFilterStateApi = DashboardFilterStateApi;
/**
 * DashboardPermanentLinkApi - fetch parameter creator
 * @export
 */
const DashboardPermanentLinkApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Retrives dashboard state associated with a permanent link.
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPermalinkKeyGet(key, options = {}) {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key', 'Required parameter key was null or undefined when calling apiV1DashboardPermalinkKeyGet.');
            }
            const localVarPath = `/api/v1/dashboard/permalink/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stores a new permanent link.
         * @param {string} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkPermalinkPost(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DashboardPkPermalinkPost.');
            }
            const localVarPath = `/api/v1/dashboard/{pk}/permalink`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DashboardPermanentLinkApiFetchParamCreator = DashboardPermanentLinkApiFetchParamCreator;
/**
 * DashboardPermanentLinkApi - functional programming interface
 * @export
 */
const DashboardPermanentLinkApiFp = function (configuration) {
    return {
        /**
         * Retrives dashboard state associated with a permanent link.
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPermalinkKeyGet(key, options) {
            const localVarFetchArgs = (0, exports.DashboardPermanentLinkApiFetchParamCreator)(configuration).apiV1DashboardPermalinkKeyGet(key, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Stores a new permanent link.
         * @param {string} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkPermalinkPost(pk, options) {
            const localVarFetchArgs = (0, exports.DashboardPermanentLinkApiFetchParamCreator)(configuration).apiV1DashboardPkPermalinkPost(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.DashboardPermanentLinkApiFp = DashboardPermanentLinkApiFp;
/**
 * DashboardPermanentLinkApi - factory interface
 * @export
 */
const DashboardPermanentLinkApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Retrives dashboard state associated with a permanent link.
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPermalinkKeyGet(key, options) {
            return (0, exports.DashboardPermanentLinkApiFp)(configuration).apiV1DashboardPermalinkKeyGet(key, options)(fetch, basePath);
        },
        /**
         * Stores a new permanent link.
         * @param {string} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkPermalinkPost(pk, options) {
            return (0, exports.DashboardPermanentLinkApiFp)(configuration).apiV1DashboardPkPermalinkPost(pk, options)(fetch, basePath);
        },
    };
};
exports.DashboardPermanentLinkApiFactory = DashboardPermanentLinkApiFactory;
/**
 * DashboardPermanentLinkApi - object-oriented interface
 * @export
 * @class DashboardPermanentLinkApi
 * @extends {BaseAPI}
 */
class DashboardPermanentLinkApi extends BaseAPI {
    /**
     * Retrives dashboard state associated with a permanent link.
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardPermanentLinkApi
     */
    apiV1DashboardPermalinkKeyGet(key, options) {
        return (0, exports.DashboardPermanentLinkApiFp)(this.configuration).apiV1DashboardPermalinkKeyGet(key, options)(this.fetch, this.basePath);
    }
    /**
     * Stores a new permanent link.
     * @param {string} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardPermanentLinkApi
     */
    apiV1DashboardPkPermalinkPost(pk, options) {
        return (0, exports.DashboardPermanentLinkApiFp)(this.configuration).apiV1DashboardPkPermalinkPost(pk, options)(this.fetch, this.basePath);
    }
}
exports.DashboardPermanentLinkApi = DashboardPermanentLinkApi;
/**
 * DashboardsApi - fetch parameter creator
 * @export
 */
const DashboardsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Deletes multiple Dashboards in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDelete(q, options = {}) {
            const localVarPath = `/api/v1/dashboard/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exports multiple Dashboards and downloads them as YAML files.
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardExportGet(q, options = {}) {
            const localVarPath = `/api/v1/dashboard/export/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardFavoriteStatusGet(q, options = {}) {
            const localVarPath = `/api/v1/dashboard/favorite_status/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardGet(q, options = {}) {
            const localVarPath = `/api/v1/dashboard/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the chart definitions for a given dashboard
         * @param {string} idOrSlug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugChartsGet(idOrSlug, options = {}) {
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug', 'Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugChartsGet.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}/charts`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Makes a copy of an existing dashboard
         * @param {DashboardCopySchema} body
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugCopyPost(body, idOrSlug, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DashboardIdOrSlugCopyPost.');
            }
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug', 'Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugCopyPost.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}/copy/`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("DashboardCopySchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
         * @param {string} idOrSlug Either the id of the dashboard, or its slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugDatasetsGet(idOrSlug, options = {}) {
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug', 'Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugDatasetsGet.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}/datasets`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a dashboard's embedded configuration.
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug, options = {}) {
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug', 'Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugEmbeddedDelete.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}/embedded`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the dashboard's embedded configuration
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug, options = {}) {
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug', 'Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugEmbeddedGet.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}/embedded`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets a dashboard's embedded configuration.
         * @param {EmbeddedDashboardConfig} body The embedded configuration to set
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedPost(body, idOrSlug, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DashboardIdOrSlugEmbeddedPost.');
            }
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug', 'Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugEmbeddedPost.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}/embedded`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EmbeddedDashboardConfig" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets a dashboard's embedded configuration.
         * @param {EmbeddedDashboardConfig} body The embedded configuration to set
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedPut(body, idOrSlug, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DashboardIdOrSlugEmbeddedPut.');
            }
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug', 'Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugEmbeddedPut.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}/embedded`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EmbeddedDashboardConfig" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a dashboard detail information.
         * @param {string} idOrSlug Either the id of the dashboard, or its slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugGet(idOrSlug, options = {}) {
            // verify required parameter 'idOrSlug' is not null or undefined
            if (idOrSlug === null || idOrSlug === undefined) {
                throw new RequiredError('idOrSlug', 'Required parameter idOrSlug was null or undefined when calling apiV1DashboardIdOrSlugGet.');
            }
            const localVarPath = `/api/v1/dashboard/{id_or_slug}`
                .replace(`{${"id_or_slug"}}`, encodeURIComponent(String(idOrSlug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options = {}) {
            // verify required parameter 'formData' is not null or undefined
            if (formData === null || formData === undefined) {
                throw new RequiredError('formData', 'Required parameter formData was null or undefined when calling apiV1DashboardImportPost.');
            }
            // verify required parameter 'overwrite' is not null or undefined
            if (overwrite === null || overwrite === undefined) {
                throw new RequiredError('overwrite', 'Required parameter overwrite was null or undefined when calling apiV1DashboardImportPost.');
            }
            // verify required parameter 'passwords' is not null or undefined
            if (passwords === null || passwords === undefined) {
                throw new RequiredError('passwords', 'Required parameter passwords was null or undefined when calling apiV1DashboardImportPost.');
            }
            // verify required parameter 'sshTunnelPasswords' is not null or undefined
            if (sshTunnelPasswords === null || sshTunnelPasswords === undefined) {
                throw new RequiredError('sshTunnelPasswords', 'Required parameter sshTunnelPasswords was null or undefined when calling apiV1DashboardImportPost.');
            }
            // verify required parameter 'sshTunnelPrivateKeyPasswords' is not null or undefined
            if (sshTunnelPrivateKeyPasswords === null || sshTunnelPrivateKeyPasswords === undefined) {
                throw new RequiredError('sshTunnelPrivateKeyPasswords', 'Required parameter sshTunnelPrivateKeyPasswords was null or undefined when calling apiV1DashboardImportPost.');
            }
            // verify required parameter 'sshTunnelPrivateKeys' is not null or undefined
            if (sshTunnelPrivateKeys === null || sshTunnelPrivateKeys === undefined) {
                throw new RequiredError('sshTunnelPrivateKeys', 'Required parameter sshTunnelPrivateKeys was null or undefined when calling apiV1DashboardImportPost.');
            }
            const localVarPath = `/api/v1/dashboard/import/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            // authentication jwt required
            if (formData !== undefined) {
                localVarFormParams.set('formData', formData);
            }
            if (overwrite !== undefined) {
                localVarFormParams.set('overwrite', overwrite);
            }
            if (passwords !== undefined) {
                localVarFormParams.set('passwords', passwords);
            }
            if (sshTunnelPasswords !== undefined) {
                localVarFormParams.set('ssh_tunnel_passwords', sshTunnelPasswords);
            }
            if (sshTunnelPrivateKeyPasswords !== undefined) {
                localVarFormParams.set('ssh_tunnel_private_key_passwords', sshTunnelPrivateKeyPasswords);
            }
            if (sshTunnelPrivateKeys !== undefined) {
                localVarFormParams.set('ssh_tunnel_private_keys', sshTunnelPrivateKeys);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Several metadata information about dashboard API endpoints.
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardInfoGet(q, options = {}) {
            const localVarPath = `/api/v1/dashboard/_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Dashboard.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkDelete(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DashboardPkDelete.');
            }
            const localVarPath = `/api/v1/dashboard/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the dashboard from the user favorite list
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFavoritesDelete(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DashboardPkFavoritesDelete.');
            }
            const localVarPath = `/api/v1/dashboard/{pk}/favorites/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks the dashboard as favorite for the current user
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFavoritesPost(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DashboardPkFavoritesPost.');
            }
            const localVarPath = `/api/v1/dashboard/{pk}/favorites/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes a Dashboard.
         * @param {DashboardRestApiPut} body Dashboard schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkPut(body, pk, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DashboardPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DashboardPkPut.');
            }
            const localVarPath = `/api/v1/dashboard/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("DashboardRestApiPut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Compute async or get already computed dashboard thumbnail from cache.
         * @param {number} pk
         * @param {string} digest A hex digest that makes this dashboard unique
         * @param {ThumbnailQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkThumbnailDigestGet(pk, digest, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DashboardPkThumbnailDigestGet.');
            }
            // verify required parameter 'digest' is not null or undefined
            if (digest === null || digest === undefined) {
                throw new RequiredError('digest', 'Required parameter digest was null or undefined when calling apiV1DashboardPkThumbnailDigestGet.');
            }
            const localVarPath = `/api/v1/dashboard/{pk}/thumbnail/{digest}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"digest"}}`, encodeURIComponent(String(digest)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Dashboard.
         * @param {DashboardRestApiPost} body Dashboard schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DashboardPost.');
            }
            const localVarPath = `/api/v1/dashboard/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("DashboardRestApiPost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all possible owners for a dashboard.
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardRelatedColumnNameGet(columnName, q, options = {}) {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1DashboardRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/dashboard/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DashboardsApiFetchParamCreator = DashboardsApiFetchParamCreator;
/**
 * DashboardsApi - functional programming interface
 * @export
 */
const DashboardsApiFp = function (configuration) {
    return {
        /**
         * Deletes multiple Dashboards in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDelete(q, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardDelete(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Exports multiple Dashboards and downloads them as YAML files.
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardExportGet(q, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardExportGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardFavoriteStatusGet(q, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardFavoriteStatusGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardGet(q, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the chart definitions for a given dashboard
         * @param {string} idOrSlug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugChartsGet(idOrSlug, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardIdOrSlugChartsGet(idOrSlug, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Makes a copy of an existing dashboard
         * @param {DashboardCopySchema} body
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugCopyPost(body, idOrSlug, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardIdOrSlugCopyPost(body, idOrSlug, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
         * @param {string} idOrSlug Either the id of the dashboard, or its slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugDatasetsGet(idOrSlug, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardIdOrSlugDatasetsGet(idOrSlug, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Removes a dashboard's embedded configuration.
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the dashboard's embedded configuration
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Sets a dashboard's embedded configuration.
         * @param {EmbeddedDashboardConfig} body The embedded configuration to set
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedPost(body, idOrSlug, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardIdOrSlugEmbeddedPost(body, idOrSlug, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Sets a dashboard's embedded configuration.
         * @param {EmbeddedDashboardConfig} body The embedded configuration to set
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedPut(body, idOrSlug, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardIdOrSlugEmbeddedPut(body, idOrSlug, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a dashboard detail information.
         * @param {string} idOrSlug Either the id of the dashboard, or its slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugGet(idOrSlug, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardIdOrSlugGet(idOrSlug, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Several metadata information about dashboard API endpoints.
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardInfoGet(q, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardInfoGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Dashboard.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkDelete(pk, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardPkDelete(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Remove the dashboard from the user favorite list
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFavoritesDelete(pk, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardPkFavoritesDelete(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Marks the dashboard as favorite for the current user
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFavoritesPost(pk, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardPkFavoritesPost(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Changes a Dashboard.
         * @param {DashboardRestApiPut} body Dashboard schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkPut(body, pk, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardPkPut(body, pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Compute async or get already computed dashboard thumbnail from cache.
         * @param {number} pk
         * @param {string} digest A hex digest that makes this dashboard unique
         * @param {ThumbnailQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkThumbnailDigestGet(pk, digest, q, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardPkThumbnailDigestGet(pk, digest, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new Dashboard.
         * @param {DashboardRestApiPost} body Dashboard schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPost(body, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of all possible owners for a dashboard.
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardRelatedColumnNameGet(columnName, q, options) {
            const localVarFetchArgs = (0, exports.DashboardsApiFetchParamCreator)(configuration).apiV1DashboardRelatedColumnNameGet(columnName, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.DashboardsApiFp = DashboardsApiFp;
/**
 * DashboardsApi - factory interface
 * @export
 */
const DashboardsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Deletes multiple Dashboards in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDelete(q, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardDelete(q, options)(fetch, basePath);
        },
        /**
         * Exports multiple Dashboards and downloads them as YAML files.
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardExportGet(q, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardExportGet(q, options)(fetch, basePath);
        },
        /**
         * Check favorited dashboards for current user
         * @param {GetFavStarIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardFavoriteStatusGet(q, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardFavoriteStatusGet(q, options)(fetch, basePath);
        },
        /**
         * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardGet(q, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardGet(q, options)(fetch, basePath);
        },
        /**
         * Get the chart definitions for a given dashboard
         * @param {string} idOrSlug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugChartsGet(idOrSlug, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardIdOrSlugChartsGet(idOrSlug, options)(fetch, basePath);
        },
        /**
         *
         * @summary Makes a copy of an existing dashboard
         * @param {DashboardCopySchema} body
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugCopyPost(body, idOrSlug, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardIdOrSlugCopyPost(body, idOrSlug, options)(fetch, basePath);
        },
        /**
         * Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
         * @param {string} idOrSlug Either the id of the dashboard, or its slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugDatasetsGet(idOrSlug, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardIdOrSlugDatasetsGet(idOrSlug, options)(fetch, basePath);
        },
        /**
         * Removes a dashboard's embedded configuration.
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug, options)(fetch, basePath);
        },
        /**
         * Returns the dashboard's embedded configuration
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug, options)(fetch, basePath);
        },
        /**
         * Sets a dashboard's embedded configuration.
         * @param {EmbeddedDashboardConfig} body The embedded configuration to set
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedPost(body, idOrSlug, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardIdOrSlugEmbeddedPost(body, idOrSlug, options)(fetch, basePath);
        },
        /**
         * Sets a dashboard's embedded configuration.
         * @param {EmbeddedDashboardConfig} body The embedded configuration to set
         * @param {string} idOrSlug The dashboard id or slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugEmbeddedPut(body, idOrSlug, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardIdOrSlugEmbeddedPut(body, idOrSlug, options)(fetch, basePath);
        },
        /**
         * Get a dashboard detail information.
         * @param {string} idOrSlug Either the id of the dashboard, or its slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardIdOrSlugGet(idOrSlug, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardIdOrSlugGet(idOrSlug, options)(fetch, basePath);
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options)(fetch, basePath);
        },
        /**
         * Several metadata information about dashboard API endpoints.
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardInfoGet(q, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardInfoGet(q, options)(fetch, basePath);
        },
        /**
         * Deletes a Dashboard.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkDelete(pk, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardPkDelete(pk, options)(fetch, basePath);
        },
        /**
         * Remove the dashboard from the user favorite list
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFavoritesDelete(pk, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardPkFavoritesDelete(pk, options)(fetch, basePath);
        },
        /**
         * Marks the dashboard as favorite for the current user
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkFavoritesPost(pk, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardPkFavoritesPost(pk, options)(fetch, basePath);
        },
        /**
         * Changes a Dashboard.
         * @param {DashboardRestApiPut} body Dashboard schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkPut(body, pk, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardPkPut(body, pk, options)(fetch, basePath);
        },
        /**
         * Compute async or get already computed dashboard thumbnail from cache.
         * @param {number} pk
         * @param {string} digest A hex digest that makes this dashboard unique
         * @param {ThumbnailQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPkThumbnailDigestGet(pk, digest, q, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardPkThumbnailDigestGet(pk, digest, q, options)(fetch, basePath);
        },
        /**
         * Create a new Dashboard.
         * @param {DashboardRestApiPost} body Dashboard schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardPost(body, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardPost(body, options)(fetch, basePath);
        },
        /**
         * Get a list of all possible owners for a dashboard.
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardRelatedColumnNameGet(columnName, q, options) {
            return (0, exports.DashboardsApiFp)(configuration).apiV1DashboardRelatedColumnNameGet(columnName, q, options)(fetch, basePath);
        },
    };
};
exports.DashboardsApiFactory = DashboardsApiFactory;
/**
 * DashboardsApi - object-oriented interface
 * @export
 * @class DashboardsApi
 * @extends {BaseAPI}
 */
class DashboardsApi extends BaseAPI {
    /**
     * Deletes multiple Dashboards in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardDelete(q, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardDelete(q, options)(this.fetch, this.basePath);
    }
    /**
     * Exports multiple Dashboards and downloads them as YAML files.
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardExportGet(q, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardExportGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Check favorited dashboards for current user
     * @param {GetFavStarIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardFavoriteStatusGet(q, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardFavoriteStatusGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardGet(q, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get the chart definitions for a given dashboard
     * @param {string} idOrSlug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugChartsGet(idOrSlug, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardIdOrSlugChartsGet(idOrSlug, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Makes a copy of an existing dashboard
     * @param {DashboardCopySchema} body
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugCopyPost(body, idOrSlug, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardIdOrSlugCopyPost(body, idOrSlug, options)(this.fetch, this.basePath);
    }
    /**
     * Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
     * @param {string} idOrSlug Either the id of the dashboard, or its slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugDatasetsGet(idOrSlug, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardIdOrSlugDatasetsGet(idOrSlug, options)(this.fetch, this.basePath);
    }
    /**
     * Removes a dashboard's embedded configuration.
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardIdOrSlugEmbeddedDelete(idOrSlug, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the dashboard's embedded configuration
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardIdOrSlugEmbeddedGet(idOrSlug, options)(this.fetch, this.basePath);
    }
    /**
     * Sets a dashboard's embedded configuration.
     * @param {EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugEmbeddedPost(body, idOrSlug, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardIdOrSlugEmbeddedPost(body, idOrSlug, options)(this.fetch, this.basePath);
    }
    /**
     * Sets a dashboard's embedded configuration.
     * @param {EmbeddedDashboardConfig} body The embedded configuration to set
     * @param {string} idOrSlug The dashboard id or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugEmbeddedPut(body, idOrSlug, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardIdOrSlugEmbeddedPut(body, idOrSlug, options)(this.fetch, this.basePath);
    }
    /**
     * Get a dashboard detail information.
     * @param {string} idOrSlug Either the id of the dashboard, or its slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardIdOrSlugGet(idOrSlug, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardIdOrSlugGet(idOrSlug, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {string} sshTunnelPasswords
     * @param {string} sshTunnelPrivateKeyPasswords
     * @param {string} sshTunnelPrivateKeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options)(this.fetch, this.basePath);
    }
    /**
     * Several metadata information about dashboard API endpoints.
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardInfoGet(q, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardInfoGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes a Dashboard.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardPkDelete(pk, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardPkDelete(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Remove the dashboard from the user favorite list
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardPkFavoritesDelete(pk, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardPkFavoritesDelete(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Marks the dashboard as favorite for the current user
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardPkFavoritesPost(pk, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardPkFavoritesPost(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Changes a Dashboard.
     * @param {DashboardRestApiPut} body Dashboard schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardPkPut(body, pk, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardPkPut(body, pk, options)(this.fetch, this.basePath);
    }
    /**
     * Compute async or get already computed dashboard thumbnail from cache.
     * @param {number} pk
     * @param {string} digest A hex digest that makes this dashboard unique
     * @param {ThumbnailQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardPkThumbnailDigestGet(pk, digest, q, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardPkThumbnailDigestGet(pk, digest, q, options)(this.fetch, this.basePath);
    }
    /**
     * Create a new Dashboard.
     * @param {DashboardRestApiPost} body Dashboard schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardPost(body, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardPost(body, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of all possible owners for a dashboard.
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    apiV1DashboardRelatedColumnNameGet(columnName, q, options) {
        return (0, exports.DashboardsApiFp)(this.configuration).apiV1DashboardRelatedColumnNameGet(columnName, q, options)(this.fetch, this.basePath);
    }
}
exports.DashboardsApi = DashboardsApi;
/**
 * DatabaseApi - fetch parameter creator
 * @export
 */
const DatabaseApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get names of databases currently available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseAvailableGet(options = {}) {
            const localVarPath = `/api/v1/database/available/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Download database(s) and associated dataset(s) as a zip file
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseExportGet(q, options = {}) {
            const localVarPath = `/api/v1/database/export/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of models
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseGet(q, options = {}) {
            const localVarPath = `/api/v1/database/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options = {}) {
            // verify required parameter 'formData' is not null or undefined
            if (formData === null || formData === undefined) {
                throw new RequiredError('formData', 'Required parameter formData was null or undefined when calling apiV1DatabaseImportPost.');
            }
            // verify required parameter 'overwrite' is not null or undefined
            if (overwrite === null || overwrite === undefined) {
                throw new RequiredError('overwrite', 'Required parameter overwrite was null or undefined when calling apiV1DatabaseImportPost.');
            }
            // verify required parameter 'passwords' is not null or undefined
            if (passwords === null || passwords === undefined) {
                throw new RequiredError('passwords', 'Required parameter passwords was null or undefined when calling apiV1DatabaseImportPost.');
            }
            // verify required parameter 'sshTunnelPasswords' is not null or undefined
            if (sshTunnelPasswords === null || sshTunnelPasswords === undefined) {
                throw new RequiredError('sshTunnelPasswords', 'Required parameter sshTunnelPasswords was null or undefined when calling apiV1DatabaseImportPost.');
            }
            // verify required parameter 'sshTunnelPrivateKeyPasswords' is not null or undefined
            if (sshTunnelPrivateKeyPasswords === null || sshTunnelPrivateKeyPasswords === undefined) {
                throw new RequiredError('sshTunnelPrivateKeyPasswords', 'Required parameter sshTunnelPrivateKeyPasswords was null or undefined when calling apiV1DatabaseImportPost.');
            }
            // verify required parameter 'sshTunnelPrivateKeys' is not null or undefined
            if (sshTunnelPrivateKeys === null || sshTunnelPrivateKeys === undefined) {
                throw new RequiredError('sshTunnelPrivateKeys', 'Required parameter sshTunnelPrivateKeys was null or undefined when calling apiV1DatabaseImportPost.');
            }
            const localVarPath = `/api/v1/database/import/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            // authentication jwt required
            if (formData !== undefined) {
                localVarFormParams.set('formData', formData);
            }
            if (overwrite !== undefined) {
                localVarFormParams.set('overwrite', overwrite);
            }
            if (passwords !== undefined) {
                localVarFormParams.set('passwords', passwords);
            }
            if (sshTunnelPasswords !== undefined) {
                localVarFormParams.set('ssh_tunnel_passwords', sshTunnelPasswords);
            }
            if (sshTunnelPrivateKeyPasswords !== undefined) {
                localVarFormParams.set('ssh_tunnel_private_key_passwords', sshTunnelPrivateKeyPasswords);
            }
            if (sshTunnelPrivateKeys !== undefined) {
                localVarFormParams.set('ssh_tunnel_private_keys', sshTunnelPrivateKeys);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseInfoGet(q, options = {}) {
            const localVarPath = `/api/v1/database/_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a database connection info
         * @param {number} pk The database id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkConnectionGet(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkConnectionGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/connection`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Database.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkDelete(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkDelete.');
            }
            const localVarPath = `/api/v1/database/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get function names supported by a database
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkFunctionNamesGet(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkFunctionNamesGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/function_names/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a database
         * @param {number} pk The database id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkGet(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkGet.');
            }
            const localVarPath = `/api/v1/database/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes a Database.
         * @param {DatabaseRestApiPut} body Database schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkPut(body, pk, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DatabasePkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkPut.');
            }
            const localVarPath = `/api/v1/database/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("DatabaseRestApiPut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get charts and dashboards count associated to a database
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkRelatedObjectsGet(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkRelatedObjectsGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/related_objects/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary The list of the database schemas where to upload information
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSchemasAccessForFileUploadGet(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkSchemasAccessForFileUploadGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/schemas_access_for_file_upload/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all schemas from a database
         * @param {number} pk The database id
         * @param {DatabaseSchemasQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSchemasGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkSchemasGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/schemas/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get database select star for table
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSelectStarTableNameGet(pk, tableName, schemaName, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkSelectStarTableNameGet.');
            }
            // verify required parameter 'tableName' is not null or undefined
            if (tableName === null || tableName === undefined) {
                throw new RequiredError('tableName', 'Required parameter tableName was null or undefined when calling apiV1DatabasePkSelectStarTableNameGet.');
            }
            // verify required parameter 'schemaName' is not null or undefined
            if (schemaName === null || schemaName === undefined) {
                throw new RequiredError('schemaName', 'Required parameter schemaName was null or undefined when calling apiV1DatabasePkSelectStarTableNameGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/select_star/{table_name}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"table_name"}}`, encodeURIComponent(String(tableName)))
                .replace(`{${"schema_name"}}`, encodeURIComponent(String(schemaName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get database select star for table
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkSelectStarTableNameSchemaNameGet.');
            }
            // verify required parameter 'tableName' is not null or undefined
            if (tableName === null || tableName === undefined) {
                throw new RequiredError('tableName', 'Required parameter tableName was null or undefined when calling apiV1DatabasePkSelectStarTableNameSchemaNameGet.');
            }
            // verify required parameter 'schemaName' is not null or undefined
            if (schemaName === null || schemaName === undefined) {
                throw new RequiredError('schemaName', 'Required parameter schemaName was null or undefined when calling apiV1DatabasePkSelectStarTableNameSchemaNameGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/select_star/{table_name}/{schema_name}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"table_name"}}`, encodeURIComponent(String(tableName)))
                .replace(`{${"schema_name"}}`, encodeURIComponent(String(schemaName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a SSH Tunnel.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSshTunnelDelete(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkSshTunnelDelete.');
            }
            const localVarPath = `/api/v1/database/{pk}/ssh_tunnel/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Response depends on each DB engine spec normally focused on partitions
         * @summary Get table extra metadata
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk, tableName, schemaName, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkTableExtraTableNameSchemaNameGet.');
            }
            // verify required parameter 'tableName' is not null or undefined
            if (tableName === null || tableName === undefined) {
                throw new RequiredError('tableName', 'Required parameter tableName was null or undefined when calling apiV1DatabasePkTableExtraTableNameSchemaNameGet.');
            }
            // verify required parameter 'schemaName' is not null or undefined
            if (schemaName === null || schemaName === undefined) {
                throw new RequiredError('schemaName', 'Required parameter schemaName was null or undefined when calling apiV1DatabasePkTableExtraTableNameSchemaNameGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/table_extra/{table_name}/{schema_name}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"table_name"}}`, encodeURIComponent(String(tableName)))
                .replace(`{${"schema_name"}}`, encodeURIComponent(String(schemaName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get database table metadata
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkTableTableNameSchemaNameGet(pk, tableName, schemaName, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkTableTableNameSchemaNameGet.');
            }
            // verify required parameter 'tableName' is not null or undefined
            if (tableName === null || tableName === undefined) {
                throw new RequiredError('tableName', 'Required parameter tableName was null or undefined when calling apiV1DatabasePkTableTableNameSchemaNameGet.');
            }
            // verify required parameter 'schemaName' is not null or undefined
            if (schemaName === null || schemaName === undefined) {
                throw new RequiredError('schemaName', 'Required parameter schemaName was null or undefined when calling apiV1DatabasePkTableTableNameSchemaNameGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/table/{table_name}/{schema_name}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"table_name"}}`, encodeURIComponent(String(tableName)))
                .replace(`{${"schema_name"}}`, encodeURIComponent(String(schemaName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a list of tables for given database
         * @param {number} pk The database id
         * @param {DatabaseTablesQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkTablesGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkTablesGet.');
            }
            const localVarPath = `/api/v1/database/{pk}/tables/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates arbitrary SQL.
         * @summary Validates that arbitrary sql is acceptable for the given database
         * @param {ValidateSQLRequest} body Validate SQL request
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkValidateSqlPost(body, pk, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DatabasePkValidateSqlPost.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatabasePkValidateSqlPost.');
            }
            const localVarPath = `/api/v1/database/{pk}/validate_sql/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ValidateSQLRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Database.
         * @param {DatabaseRestApiPost} body Database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DatabasePost.');
            }
            const localVarPath = `/api/v1/database/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("DatabaseRestApiPost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tests a database connection
         * @param {DatabaseTestConnectionSchema} body Database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseTestConnectionPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DatabaseTestConnectionPost.');
            }
            const localVarPath = `/api/v1/database/test_connection/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("DatabaseTestConnectionSchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates parameters used to connect to a database
         * @param {DatabaseValidateParametersSchema} body DB-specific parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseValidateParametersPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DatabaseValidateParametersPost.');
            }
            const localVarPath = `/api/v1/database/validate_parameters/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("DatabaseValidateParametersSchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DatabaseApiFetchParamCreator = DatabaseApiFetchParamCreator;
/**
 * DatabaseApi - functional programming interface
 * @export
 */
const DatabaseApiFp = function (configuration) {
    return {
        /**
         * Get names of databases currently available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseAvailableGet(options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabaseAvailableGet(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Download database(s) and associated dataset(s) as a zip file
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseExportGet(q, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabaseExportGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of models
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseGet(q, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabaseGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabaseImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseInfoGet(q, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabaseInfoGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get a database connection info
         * @param {number} pk The database id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkConnectionGet(pk, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkConnectionGet(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Database.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkDelete(pk, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkDelete(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get function names supported by a database
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkFunctionNamesGet(pk, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkFunctionNamesGet(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a database
         * @param {number} pk The database id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkGet(pk, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkGet(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Changes a Database.
         * @param {DatabaseRestApiPut} body Database schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkPut(body, pk, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkPut(body, pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get charts and dashboards count associated to a database
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkRelatedObjectsGet(pk, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkRelatedObjectsGet(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary The list of the database schemas where to upload information
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSchemasAccessForFileUploadGet(pk, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkSchemasAccessForFileUploadGet(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all schemas from a database
         * @param {number} pk The database id
         * @param {DatabaseSchemasQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSchemasGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkSchemasGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get database select star for table
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSelectStarTableNameGet(pk, tableName, schemaName, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkSelectStarTableNameGet(pk, tableName, schemaName, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get database select star for table
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a SSH Tunnel.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSshTunnelDelete(pk, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkSshTunnelDelete(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Response depends on each DB engine spec normally focused on partitions
         * @summary Get table extra metadata
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk, tableName, schemaName, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk, tableName, schemaName, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get database table metadata
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkTableTableNameSchemaNameGet(pk, tableName, schemaName, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkTableTableNameSchemaNameGet(pk, tableName, schemaName, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get a list of tables for given database
         * @param {number} pk The database id
         * @param {DatabaseTablesQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkTablesGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkTablesGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Validates arbitrary SQL.
         * @summary Validates that arbitrary sql is acceptable for the given database
         * @param {ValidateSQLRequest} body Validate SQL request
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkValidateSqlPost(body, pk, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePkValidateSqlPost(body, pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new Database.
         * @param {DatabaseRestApiPost} body Database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePost(body, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabasePost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Tests a database connection
         * @param {DatabaseTestConnectionSchema} body Database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseTestConnectionPost(body, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabaseTestConnectionPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Validates parameters used to connect to a database
         * @param {DatabaseValidateParametersSchema} body DB-specific parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseValidateParametersPost(body, options) {
            const localVarFetchArgs = (0, exports.DatabaseApiFetchParamCreator)(configuration).apiV1DatabaseValidateParametersPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.DatabaseApiFp = DatabaseApiFp;
/**
 * DatabaseApi - factory interface
 * @export
 */
const DatabaseApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get names of databases currently available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseAvailableGet(options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabaseAvailableGet(options)(fetch, basePath);
        },
        /**
         * Download database(s) and associated dataset(s) as a zip file
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseExportGet(q, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabaseExportGet(q, options)(fetch, basePath);
        },
        /**
         * Get a list of models
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseGet(q, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabaseGet(q, options)(fetch, basePath);
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabaseImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options)(fetch, basePath);
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseInfoGet(q, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabaseInfoGet(q, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get a database connection info
         * @param {number} pk The database id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkConnectionGet(pk, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkConnectionGet(pk, options)(fetch, basePath);
        },
        /**
         * Deletes a Database.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkDelete(pk, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkDelete(pk, options)(fetch, basePath);
        },
        /**
         * Get function names supported by a database
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkFunctionNamesGet(pk, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkFunctionNamesGet(pk, options)(fetch, basePath);
        },
        /**
         * Get a database
         * @param {number} pk The database id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkGet(pk, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkGet(pk, options)(fetch, basePath);
        },
        /**
         * Changes a Database.
         * @param {DatabaseRestApiPut} body Database schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkPut(body, pk, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkPut(body, pk, options)(fetch, basePath);
        },
        /**
         * Get charts and dashboards count associated to a database
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkRelatedObjectsGet(pk, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkRelatedObjectsGet(pk, options)(fetch, basePath);
        },
        /**
         *
         * @summary The list of the database schemas where to upload information
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSchemasAccessForFileUploadGet(pk, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkSchemasAccessForFileUploadGet(pk, options)(fetch, basePath);
        },
        /**
         * Get all schemas from a database
         * @param {number} pk The database id
         * @param {DatabaseSchemasQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSchemasGet(pk, q, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkSchemasGet(pk, q, options)(fetch, basePath);
        },
        /**
         * Get database select star for table
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSelectStarTableNameGet(pk, tableName, schemaName, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkSelectStarTableNameGet(pk, tableName, schemaName, options)(fetch, basePath);
        },
        /**
         * Get database select star for table
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName, options)(fetch, basePath);
        },
        /**
         * Deletes a SSH Tunnel.
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkSshTunnelDelete(pk, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkSshTunnelDelete(pk, options)(fetch, basePath);
        },
        /**
         * Response depends on each DB engine spec normally focused on partitions
         * @summary Get table extra metadata
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk, tableName, schemaName, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk, tableName, schemaName, options)(fetch, basePath);
        },
        /**
         * Get database table metadata
         * @param {number} pk The database id
         * @param {string} tableName Table name
         * @param {string} schemaName Table schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkTableTableNameSchemaNameGet(pk, tableName, schemaName, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkTableTableNameSchemaNameGet(pk, tableName, schemaName, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get a list of tables for given database
         * @param {number} pk The database id
         * @param {DatabaseTablesQuerySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkTablesGet(pk, q, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkTablesGet(pk, q, options)(fetch, basePath);
        },
        /**
         * Validates arbitrary SQL.
         * @summary Validates that arbitrary sql is acceptable for the given database
         * @param {ValidateSQLRequest} body Validate SQL request
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePkValidateSqlPost(body, pk, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePkValidateSqlPost(body, pk, options)(fetch, basePath);
        },
        /**
         * Create a new Database.
         * @param {DatabaseRestApiPost} body Database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabasePost(body, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabasePost(body, options)(fetch, basePath);
        },
        /**
         * Tests a database connection
         * @param {DatabaseTestConnectionSchema} body Database schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseTestConnectionPost(body, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabaseTestConnectionPost(body, options)(fetch, basePath);
        },
        /**
         * Validates parameters used to connect to a database
         * @param {DatabaseValidateParametersSchema} body DB-specific parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatabaseValidateParametersPost(body, options) {
            return (0, exports.DatabaseApiFp)(configuration).apiV1DatabaseValidateParametersPost(body, options)(fetch, basePath);
        },
    };
};
exports.DatabaseApiFactory = DatabaseApiFactory;
/**
 * DatabaseApi - object-oriented interface
 * @export
 * @class DatabaseApi
 * @extends {BaseAPI}
 */
class DatabaseApi extends BaseAPI {
    /**
     * Get names of databases currently available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseAvailableGet(options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabaseAvailableGet(options)(this.fetch, this.basePath);
    }
    /**
     * Download database(s) and associated dataset(s) as a zip file
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseExportGet(q, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabaseExportGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of models
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseGet(q, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabaseGet(q, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {string} sshTunnelPasswords
     * @param {string} sshTunnelPrivateKeyPasswords
     * @param {string} sshTunnelPrivateKeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabaseImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options)(this.fetch, this.basePath);
    }
    /**
     * Get metadata information about this API resource
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseInfoGet(q, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabaseInfoGet(q, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Get a database connection info
     * @param {number} pk The database id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkConnectionGet(pk, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkConnectionGet(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes a Database.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkDelete(pk, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkDelete(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get function names supported by a database
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkFunctionNamesGet(pk, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkFunctionNamesGet(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get a database
     * @param {number} pk The database id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkGet(pk, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkGet(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Changes a Database.
     * @param {DatabaseRestApiPut} body Database schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkPut(body, pk, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkPut(body, pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get charts and dashboards count associated to a database
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkRelatedObjectsGet(pk, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkRelatedObjectsGet(pk, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary The list of the database schemas where to upload information
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkSchemasAccessForFileUploadGet(pk, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkSchemasAccessForFileUploadGet(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get all schemas from a database
     * @param {number} pk The database id
     * @param {DatabaseSchemasQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkSchemasGet(pk, q, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkSchemasGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     * Get database select star for table
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkSelectStarTableNameGet(pk, tableName, schemaName, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkSelectStarTableNameGet(pk, tableName, schemaName, options)(this.fetch, this.basePath);
    }
    /**
     * Get database select star for table
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkSelectStarTableNameSchemaNameGet(pk, tableName, schemaName, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes a SSH Tunnel.
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkSshTunnelDelete(pk, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkSshTunnelDelete(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Response depends on each DB engine spec normally focused on partitions
     * @summary Get table extra metadata
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk, tableName, schemaName, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkTableExtraTableNameSchemaNameGet(pk, tableName, schemaName, options)(this.fetch, this.basePath);
    }
    /**
     * Get database table metadata
     * @param {number} pk The database id
     * @param {string} tableName Table name
     * @param {string} schemaName Table schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkTableTableNameSchemaNameGet(pk, tableName, schemaName, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkTableTableNameSchemaNameGet(pk, tableName, schemaName, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Get a list of tables for given database
     * @param {number} pk The database id
     * @param {DatabaseTablesQuerySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkTablesGet(pk, q, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkTablesGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     * Validates arbitrary SQL.
     * @summary Validates that arbitrary sql is acceptable for the given database
     * @param {ValidateSQLRequest} body Validate SQL request
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePkValidateSqlPost(body, pk, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePkValidateSqlPost(body, pk, options)(this.fetch, this.basePath);
    }
    /**
     * Create a new Database.
     * @param {DatabaseRestApiPost} body Database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabasePost(body, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabasePost(body, options)(this.fetch, this.basePath);
    }
    /**
     * Tests a database connection
     * @param {DatabaseTestConnectionSchema} body Database schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseTestConnectionPost(body, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabaseTestConnectionPost(body, options)(this.fetch, this.basePath);
    }
    /**
     * Validates parameters used to connect to a database
     * @param {DatabaseValidateParametersSchema} body DB-specific parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    apiV1DatabaseValidateParametersPost(body, options) {
        return (0, exports.DatabaseApiFp)(this.configuration).apiV1DatabaseValidateParametersPost(body, options)(this.fetch, this.basePath);
    }
}
exports.DatabaseApi = DatabaseApi;
/**
 * DatasetsApi - fetch parameter creator
 * @export
 */
const DatasetsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Deletes multiple Datasets in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetDelete(q, options = {}) {
            const localVarPath = `/api/v1/dataset/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetDistinctColumnNameGet(columnName, q, options = {}) {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1DatasetDistinctColumnNameGet.');
            }
            const localVarPath = `/api/v1/dataset/distinct/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Duplicates a Dataset
         * @param {DatasetDuplicateSchema} body Dataset schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetDuplicatePost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DatasetDuplicatePost.');
            }
            const localVarPath = `/api/v1/dataset/duplicate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("DatasetDuplicateSchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exports multiple datasets and downloads them as YAML files
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetExportGet(q, options = {}) {
            const localVarPath = `/api/v1/dataset/export/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of models
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetGet(q, options = {}) {
            const localVarPath = `/api/v1/dataset/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieve a table by name, or create it if it does not exist
         * @param {GetOrCreateDatasetSchema} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetGetOrCreatePost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DatasetGetOrCreatePost.');
            }
            const localVarPath = `/api/v1/dataset/get_or_create/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GetOrCreateDatasetSchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {boolean} syncColumns
         * @param {boolean} syncMetrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, syncColumns, syncMetrics, options = {}) {
            // verify required parameter 'formData' is not null or undefined
            if (formData === null || formData === undefined) {
                throw new RequiredError('formData', 'Required parameter formData was null or undefined when calling apiV1DatasetImportPost.');
            }
            // verify required parameter 'overwrite' is not null or undefined
            if (overwrite === null || overwrite === undefined) {
                throw new RequiredError('overwrite', 'Required parameter overwrite was null or undefined when calling apiV1DatasetImportPost.');
            }
            // verify required parameter 'passwords' is not null or undefined
            if (passwords === null || passwords === undefined) {
                throw new RequiredError('passwords', 'Required parameter passwords was null or undefined when calling apiV1DatasetImportPost.');
            }
            // verify required parameter 'sshTunnelPasswords' is not null or undefined
            if (sshTunnelPasswords === null || sshTunnelPasswords === undefined) {
                throw new RequiredError('sshTunnelPasswords', 'Required parameter sshTunnelPasswords was null or undefined when calling apiV1DatasetImportPost.');
            }
            // verify required parameter 'sshTunnelPrivateKeyPasswords' is not null or undefined
            if (sshTunnelPrivateKeyPasswords === null || sshTunnelPrivateKeyPasswords === undefined) {
                throw new RequiredError('sshTunnelPrivateKeyPasswords', 'Required parameter sshTunnelPrivateKeyPasswords was null or undefined when calling apiV1DatasetImportPost.');
            }
            // verify required parameter 'sshTunnelPrivateKeys' is not null or undefined
            if (sshTunnelPrivateKeys === null || sshTunnelPrivateKeys === undefined) {
                throw new RequiredError('sshTunnelPrivateKeys', 'Required parameter sshTunnelPrivateKeys was null or undefined when calling apiV1DatasetImportPost.');
            }
            // verify required parameter 'syncColumns' is not null or undefined
            if (syncColumns === null || syncColumns === undefined) {
                throw new RequiredError('syncColumns', 'Required parameter syncColumns was null or undefined when calling apiV1DatasetImportPost.');
            }
            // verify required parameter 'syncMetrics' is not null or undefined
            if (syncMetrics === null || syncMetrics === undefined) {
                throw new RequiredError('syncMetrics', 'Required parameter syncMetrics was null or undefined when calling apiV1DatasetImportPost.');
            }
            const localVarPath = `/api/v1/dataset/import/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            // authentication jwt required
            if (formData !== undefined) {
                localVarFormParams.set('formData', formData);
            }
            if (overwrite !== undefined) {
                localVarFormParams.set('overwrite', overwrite);
            }
            if (passwords !== undefined) {
                localVarFormParams.set('passwords', passwords);
            }
            if (sshTunnelPasswords !== undefined) {
                localVarFormParams.set('ssh_tunnel_passwords', sshTunnelPasswords);
            }
            if (sshTunnelPrivateKeyPasswords !== undefined) {
                localVarFormParams.set('ssh_tunnel_private_key_passwords', sshTunnelPrivateKeyPasswords);
            }
            if (sshTunnelPrivateKeys !== undefined) {
                localVarFormParams.set('ssh_tunnel_private_keys', sshTunnelPrivateKeys);
            }
            if (syncColumns !== undefined) {
                localVarFormParams.set('sync_columns', syncColumns);
            }
            if (syncMetrics !== undefined) {
                localVarFormParams.set('sync_metrics', syncMetrics);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetInfoGet(q, options = {}) {
            const localVarPath = `/api/v1/dataset/_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Dataset column
         * @param {number} pk The dataset pk for this column
         * @param {number} columnId The column id for this dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkColumnColumnIdDelete(pk, columnId, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatasetPkColumnColumnIdDelete.');
            }
            // verify required parameter 'columnId' is not null or undefined
            if (columnId === null || columnId === undefined) {
                throw new RequiredError('columnId', 'Required parameter columnId was null or undefined when calling apiV1DatasetPkColumnColumnIdDelete.');
            }
            const localVarPath = `/api/v1/dataset/{pk}/column/{column_id}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"column_id"}}`, encodeURIComponent(String(columnId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Dataset
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkDelete(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatasetPkDelete.');
            }
            const localVarPath = `/api/v1/dataset/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an item model
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatasetPkGet.');
            }
            const localVarPath = `/api/v1/dataset/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Dataset metric
         * @param {number} pk The dataset pk for this column
         * @param {number} metricId The metric id for this dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkMetricMetricIdDelete(pk, metricId, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatasetPkMetricMetricIdDelete.');
            }
            // verify required parameter 'metricId' is not null or undefined
            if (metricId === null || metricId === undefined) {
                throw new RequiredError('metricId', 'Required parameter metricId was null or undefined when calling apiV1DatasetPkMetricMetricIdDelete.');
            }
            const localVarPath = `/api/v1/dataset/{pk}/metric/{metric_id}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"metric_id"}}`, encodeURIComponent(String(metricId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes a Dataset
         * @param {DatasetRestApiPut} body Dataset schema
         * @param {number} pk
         * @param {boolean} [overrideColumns]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkPut(body, pk, overrideColumns, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DatasetPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatasetPkPut.');
            }
            const localVarPath = `/api/v1/dataset/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (overrideColumns !== undefined) {
                localVarQueryParameter['override_columns'] = overrideColumns;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("DatasetRestApiPut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refreshes and updates columns of a dataset
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkRefreshPut(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatasetPkRefreshPut.');
            }
            const localVarPath = `/api/v1/dataset/{pk}/refresh`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get charts and dashboards count associated to a dataset
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkRelatedObjectsGet(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DatasetPkRelatedObjectsGet.');
            }
            const localVarPath = `/api/v1/dataset/{pk}/related_objects`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Dataset
         * @param {DatasetRestApiPost} body Dataset schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DatasetPost.');
            }
            const localVarPath = `/api/v1/dataset/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("DatasetRestApiPost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetRelatedColumnNameGet(columnName, q, options = {}) {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1DatasetRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/dataset/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DatasetsApiFetchParamCreator = DatasetsApiFetchParamCreator;
/**
 * DatasetsApi - functional programming interface
 * @export
 */
const DatasetsApiFp = function (configuration) {
    return {
        /**
         * Deletes multiple Datasets in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetDelete(q, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetDelete(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetDistinctColumnNameGet(columnName, q, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetDistinctColumnNameGet(columnName, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Duplicates a Dataset
         * @param {DatasetDuplicateSchema} body Dataset schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetDuplicatePost(body, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetDuplicatePost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Exports multiple datasets and downloads them as YAML files
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetExportGet(q, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetExportGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of models
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetGet(q, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Retrieve a table by name, or create it if it does not exist
         * @param {GetOrCreateDatasetSchema} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetGetOrCreatePost(body, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetGetOrCreatePost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {boolean} syncColumns
         * @param {boolean} syncMetrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, syncColumns, syncMetrics, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, syncColumns, syncMetrics, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetInfoGet(q, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetInfoGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a Dataset column
         * @param {number} pk The dataset pk for this column
         * @param {number} columnId The column id for this dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkColumnColumnIdDelete(pk, columnId, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetPkColumnColumnIdDelete(pk, columnId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Dataset
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkDelete(pk, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetPkDelete(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get an item model
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetPkGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a Dataset metric
         * @param {number} pk The dataset pk for this column
         * @param {number} metricId The metric id for this dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkMetricMetricIdDelete(pk, metricId, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetPkMetricMetricIdDelete(pk, metricId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Changes a Dataset
         * @param {DatasetRestApiPut} body Dataset schema
         * @param {number} pk
         * @param {boolean} [overrideColumns]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkPut(body, pk, overrideColumns, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetPkPut(body, pk, overrideColumns, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Refreshes and updates columns of a dataset
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkRefreshPut(pk, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetPkRefreshPut(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get charts and dashboards count associated to a dataset
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkRelatedObjectsGet(pk, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetPkRelatedObjectsGet(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new Dataset
         * @param {DatasetRestApiPost} body Dataset schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPost(body, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetRelatedColumnNameGet(columnName, q, options) {
            const localVarFetchArgs = (0, exports.DatasetsApiFetchParamCreator)(configuration).apiV1DatasetRelatedColumnNameGet(columnName, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.DatasetsApiFp = DatasetsApiFp;
/**
 * DatasetsApi - factory interface
 * @export
 */
const DatasetsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Deletes multiple Datasets in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetDelete(q, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetDelete(q, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetDistinctColumnNameGet(columnName, q, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetDistinctColumnNameGet(columnName, q, options)(fetch, basePath);
        },
        /**
         * Duplicates a Dataset
         * @param {DatasetDuplicateSchema} body Dataset schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetDuplicatePost(body, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetDuplicatePost(body, options)(fetch, basePath);
        },
        /**
         * Exports multiple datasets and downloads them as YAML files
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetExportGet(q, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetExportGet(q, options)(fetch, basePath);
        },
        /**
         * Get a list of models
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetGet(q, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetGet(q, options)(fetch, basePath);
        },
        /**
         *
         * @summary Retrieve a table by name, or create it if it does not exist
         * @param {GetOrCreateDatasetSchema} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetGetOrCreatePost(body, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetGetOrCreatePost(body, options)(fetch, basePath);
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {boolean} syncColumns
         * @param {boolean} syncMetrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, syncColumns, syncMetrics, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, syncColumns, syncMetrics, options)(fetch, basePath);
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetInfoGet(q, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetInfoGet(q, options)(fetch, basePath);
        },
        /**
         * Delete a Dataset column
         * @param {number} pk The dataset pk for this column
         * @param {number} columnId The column id for this dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkColumnColumnIdDelete(pk, columnId, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetPkColumnColumnIdDelete(pk, columnId, options)(fetch, basePath);
        },
        /**
         * Deletes a Dataset
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkDelete(pk, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetPkDelete(pk, options)(fetch, basePath);
        },
        /**
         * Get an item model
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkGet(pk, q, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetPkGet(pk, q, options)(fetch, basePath);
        },
        /**
         * Delete a Dataset metric
         * @param {number} pk The dataset pk for this column
         * @param {number} metricId The metric id for this dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkMetricMetricIdDelete(pk, metricId, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetPkMetricMetricIdDelete(pk, metricId, options)(fetch, basePath);
        },
        /**
         * Changes a Dataset
         * @param {DatasetRestApiPut} body Dataset schema
         * @param {number} pk
         * @param {boolean} [overrideColumns]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkPut(body, pk, overrideColumns, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetPkPut(body, pk, overrideColumns, options)(fetch, basePath);
        },
        /**
         * Refreshes and updates columns of a dataset
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkRefreshPut(pk, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetPkRefreshPut(pk, options)(fetch, basePath);
        },
        /**
         * Get charts and dashboards count associated to a dataset
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPkRelatedObjectsGet(pk, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetPkRelatedObjectsGet(pk, options)(fetch, basePath);
        },
        /**
         * Create a new Dataset
         * @param {DatasetRestApiPost} body Dataset schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetPost(body, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetPost(body, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasetRelatedColumnNameGet(columnName, q, options) {
            return (0, exports.DatasetsApiFp)(configuration).apiV1DatasetRelatedColumnNameGet(columnName, q, options)(fetch, basePath);
        },
    };
};
exports.DatasetsApiFactory = DatasetsApiFactory;
/**
 * DatasetsApi - object-oriented interface
 * @export
 * @class DatasetsApi
 * @extends {BaseAPI}
 */
class DatasetsApi extends BaseAPI {
    /**
     * Deletes multiple Datasets in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetDelete(q, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetDelete(q, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetDistinctColumnNameGet(columnName, q, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetDistinctColumnNameGet(columnName, q, options)(this.fetch, this.basePath);
    }
    /**
     * Duplicates a Dataset
     * @param {DatasetDuplicateSchema} body Dataset schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetDuplicatePost(body, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetDuplicatePost(body, options)(this.fetch, this.basePath);
    }
    /**
     * Exports multiple datasets and downloads them as YAML files
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetExportGet(q, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetExportGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of models
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetGet(q, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetGet(q, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Retrieve a table by name, or create it if it does not exist
     * @param {GetOrCreateDatasetSchema} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetGetOrCreatePost(body, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetGetOrCreatePost(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {string} sshTunnelPasswords
     * @param {string} sshTunnelPrivateKeyPasswords
     * @param {string} sshTunnelPrivateKeys
     * @param {boolean} syncColumns
     * @param {boolean} syncMetrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, syncColumns, syncMetrics, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, syncColumns, syncMetrics, options)(this.fetch, this.basePath);
    }
    /**
     * Get metadata information about this API resource
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetInfoGet(q, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetInfoGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Delete a Dataset column
     * @param {number} pk The dataset pk for this column
     * @param {number} columnId The column id for this dataset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetPkColumnColumnIdDelete(pk, columnId, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetPkColumnColumnIdDelete(pk, columnId, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes a Dataset
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetPkDelete(pk, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetPkDelete(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get an item model
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetPkGet(pk, q, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetPkGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     * Delete a Dataset metric
     * @param {number} pk The dataset pk for this column
     * @param {number} metricId The metric id for this dataset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetPkMetricMetricIdDelete(pk, metricId, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetPkMetricMetricIdDelete(pk, metricId, options)(this.fetch, this.basePath);
    }
    /**
     * Changes a Dataset
     * @param {DatasetRestApiPut} body Dataset schema
     * @param {number} pk
     * @param {boolean} [overrideColumns]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetPkPut(body, pk, overrideColumns, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetPkPut(body, pk, overrideColumns, options)(this.fetch, this.basePath);
    }
    /**
     * Refreshes and updates columns of a dataset
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetPkRefreshPut(pk, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetPkRefreshPut(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get charts and dashboards count associated to a dataset
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetPkRelatedObjectsGet(pk, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetPkRelatedObjectsGet(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Create a new Dataset
     * @param {DatasetRestApiPost} body Dataset schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetPost(body, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetPost(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    apiV1DatasetRelatedColumnNameGet(columnName, q, options) {
        return (0, exports.DatasetsApiFp)(this.configuration).apiV1DatasetRelatedColumnNameGet(columnName, q, options)(this.fetch, this.basePath);
    }
}
exports.DatasetsApi = DatasetsApi;
/**
 * DatasourcesApi - fetch parameter creator
 * @export
 */
const DatasourcesApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get possible values for a datasource column
         * @param {string} datasourceType The type of datasource
         * @param {number} datasourceId The id of the datasource
         * @param {string} columnName The name of the column to get values for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasourceDatasourceTypeDatasourceIdColumnColumnNameValuesGet(datasourceType, datasourceId, columnName, options = {}) {
            // verify required parameter 'datasourceType' is not null or undefined
            if (datasourceType === null || datasourceType === undefined) {
                throw new RequiredError('datasourceType', 'Required parameter datasourceType was null or undefined when calling apiV1DatasourceDatasourceTypeDatasourceIdColumnColumnNameValuesGet.');
            }
            // verify required parameter 'datasourceId' is not null or undefined
            if (datasourceId === null || datasourceId === undefined) {
                throw new RequiredError('datasourceId', 'Required parameter datasourceId was null or undefined when calling apiV1DatasourceDatasourceTypeDatasourceIdColumnColumnNameValuesGet.');
            }
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1DatasourceDatasourceTypeDatasourceIdColumnColumnNameValuesGet.');
            }
            const localVarPath = `/api/v1/datasource/{datasource_type}/{datasource_id}/column/{column_name}/values/`
                .replace(`{${"datasource_type"}}`, encodeURIComponent(String(datasourceType)))
                .replace(`{${"datasource_id"}}`, encodeURIComponent(String(datasourceId)))
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DatasourcesApiFetchParamCreator = DatasourcesApiFetchParamCreator;
/**
 * DatasourcesApi - functional programming interface
 * @export
 */
const DatasourcesApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get possible values for a datasource column
         * @param {string} datasourceType The type of datasource
         * @param {number} datasourceId The id of the datasource
         * @param {string} columnName The name of the column to get values for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasourceDatasourceTypeDatasourceIdColumnColumnNameValuesGet(datasourceType, datasourceId, columnName, options) {
            const localVarFetchArgs = (0, exports.DatasourcesApiFetchParamCreator)(configuration).apiV1DatasourceDatasourceTypeDatasourceIdColumnColumnNameValuesGet(datasourceType, datasourceId, columnName, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.DatasourcesApiFp = DatasourcesApiFp;
/**
 * DatasourcesApi - factory interface
 * @export
 */
const DatasourcesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Get possible values for a datasource column
         * @param {string} datasourceType The type of datasource
         * @param {number} datasourceId The id of the datasource
         * @param {string} columnName The name of the column to get values for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DatasourceDatasourceTypeDatasourceIdColumnColumnNameValuesGet(datasourceType, datasourceId, columnName, options) {
            return (0, exports.DatasourcesApiFp)(configuration).apiV1DatasourceDatasourceTypeDatasourceIdColumnColumnNameValuesGet(datasourceType, datasourceId, columnName, options)(fetch, basePath);
        },
    };
};
exports.DatasourcesApiFactory = DatasourcesApiFactory;
/**
 * DatasourcesApi - object-oriented interface
 * @export
 * @class DatasourcesApi
 * @extends {BaseAPI}
 */
class DatasourcesApi extends BaseAPI {
    /**
     *
     * @summary Get possible values for a datasource column
     * @param {string} datasourceType The type of datasource
     * @param {number} datasourceId The id of the datasource
     * @param {string} columnName The name of the column to get values for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasourcesApi
     */
    apiV1DatasourceDatasourceTypeDatasourceIdColumnColumnNameValuesGet(datasourceType, datasourceId, columnName, options) {
        return (0, exports.DatasourcesApiFp)(this.configuration).apiV1DatasourceDatasourceTypeDatasourceIdColumnColumnNameValuesGet(datasourceType, datasourceId, columnName, options)(this.fetch, this.basePath);
    }
}
exports.DatasourcesApi = DatasourcesApi;
/**
 * EmbeddedDashboardApi - fetch parameter creator
 * @export
 */
const EmbeddedDashboardApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get a report schedule log
         * @param {string} uuid The embedded configuration uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EmbeddedDashboardUuidGet(uuid, options = {}) {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid', 'Required parameter uuid was null or undefined when calling apiV1EmbeddedDashboardUuidGet.');
            }
            const localVarPath = `/api/v1/embedded_dashboard/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.EmbeddedDashboardApiFetchParamCreator = EmbeddedDashboardApiFetchParamCreator;
/**
 * EmbeddedDashboardApi - functional programming interface
 * @export
 */
const EmbeddedDashboardApiFp = function (configuration) {
    return {
        /**
         * Get a report schedule log
         * @param {string} uuid The embedded configuration uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EmbeddedDashboardUuidGet(uuid, options) {
            const localVarFetchArgs = (0, exports.EmbeddedDashboardApiFetchParamCreator)(configuration).apiV1EmbeddedDashboardUuidGet(uuid, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.EmbeddedDashboardApiFp = EmbeddedDashboardApiFp;
/**
 * EmbeddedDashboardApi - factory interface
 * @export
 */
const EmbeddedDashboardApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get a report schedule log
         * @param {string} uuid The embedded configuration uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EmbeddedDashboardUuidGet(uuid, options) {
            return (0, exports.EmbeddedDashboardApiFp)(configuration).apiV1EmbeddedDashboardUuidGet(uuid, options)(fetch, basePath);
        },
    };
};
exports.EmbeddedDashboardApiFactory = EmbeddedDashboardApiFactory;
/**
 * EmbeddedDashboardApi - object-oriented interface
 * @export
 * @class EmbeddedDashboardApi
 * @extends {BaseAPI}
 */
class EmbeddedDashboardApi extends BaseAPI {
    /**
     * Get a report schedule log
     * @param {string} uuid The embedded configuration uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedDashboardApi
     */
    apiV1EmbeddedDashboardUuidGet(uuid, options) {
        return (0, exports.EmbeddedDashboardApiFp)(this.configuration).apiV1EmbeddedDashboardUuidGet(uuid, options)(this.fetch, this.basePath);
    }
}
exports.EmbeddedDashboardApi = EmbeddedDashboardApi;
/**
 * ExploreApi - fetch parameter creator
 * @export
 */
const ExploreApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.<br/><br/>\\nThe information can be assembled from:<br/> - The cache using a form_data_key<br/> - The metadata database using a permalink_key<br/> - Build from scratch using dataset or slice identifiers.
         * @summary Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.
         * @param {string} [formDataKey]
         * @param {string} [permalinkKey]
         * @param {number} [sliceId]
         * @param {number} [datasourceId]
         * @param {string} [datasourceType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreGet(formDataKey, permalinkKey, sliceId, datasourceId, datasourceType, options = {}) {
            const localVarPath = `/api/v1/explore/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (formDataKey !== undefined) {
                localVarQueryParameter['form_data_key'] = formDataKey;
            }
            if (permalinkKey !== undefined) {
                localVarQueryParameter['permalink_key'] = permalinkKey;
            }
            if (sliceId !== undefined) {
                localVarQueryParameter['slice_id'] = sliceId;
            }
            if (datasourceId !== undefined) {
                localVarQueryParameter['datasource_id'] = datasourceId;
            }
            if (datasourceType !== undefined) {
                localVarQueryParameter['datasource_type'] = datasourceType;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ExploreApiFetchParamCreator = ExploreApiFetchParamCreator;
/**
 * ExploreApi - functional programming interface
 * @export
 */
const ExploreApiFp = function (configuration) {
    return {
        /**
         * Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.<br/><br/>\\nThe information can be assembled from:<br/> - The cache using a form_data_key<br/> - The metadata database using a permalink_key<br/> - Build from scratch using dataset or slice identifiers.
         * @summary Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.
         * @param {string} [formDataKey]
         * @param {string} [permalinkKey]
         * @param {number} [sliceId]
         * @param {number} [datasourceId]
         * @param {string} [datasourceType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreGet(formDataKey, permalinkKey, sliceId, datasourceId, datasourceType, options) {
            const localVarFetchArgs = (0, exports.ExploreApiFetchParamCreator)(configuration).apiV1ExploreGet(formDataKey, permalinkKey, sliceId, datasourceId, datasourceType, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.ExploreApiFp = ExploreApiFp;
/**
 * ExploreApi - factory interface
 * @export
 */
const ExploreApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.<br/><br/>\\nThe information can be assembled from:<br/> - The cache using a form_data_key<br/> - The metadata database using a permalink_key<br/> - Build from scratch using dataset or slice identifiers.
         * @summary Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.
         * @param {string} [formDataKey]
         * @param {string} [permalinkKey]
         * @param {number} [sliceId]
         * @param {number} [datasourceId]
         * @param {string} [datasourceType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreGet(formDataKey, permalinkKey, sliceId, datasourceId, datasourceType, options) {
            return (0, exports.ExploreApiFp)(configuration).apiV1ExploreGet(formDataKey, permalinkKey, sliceId, datasourceId, datasourceType, options)(fetch, basePath);
        },
    };
};
exports.ExploreApiFactory = ExploreApiFactory;
/**
 * ExploreApi - object-oriented interface
 * @export
 * @class ExploreApi
 * @extends {BaseAPI}
 */
class ExploreApi extends BaseAPI {
    /**
     * Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.<br/><br/>\\nThe information can be assembled from:<br/> - The cache using a form_data_key<br/> - The metadata database using a permalink_key<br/> - Build from scratch using dataset or slice identifiers.
     * @summary Assembles Explore related information (form_data, slice, dataset)\\n in a single endpoint.
     * @param {string} [formDataKey]
     * @param {string} [permalinkKey]
     * @param {number} [sliceId]
     * @param {number} [datasourceId]
     * @param {string} [datasourceType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExploreApi
     */
    apiV1ExploreGet(formDataKey, permalinkKey, sliceId, datasourceId, datasourceType, options) {
        return (0, exports.ExploreApiFp)(this.configuration).apiV1ExploreGet(formDataKey, permalinkKey, sliceId, datasourceId, datasourceType, options)(this.fetch, this.basePath);
    }
}
exports.ExploreApi = ExploreApi;
/**
 * ExploreFormDataApi - fetch parameter creator
 * @export
 */
const ExploreFormDataApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Deletes a form_data.
         * @param {string} key The form_data key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreFormDataKeyDelete(key, options = {}) {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key', 'Required parameter key was null or undefined when calling apiV1ExploreFormDataKeyDelete.');
            }
            const localVarPath = `/api/v1/explore/form_data/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrives a form_data.
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreFormDataKeyGet(key, options = {}) {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key', 'Required parameter key was null or undefined when calling apiV1ExploreFormDataKeyGet.');
            }
            const localVarPath = `/api/v1/explore/form_data/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing form_data.
         * @param {FormDataPutSchema} body
         * @param {string} key
         * @param {number} [tabId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreFormDataKeyPut(body, key, tabId, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1ExploreFormDataKeyPut.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key', 'Required parameter key was null or undefined when calling apiV1ExploreFormDataKeyPut.');
            }
            const localVarPath = `/api/v1/explore/form_data/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (tabId !== undefined) {
                localVarQueryParameter['tab_id'] = tabId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("FormDataPutSchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stores a new form_data.
         * @param {FormDataPostSchema} body
         * @param {number} [tabId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreFormDataPost(body, tabId, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1ExploreFormDataPost.');
            }
            const localVarPath = `/api/v1/explore/form_data`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (tabId !== undefined) {
                localVarQueryParameter['tab_id'] = tabId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("FormDataPostSchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ExploreFormDataApiFetchParamCreator = ExploreFormDataApiFetchParamCreator;
/**
 * ExploreFormDataApi - functional programming interface
 * @export
 */
const ExploreFormDataApiFp = function (configuration) {
    return {
        /**
         * Deletes a form_data.
         * @param {string} key The form_data key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreFormDataKeyDelete(key, options) {
            const localVarFetchArgs = (0, exports.ExploreFormDataApiFetchParamCreator)(configuration).apiV1ExploreFormDataKeyDelete(key, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrives a form_data.
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreFormDataKeyGet(key, options) {
            const localVarFetchArgs = (0, exports.ExploreFormDataApiFetchParamCreator)(configuration).apiV1ExploreFormDataKeyGet(key, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an existing form_data.
         * @param {FormDataPutSchema} body
         * @param {string} key
         * @param {number} [tabId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreFormDataKeyPut(body, key, tabId, options) {
            const localVarFetchArgs = (0, exports.ExploreFormDataApiFetchParamCreator)(configuration).apiV1ExploreFormDataKeyPut(body, key, tabId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Stores a new form_data.
         * @param {FormDataPostSchema} body
         * @param {number} [tabId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreFormDataPost(body, tabId, options) {
            const localVarFetchArgs = (0, exports.ExploreFormDataApiFetchParamCreator)(configuration).apiV1ExploreFormDataPost(body, tabId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.ExploreFormDataApiFp = ExploreFormDataApiFp;
/**
 * ExploreFormDataApi - factory interface
 * @export
 */
const ExploreFormDataApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Deletes a form_data.
         * @param {string} key The form_data key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreFormDataKeyDelete(key, options) {
            return (0, exports.ExploreFormDataApiFp)(configuration).apiV1ExploreFormDataKeyDelete(key, options)(fetch, basePath);
        },
        /**
         * Retrives a form_data.
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreFormDataKeyGet(key, options) {
            return (0, exports.ExploreFormDataApiFp)(configuration).apiV1ExploreFormDataKeyGet(key, options)(fetch, basePath);
        },
        /**
         * Updates an existing form_data.
         * @param {FormDataPutSchema} body
         * @param {string} key
         * @param {number} [tabId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreFormDataKeyPut(body, key, tabId, options) {
            return (0, exports.ExploreFormDataApiFp)(configuration).apiV1ExploreFormDataKeyPut(body, key, tabId, options)(fetch, basePath);
        },
        /**
         * Stores a new form_data.
         * @param {FormDataPostSchema} body
         * @param {number} [tabId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExploreFormDataPost(body, tabId, options) {
            return (0, exports.ExploreFormDataApiFp)(configuration).apiV1ExploreFormDataPost(body, tabId, options)(fetch, basePath);
        },
    };
};
exports.ExploreFormDataApiFactory = ExploreFormDataApiFactory;
/**
 * ExploreFormDataApi - object-oriented interface
 * @export
 * @class ExploreFormDataApi
 * @extends {BaseAPI}
 */
class ExploreFormDataApi extends BaseAPI {
    /**
     * Deletes a form_data.
     * @param {string} key The form_data key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExploreFormDataApi
     */
    apiV1ExploreFormDataKeyDelete(key, options) {
        return (0, exports.ExploreFormDataApiFp)(this.configuration).apiV1ExploreFormDataKeyDelete(key, options)(this.fetch, this.basePath);
    }
    /**
     * Retrives a form_data.
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExploreFormDataApi
     */
    apiV1ExploreFormDataKeyGet(key, options) {
        return (0, exports.ExploreFormDataApiFp)(this.configuration).apiV1ExploreFormDataKeyGet(key, options)(this.fetch, this.basePath);
    }
    /**
     * Updates an existing form_data.
     * @param {FormDataPutSchema} body
     * @param {string} key
     * @param {number} [tabId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExploreFormDataApi
     */
    apiV1ExploreFormDataKeyPut(body, key, tabId, options) {
        return (0, exports.ExploreFormDataApiFp)(this.configuration).apiV1ExploreFormDataKeyPut(body, key, tabId, options)(this.fetch, this.basePath);
    }
    /**
     * Stores a new form_data.
     * @param {FormDataPostSchema} body
     * @param {number} [tabId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExploreFormDataApi
     */
    apiV1ExploreFormDataPost(body, tabId, options) {
        return (0, exports.ExploreFormDataApiFp)(this.configuration).apiV1ExploreFormDataPost(body, tabId, options)(this.fetch, this.basePath);
    }
}
exports.ExploreFormDataApi = ExploreFormDataApi;
/**
 * ExplorePermanentLinkApi - fetch parameter creator
 * @export
 */
const ExplorePermanentLinkApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Retrives chart state associated with a permanent link.
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExplorePermalinkKeyGet(key, options = {}) {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key', 'Required parameter key was null or undefined when calling apiV1ExplorePermalinkKeyGet.');
            }
            const localVarPath = `/api/v1/explore/permalink/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stores a new permanent link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExplorePermalinkPost(options = {}) {
            const localVarPath = `/api/v1/explore/permalink`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ExplorePermanentLinkApiFetchParamCreator = ExplorePermanentLinkApiFetchParamCreator;
/**
 * ExplorePermanentLinkApi - functional programming interface
 * @export
 */
const ExplorePermanentLinkApiFp = function (configuration) {
    return {
        /**
         * Retrives chart state associated with a permanent link.
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExplorePermalinkKeyGet(key, options) {
            const localVarFetchArgs = (0, exports.ExplorePermanentLinkApiFetchParamCreator)(configuration).apiV1ExplorePermalinkKeyGet(key, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Stores a new permanent link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExplorePermalinkPost(options) {
            const localVarFetchArgs = (0, exports.ExplorePermanentLinkApiFetchParamCreator)(configuration).apiV1ExplorePermalinkPost(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.ExplorePermanentLinkApiFp = ExplorePermanentLinkApiFp;
/**
 * ExplorePermanentLinkApi - factory interface
 * @export
 */
const ExplorePermanentLinkApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Retrives chart state associated with a permanent link.
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExplorePermalinkKeyGet(key, options) {
            return (0, exports.ExplorePermanentLinkApiFp)(configuration).apiV1ExplorePermalinkKeyGet(key, options)(fetch, basePath);
        },
        /**
         * Stores a new permanent link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExplorePermalinkPost(options) {
            return (0, exports.ExplorePermanentLinkApiFp)(configuration).apiV1ExplorePermalinkPost(options)(fetch, basePath);
        },
    };
};
exports.ExplorePermanentLinkApiFactory = ExplorePermanentLinkApiFactory;
/**
 * ExplorePermanentLinkApi - object-oriented interface
 * @export
 * @class ExplorePermanentLinkApi
 * @extends {BaseAPI}
 */
class ExplorePermanentLinkApi extends BaseAPI {
    /**
     * Retrives chart state associated with a permanent link.
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorePermanentLinkApi
     */
    apiV1ExplorePermalinkKeyGet(key, options) {
        return (0, exports.ExplorePermanentLinkApiFp)(this.configuration).apiV1ExplorePermalinkKeyGet(key, options)(this.fetch, this.basePath);
    }
    /**
     * Stores a new permanent link.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorePermanentLinkApi
     */
    apiV1ExplorePermalinkPost(options) {
        return (0, exports.ExplorePermanentLinkApiFp)(this.configuration).apiV1ExplorePermalinkPost(options)(this.fetch, this.basePath);
    }
}
exports.ExplorePermanentLinkApi = ExplorePermanentLinkApi;
/**
 * FilterSetRestApiApi - fetch parameter creator
 * @export
 */
const FilterSetRestApiApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get a dashboard's list of filter sets
         * @param {number} dashboardId The id of the dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsGet(dashboardId, options = {}) {
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling apiV1DashboardDashboardIdFiltersetsGet.');
            }
            const localVarPath = `/api/v1/dashboard/{dashboard_id}/filtersets`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Dashboard.
         * @param {number} dashboardId
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId, pk, options = {}) {
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPkDelete.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPkDelete.');
            }
            const localVarPath = `/api/v1/dashboard/{dashboard_id}/filtersets/{pk}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes a Dashboard's Filter set.
         * @param {FilterSetRestApiPut} body Filter set schema
         * @param {number} dashboardId
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsPkPut(body, dashboardId, pk, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPkPut.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPkPut.');
            }
            const localVarPath = `/api/v1/dashboard/{dashboard_id}/filtersets/{pk}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("FilterSetRestApiPut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Dashboard's Filter Set.
         * @param {FilterSetRestApiPost} body Filter set schema
         * @param {number} dashboardId The id of the dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsPost(body, dashboardId, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPost.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling apiV1DashboardDashboardIdFiltersetsPost.');
            }
            const localVarPath = `/api/v1/dashboard/{dashboard_id}/filtersets`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("FilterSetRestApiPost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.FilterSetRestApiApiFetchParamCreator = FilterSetRestApiApiFetchParamCreator;
/**
 * FilterSetRestApiApi - functional programming interface
 * @export
 */
const FilterSetRestApiApiFp = function (configuration) {
    return {
        /**
         * Get a dashboard's list of filter sets
         * @param {number} dashboardId The id of the dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsGet(dashboardId, options) {
            const localVarFetchArgs = (0, exports.FilterSetRestApiApiFetchParamCreator)(configuration).apiV1DashboardDashboardIdFiltersetsGet(dashboardId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Dashboard.
         * @param {number} dashboardId
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId, pk, options) {
            const localVarFetchArgs = (0, exports.FilterSetRestApiApiFetchParamCreator)(configuration).apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId, pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Changes a Dashboard's Filter set.
         * @param {FilterSetRestApiPut} body Filter set schema
         * @param {number} dashboardId
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsPkPut(body, dashboardId, pk, options) {
            const localVarFetchArgs = (0, exports.FilterSetRestApiApiFetchParamCreator)(configuration).apiV1DashboardDashboardIdFiltersetsPkPut(body, dashboardId, pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new Dashboard's Filter Set.
         * @param {FilterSetRestApiPost} body Filter set schema
         * @param {number} dashboardId The id of the dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsPost(body, dashboardId, options) {
            const localVarFetchArgs = (0, exports.FilterSetRestApiApiFetchParamCreator)(configuration).apiV1DashboardDashboardIdFiltersetsPost(body, dashboardId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.FilterSetRestApiApiFp = FilterSetRestApiApiFp;
/**
 * FilterSetRestApiApi - factory interface
 * @export
 */
const FilterSetRestApiApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get a dashboard's list of filter sets
         * @param {number} dashboardId The id of the dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsGet(dashboardId, options) {
            return (0, exports.FilterSetRestApiApiFp)(configuration).apiV1DashboardDashboardIdFiltersetsGet(dashboardId, options)(fetch, basePath);
        },
        /**
         * Deletes a Dashboard.
         * @param {number} dashboardId
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId, pk, options) {
            return (0, exports.FilterSetRestApiApiFp)(configuration).apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId, pk, options)(fetch, basePath);
        },
        /**
         * Changes a Dashboard's Filter set.
         * @param {FilterSetRestApiPut} body Filter set schema
         * @param {number} dashboardId
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsPkPut(body, dashboardId, pk, options) {
            return (0, exports.FilterSetRestApiApiFp)(configuration).apiV1DashboardDashboardIdFiltersetsPkPut(body, dashboardId, pk, options)(fetch, basePath);
        },
        /**
         * Create a new Dashboard's Filter Set.
         * @param {FilterSetRestApiPost} body Filter set schema
         * @param {number} dashboardId The id of the dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardDashboardIdFiltersetsPost(body, dashboardId, options) {
            return (0, exports.FilterSetRestApiApiFp)(configuration).apiV1DashboardDashboardIdFiltersetsPost(body, dashboardId, options)(fetch, basePath);
        },
    };
};
exports.FilterSetRestApiApiFactory = FilterSetRestApiApiFactory;
/**
 * FilterSetRestApiApi - object-oriented interface
 * @export
 * @class FilterSetRestApiApi
 * @extends {BaseAPI}
 */
class FilterSetRestApiApi extends BaseAPI {
    /**
     * Get a dashboard's list of filter sets
     * @param {number} dashboardId The id of the dashboard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilterSetRestApiApi
     */
    apiV1DashboardDashboardIdFiltersetsGet(dashboardId, options) {
        return (0, exports.FilterSetRestApiApiFp)(this.configuration).apiV1DashboardDashboardIdFiltersetsGet(dashboardId, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes a Dashboard.
     * @param {number} dashboardId
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilterSetRestApiApi
     */
    apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId, pk, options) {
        return (0, exports.FilterSetRestApiApiFp)(this.configuration).apiV1DashboardDashboardIdFiltersetsPkDelete(dashboardId, pk, options)(this.fetch, this.basePath);
    }
    /**
     * Changes a Dashboard's Filter set.
     * @param {FilterSetRestApiPut} body Filter set schema
     * @param {number} dashboardId
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilterSetRestApiApi
     */
    apiV1DashboardDashboardIdFiltersetsPkPut(body, dashboardId, pk, options) {
        return (0, exports.FilterSetRestApiApiFp)(this.configuration).apiV1DashboardDashboardIdFiltersetsPkPut(body, dashboardId, pk, options)(this.fetch, this.basePath);
    }
    /**
     * Create a new Dashboard's Filter Set.
     * @param {FilterSetRestApiPost} body Filter set schema
     * @param {number} dashboardId The id of the dashboard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilterSetRestApiApi
     */
    apiV1DashboardDashboardIdFiltersetsPost(body, dashboardId, options) {
        return (0, exports.FilterSetRestApiApiFp)(this.configuration).apiV1DashboardDashboardIdFiltersetsPost(body, dashboardId, options)(this.fetch, this.basePath);
    }
}
exports.FilterSetRestApiApi = FilterSetRestApiApi;
/**
 * ImportexportApi - fetch parameter creator
 * @export
 */
const ImportexportApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns a ZIP file with all the Superset assets (databases, datasets, charts, dashboards, saved queries) as YAML files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetsExportGet(options = {}) {
            const localVarPath = `/api/v1/assets/export/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {Blob} bundle
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetsImportPost(bundle, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options = {}) {
            // verify required parameter 'bundle' is not null or undefined
            if (bundle === null || bundle === undefined) {
                throw new RequiredError('bundle', 'Required parameter bundle was null or undefined when calling apiV1AssetsImportPost.');
            }
            // verify required parameter 'passwords' is not null or undefined
            if (passwords === null || passwords === undefined) {
                throw new RequiredError('passwords', 'Required parameter passwords was null or undefined when calling apiV1AssetsImportPost.');
            }
            // verify required parameter 'sshTunnelPasswords' is not null or undefined
            if (sshTunnelPasswords === null || sshTunnelPasswords === undefined) {
                throw new RequiredError('sshTunnelPasswords', 'Required parameter sshTunnelPasswords was null or undefined when calling apiV1AssetsImportPost.');
            }
            // verify required parameter 'sshTunnelPrivateKeyPasswords' is not null or undefined
            if (sshTunnelPrivateKeyPasswords === null || sshTunnelPrivateKeyPasswords === undefined) {
                throw new RequiredError('sshTunnelPrivateKeyPasswords', 'Required parameter sshTunnelPrivateKeyPasswords was null or undefined when calling apiV1AssetsImportPost.');
            }
            // verify required parameter 'sshTunnelPrivateKeys' is not null or undefined
            if (sshTunnelPrivateKeys === null || sshTunnelPrivateKeys === undefined) {
                throw new RequiredError('sshTunnelPrivateKeys', 'Required parameter sshTunnelPrivateKeys was null or undefined when calling apiV1AssetsImportPost.');
            }
            const localVarPath = `/api/v1/assets/import/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            // authentication jwt required
            if (bundle !== undefined) {
                localVarFormParams.set('bundle', bundle);
            }
            if (passwords !== undefined) {
                localVarFormParams.set('passwords', passwords);
            }
            if (sshTunnelPasswords !== undefined) {
                localVarFormParams.set('ssh_tunnel_passwords', sshTunnelPasswords);
            }
            if (sshTunnelPrivateKeyPasswords !== undefined) {
                localVarFormParams.set('ssh_tunnel_private_key_passwords', sshTunnelPrivateKeyPasswords);
            }
            if (sshTunnelPrivateKeys !== undefined) {
                localVarFormParams.set('ssh_tunnel_private_keys', sshTunnelPrivateKeys);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ImportexportApiFetchParamCreator = ImportexportApiFetchParamCreator;
/**
 * ImportexportApi - functional programming interface
 * @export
 */
const ImportexportApiFp = function (configuration) {
    return {
        /**
         * Returns a ZIP file with all the Superset assets (databases, datasets, charts, dashboards, saved queries) as YAML files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetsExportGet(options) {
            const localVarFetchArgs = (0, exports.ImportexportApiFetchParamCreator)(configuration).apiV1AssetsExportGet(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {Blob} bundle
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetsImportPost(bundle, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
            const localVarFetchArgs = (0, exports.ImportexportApiFetchParamCreator)(configuration).apiV1AssetsImportPost(bundle, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.ImportexportApiFp = ImportexportApiFp;
/**
 * ImportexportApi - factory interface
 * @export
 */
const ImportexportApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns a ZIP file with all the Superset assets (databases, datasets, charts, dashboards, saved queries) as YAML files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetsExportGet(options) {
            return (0, exports.ImportexportApiFp)(configuration).apiV1AssetsExportGet(options)(fetch, basePath);
        },
        /**
         *
         * @param {Blob} bundle
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AssetsImportPost(bundle, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
            return (0, exports.ImportexportApiFp)(configuration).apiV1AssetsImportPost(bundle, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options)(fetch, basePath);
        },
    };
};
exports.ImportexportApiFactory = ImportexportApiFactory;
/**
 * ImportexportApi - object-oriented interface
 * @export
 * @class ImportexportApi
 * @extends {BaseAPI}
 */
class ImportexportApi extends BaseAPI {
    /**
     * Returns a ZIP file with all the Superset assets (databases, datasets, charts, dashboards, saved queries) as YAML files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportexportApi
     */
    apiV1AssetsExportGet(options) {
        return (0, exports.ImportexportApiFp)(this.configuration).apiV1AssetsExportGet(options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {Blob} bundle
     * @param {string} passwords
     * @param {string} sshTunnelPasswords
     * @param {string} sshTunnelPrivateKeyPasswords
     * @param {string} sshTunnelPrivateKeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportexportApi
     */
    apiV1AssetsImportPost(bundle, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
        return (0, exports.ImportexportApiFp)(this.configuration).apiV1AssetsImportPost(bundle, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options)(this.fetch, this.basePath);
    }
}
exports.ImportexportApi = ImportexportApi;
/**
 * LogRestApiApi - fetch parameter creator
 * @export
 */
const LogRestApiApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get a list of models
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogGet(q, options = {}) {
            const localVarPath = `/api/v1/log/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an item model
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogPkGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1LogPkGet.');
            }
            const localVarPath = `/api/v1/log/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {LogRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1LogPost.');
            }
            const localVarPath = `/api/v1/log/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("LogRestApiPost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get recent activity data for a user
         * @param {number} userId The id of the user
         * @param {GetRecentActivitySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogRecentActivityUserIdGet(userId, q, options = {}) {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling apiV1LogRecentActivityUserIdGet.');
            }
            const localVarPath = `/api/v1/log/recent_activity/{user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.LogRestApiApiFetchParamCreator = LogRestApiApiFetchParamCreator;
/**
 * LogRestApiApi - functional programming interface
 * @export
 */
const LogRestApiApiFp = function (configuration) {
    return {
        /**
         * Get a list of models
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogGet(q, options) {
            const localVarFetchArgs = (0, exports.LogRestApiApiFetchParamCreator)(configuration).apiV1LogGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get an item model
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogPkGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.LogRestApiApiFetchParamCreator)(configuration).apiV1LogPkGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {LogRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogPost(body, options) {
            const localVarFetchArgs = (0, exports.LogRestApiApiFetchParamCreator)(configuration).apiV1LogPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get recent activity data for a user
         * @param {number} userId The id of the user
         * @param {GetRecentActivitySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogRecentActivityUserIdGet(userId, q, options) {
            const localVarFetchArgs = (0, exports.LogRestApiApiFetchParamCreator)(configuration).apiV1LogRecentActivityUserIdGet(userId, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.LogRestApiApiFp = LogRestApiApiFp;
/**
 * LogRestApiApi - factory interface
 * @export
 */
const LogRestApiApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get a list of models
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogGet(q, options) {
            return (0, exports.LogRestApiApiFp)(configuration).apiV1LogGet(q, options)(fetch, basePath);
        },
        /**
         * Get an item model
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogPkGet(pk, q, options) {
            return (0, exports.LogRestApiApiFp)(configuration).apiV1LogPkGet(pk, q, options)(fetch, basePath);
        },
        /**
         *
         * @param {LogRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogPost(body, options) {
            return (0, exports.LogRestApiApiFp)(configuration).apiV1LogPost(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get recent activity data for a user
         * @param {number} userId The id of the user
         * @param {GetRecentActivitySchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogRecentActivityUserIdGet(userId, q, options) {
            return (0, exports.LogRestApiApiFp)(configuration).apiV1LogRecentActivityUserIdGet(userId, q, options)(fetch, basePath);
        },
    };
};
exports.LogRestApiApiFactory = LogRestApiApiFactory;
/**
 * LogRestApiApi - object-oriented interface
 * @export
 * @class LogRestApiApi
 * @extends {BaseAPI}
 */
class LogRestApiApi extends BaseAPI {
    /**
     * Get a list of models
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogRestApiApi
     */
    apiV1LogGet(q, options) {
        return (0, exports.LogRestApiApiFp)(this.configuration).apiV1LogGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get an item model
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogRestApiApi
     */
    apiV1LogPkGet(pk, q, options) {
        return (0, exports.LogRestApiApiFp)(this.configuration).apiV1LogPkGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {LogRestApiPost} body Model schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogRestApiApi
     */
    apiV1LogPost(body, options) {
        return (0, exports.LogRestApiApiFp)(this.configuration).apiV1LogPost(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Get recent activity data for a user
     * @param {number} userId The id of the user
     * @param {GetRecentActivitySchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogRestApiApi
     */
    apiV1LogRecentActivityUserIdGet(userId, q, options) {
        return (0, exports.LogRestApiApiFp)(this.configuration).apiV1LogRecentActivityUserIdGet(userId, q, options)(this.fetch, this.basePath);
    }
}
exports.LogRestApiApi = LogRestApiApi;
/**
 * MenuApi - fetch parameter creator
 * @export
 */
const MenuApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get the menu data structure. Returns a forest like structure with the menu the user has access to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MenuGet(options = {}) {
            const localVarPath = `/api/v1/menu/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.MenuApiFetchParamCreator = MenuApiFetchParamCreator;
/**
 * MenuApi - functional programming interface
 * @export
 */
const MenuApiFp = function (configuration) {
    return {
        /**
         * Get the menu data structure. Returns a forest like structure with the menu the user has access to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MenuGet(options) {
            const localVarFetchArgs = (0, exports.MenuApiFetchParamCreator)(configuration).apiV1MenuGet(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.MenuApiFp = MenuApiFp;
/**
 * MenuApi - factory interface
 * @export
 */
const MenuApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get the menu data structure. Returns a forest like structure with the menu the user has access to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MenuGet(options) {
            return (0, exports.MenuApiFp)(configuration).apiV1MenuGet(options)(fetch, basePath);
        },
    };
};
exports.MenuApiFactory = MenuApiFactory;
/**
 * MenuApi - object-oriented interface
 * @export
 * @class MenuApi
 * @extends {BaseAPI}
 */
class MenuApi extends BaseAPI {
    /**
     * Get the menu data structure. Returns a forest like structure with the menu the user has access to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    apiV1MenuGet(options) {
        return (0, exports.MenuApiFp)(this.configuration).apiV1MenuGet(options)(this.fetch, this.basePath);
    }
}
exports.MenuApi = MenuApi;
/**
 * OpenApiApi - fetch parameter creator
 * @export
 */
const OpenApiApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get the OpenAPI spec for a specific API version
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVersionOpenapiGet(version, options = {}) {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version', 'Required parameter version was null or undefined when calling apiVersionOpenapiGet.');
            }
            const localVarPath = `/api/{version}/_openapi`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.OpenApiApiFetchParamCreator = OpenApiApiFetchParamCreator;
/**
 * OpenApiApi - functional programming interface
 * @export
 */
const OpenApiApiFp = function (configuration) {
    return {
        /**
         * Get the OpenAPI spec for a specific API version
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVersionOpenapiGet(version, options) {
            const localVarFetchArgs = (0, exports.OpenApiApiFetchParamCreator)(configuration).apiVersionOpenapiGet(version, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.OpenApiApiFp = OpenApiApiFp;
/**
 * OpenApiApi - factory interface
 * @export
 */
const OpenApiApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get the OpenAPI spec for a specific API version
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVersionOpenapiGet(version, options) {
            return (0, exports.OpenApiApiFp)(configuration).apiVersionOpenapiGet(version, options)(fetch, basePath);
        },
    };
};
exports.OpenApiApiFactory = OpenApiApiFactory;
/**
 * OpenApiApi - object-oriented interface
 * @export
 * @class OpenApiApi
 * @extends {BaseAPI}
 */
class OpenApiApi extends BaseAPI {
    /**
     * Get the OpenAPI spec for a specific API version
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenApiApi
     */
    apiVersionOpenapiGet(version, options) {
        return (0, exports.OpenApiApiFp)(this.configuration).apiVersionOpenapiGet(version, options)(this.fetch, this.basePath);
    }
}
exports.OpenApiApi = OpenApiApi;
/**
 * QueriesApi - fetch parameter creator
 * @export
 */
const QueriesApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryDistinctColumnNameGet(columnName, q, options = {}) {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1QueryDistinctColumnNameGet.');
            }
            const localVarPath = `/api/v1/query/distinct/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of queries, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryGet(q, options = {}) {
            const localVarPath = `/api/v1/query/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get query detail information.
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryPkGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1QueryPkGet.');
            }
            const localVarPath = `/api/v1/query/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryRelatedColumnNameGet(columnName, q, options = {}) {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1QueryRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/query/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Manually stop a query with client_id
         * @param {StopQuerySchema} body Stop query schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryStopPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1QueryStopPost.');
            }
            const localVarPath = `/api/v1/query/stop`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("StopQuerySchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a list of queries that changed after last_updated_ms
         * @param {QueriesGetUpdatedSinceSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryUpdatedSinceGet(q, options = {}) {
            const localVarPath = `/api/v1/query/updated_since`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes multiple saved queries in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryDelete(q, options = {}) {
            const localVarPath = `/api/v1/saved_query/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryDistinctColumnNameGet(columnName, q, options = {}) {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1SavedQueryDistinctColumnNameGet.');
            }
            const localVarPath = `/api/v1/saved_query/distinct/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exports multiple saved queries and downloads them as YAML files
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryExportGet(q, options = {}) {
            const localVarPath = `/api/v1/saved_query/export/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of saved queries, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryGet(q, options = {}) {
            const localVarPath = `/api/v1/saved_query/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options = {}) {
            // verify required parameter 'formData' is not null or undefined
            if (formData === null || formData === undefined) {
                throw new RequiredError('formData', 'Required parameter formData was null or undefined when calling apiV1SavedQueryImportPost.');
            }
            // verify required parameter 'overwrite' is not null or undefined
            if (overwrite === null || overwrite === undefined) {
                throw new RequiredError('overwrite', 'Required parameter overwrite was null or undefined when calling apiV1SavedQueryImportPost.');
            }
            // verify required parameter 'passwords' is not null or undefined
            if (passwords === null || passwords === undefined) {
                throw new RequiredError('passwords', 'Required parameter passwords was null or undefined when calling apiV1SavedQueryImportPost.');
            }
            // verify required parameter 'sshTunnelPasswords' is not null or undefined
            if (sshTunnelPasswords === null || sshTunnelPasswords === undefined) {
                throw new RequiredError('sshTunnelPasswords', 'Required parameter sshTunnelPasswords was null or undefined when calling apiV1SavedQueryImportPost.');
            }
            // verify required parameter 'sshTunnelPrivateKeyPasswords' is not null or undefined
            if (sshTunnelPrivateKeyPasswords === null || sshTunnelPrivateKeyPasswords === undefined) {
                throw new RequiredError('sshTunnelPrivateKeyPasswords', 'Required parameter sshTunnelPrivateKeyPasswords was null or undefined when calling apiV1SavedQueryImportPost.');
            }
            // verify required parameter 'sshTunnelPrivateKeys' is not null or undefined
            if (sshTunnelPrivateKeys === null || sshTunnelPrivateKeys === undefined) {
                throw new RequiredError('sshTunnelPrivateKeys', 'Required parameter sshTunnelPrivateKeys was null or undefined when calling apiV1SavedQueryImportPost.');
            }
            const localVarPath = `/api/v1/saved_query/import/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            // authentication jwt required
            if (formData !== undefined) {
                localVarFormParams.set('formData', formData);
            }
            if (overwrite !== undefined) {
                localVarFormParams.set('overwrite', overwrite);
            }
            if (passwords !== undefined) {
                localVarFormParams.set('passwords', passwords);
            }
            if (sshTunnelPasswords !== undefined) {
                localVarFormParams.set('ssh_tunnel_passwords', sshTunnelPasswords);
            }
            if (sshTunnelPrivateKeyPasswords !== undefined) {
                localVarFormParams.set('ssh_tunnel_private_key_passwords', sshTunnelPrivateKeyPasswords);
            }
            if (sshTunnelPrivateKeys !== undefined) {
                localVarFormParams.set('ssh_tunnel_private_keys', sshTunnelPrivateKeys);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryInfoGet(q, options = {}) {
            const localVarPath = `/api/v1/saved_query/_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete saved query
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryPkDelete(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1SavedQueryPkDelete.');
            }
            const localVarPath = `/api/v1/saved_query/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a saved query
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryPkGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1SavedQueryPkGet.');
            }
            const localVarPath = `/api/v1/saved_query/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a saved query
         * @param {SavedQueryRestApiPut} body Model schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryPkPut(body, pk, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1SavedQueryPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1SavedQueryPkPut.');
            }
            const localVarPath = `/api/v1/saved_query/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("SavedQueryRestApiPut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a saved query
         * @param {SavedQueryRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1SavedQueryPost.');
            }
            const localVarPath = `/api/v1/saved_query/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("SavedQueryRestApiPost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryRelatedColumnNameGet(columnName, q, options = {}) {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1SavedQueryRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/saved_query/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.QueriesApiFetchParamCreator = QueriesApiFetchParamCreator;
/**
 * QueriesApi - functional programming interface
 * @export
 */
const QueriesApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryDistinctColumnNameGet(columnName, q, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1QueryDistinctColumnNameGet(columnName, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of queries, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryGet(q, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1QueryGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get query detail information.
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryPkGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1QueryPkGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryRelatedColumnNameGet(columnName, q, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1QueryRelatedColumnNameGet(columnName, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Manually stop a query with client_id
         * @param {StopQuerySchema} body Stop query schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryStopPost(body, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1QueryStopPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get a list of queries that changed after last_updated_ms
         * @param {QueriesGetUpdatedSinceSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryUpdatedSinceGet(q, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1QueryUpdatedSinceGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes multiple saved queries in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryDelete(q, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1SavedQueryDelete(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryDistinctColumnNameGet(columnName, q, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1SavedQueryDistinctColumnNameGet(columnName, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Exports multiple saved queries and downloads them as YAML files
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryExportGet(q, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1SavedQueryExportGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of saved queries, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryGet(q, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1SavedQueryGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1SavedQueryImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryInfoGet(q, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1SavedQueryInfoGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete saved query
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryPkDelete(pk, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1SavedQueryPkDelete(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a saved query
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryPkGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1SavedQueryPkGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a saved query
         * @param {SavedQueryRestApiPut} body Model schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryPkPut(body, pk, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1SavedQueryPkPut(body, pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a saved query
         * @param {SavedQueryRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryPost(body, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1SavedQueryPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryRelatedColumnNameGet(columnName, q, options) {
            const localVarFetchArgs = (0, exports.QueriesApiFetchParamCreator)(configuration).apiV1SavedQueryRelatedColumnNameGet(columnName, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.QueriesApiFp = QueriesApiFp;
/**
 * QueriesApi - factory interface
 * @export
 */
const QueriesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryDistinctColumnNameGet(columnName, q, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1QueryDistinctColumnNameGet(columnName, q, options)(fetch, basePath);
        },
        /**
         * Get a list of queries, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryGet(q, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1QueryGet(q, options)(fetch, basePath);
        },
        /**
         * Get query detail information.
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryPkGet(pk, q, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1QueryPkGet(pk, q, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryRelatedColumnNameGet(columnName, q, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1QueryRelatedColumnNameGet(columnName, q, options)(fetch, basePath);
        },
        /**
         *
         * @summary Manually stop a query with client_id
         * @param {StopQuerySchema} body Stop query schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryStopPost(body, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1QueryStopPost(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get a list of queries that changed after last_updated_ms
         * @param {QueriesGetUpdatedSinceSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryUpdatedSinceGet(q, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1QueryUpdatedSinceGet(q, options)(fetch, basePath);
        },
        /**
         * Deletes multiple saved queries in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryDelete(q, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1SavedQueryDelete(q, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryDistinctColumnNameGet(columnName, q, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1SavedQueryDistinctColumnNameGet(columnName, q, options)(fetch, basePath);
        },
        /**
         * Exports multiple saved queries and downloads them as YAML files
         * @param {GetExportIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryExportGet(q, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1SavedQueryExportGet(q, options)(fetch, basePath);
        },
        /**
         * Get a list of saved queries, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryGet(q, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1SavedQueryGet(q, options)(fetch, basePath);
        },
        /**
         *
         * @param {Blob} formData
         * @param {boolean} overwrite
         * @param {string} passwords
         * @param {string} sshTunnelPasswords
         * @param {string} sshTunnelPrivateKeyPasswords
         * @param {string} sshTunnelPrivateKeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1SavedQueryImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options)(fetch, basePath);
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryInfoGet(q, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1SavedQueryInfoGet(q, options)(fetch, basePath);
        },
        /**
         * Delete saved query
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryPkDelete(pk, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1SavedQueryPkDelete(pk, options)(fetch, basePath);
        },
        /**
         * Get a saved query
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryPkGet(pk, q, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1SavedQueryPkGet(pk, q, options)(fetch, basePath);
        },
        /**
         * Update a saved query
         * @param {SavedQueryRestApiPut} body Model schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryPkPut(body, pk, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1SavedQueryPkPut(body, pk, options)(fetch, basePath);
        },
        /**
         * Create a saved query
         * @param {SavedQueryRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryPost(body, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1SavedQueryPost(body, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SavedQueryRelatedColumnNameGet(columnName, q, options) {
            return (0, exports.QueriesApiFp)(configuration).apiV1SavedQueryRelatedColumnNameGet(columnName, q, options)(fetch, basePath);
        },
    };
};
exports.QueriesApiFactory = QueriesApiFactory;
/**
 * QueriesApi - object-oriented interface
 * @export
 * @class QueriesApi
 * @extends {BaseAPI}
 */
class QueriesApi extends BaseAPI {
    /**
     *
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1QueryDistinctColumnNameGet(columnName, q, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1QueryDistinctColumnNameGet(columnName, q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of queries, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1QueryGet(q, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1QueryGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get query detail information.
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1QueryPkGet(pk, q, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1QueryPkGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1QueryRelatedColumnNameGet(columnName, q, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1QueryRelatedColumnNameGet(columnName, q, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Manually stop a query with client_id
     * @param {StopQuerySchema} body Stop query schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1QueryStopPost(body, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1QueryStopPost(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Get a list of queries that changed after last_updated_ms
     * @param {QueriesGetUpdatedSinceSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1QueryUpdatedSinceGet(q, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1QueryUpdatedSinceGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes multiple saved queries in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1SavedQueryDelete(q, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1SavedQueryDelete(q, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1SavedQueryDistinctColumnNameGet(columnName, q, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1SavedQueryDistinctColumnNameGet(columnName, q, options)(this.fetch, this.basePath);
    }
    /**
     * Exports multiple saved queries and downloads them as YAML files
     * @param {GetExportIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1SavedQueryExportGet(q, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1SavedQueryExportGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of saved queries, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1SavedQueryGet(q, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1SavedQueryGet(q, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {Blob} formData
     * @param {boolean} overwrite
     * @param {string} passwords
     * @param {string} sshTunnelPasswords
     * @param {string} sshTunnelPrivateKeyPasswords
     * @param {string} sshTunnelPrivateKeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1SavedQueryImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1SavedQueryImportPost(formData, overwrite, passwords, sshTunnelPasswords, sshTunnelPrivateKeyPasswords, sshTunnelPrivateKeys, options)(this.fetch, this.basePath);
    }
    /**
     * Get metadata information about this API resource
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1SavedQueryInfoGet(q, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1SavedQueryInfoGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Delete saved query
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1SavedQueryPkDelete(pk, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1SavedQueryPkDelete(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get a saved query
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1SavedQueryPkGet(pk, q, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1SavedQueryPkGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     * Update a saved query
     * @param {SavedQueryRestApiPut} body Model schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1SavedQueryPkPut(body, pk, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1SavedQueryPkPut(body, pk, options)(this.fetch, this.basePath);
    }
    /**
     * Create a saved query
     * @param {SavedQueryRestApiPost} body Model schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1SavedQueryPost(body, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1SavedQueryPost(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    apiV1SavedQueryRelatedColumnNameGet(columnName, q, options) {
        return (0, exports.QueriesApiFp)(this.configuration).apiV1SavedQueryRelatedColumnNameGet(columnName, q, options)(this.fetch, this.basePath);
    }
}
exports.QueriesApi = QueriesApi;
/**
 * ReportSchedulesApi - fetch parameter creator
 * @export
 */
const ReportSchedulesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Deletes multiple report schedules in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportDelete(q, options = {}) {
            const localVarPath = `/api/v1/report/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of report schedules, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportGet(q, options = {}) {
            const localVarPath = `/api/v1/report/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportInfoGet(q, options = {}) {
            const localVarPath = `/api/v1/report/_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a report schedule
         * @param {number} pk The report schedule pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkDelete(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ReportPkDelete.');
            }
            const localVarPath = `/api/v1/report/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a report schedule
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ReportPkGet.');
            }
            const localVarPath = `/api/v1/report/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of report schedule logs, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {number} pk The report schedule id for these logs
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkLogGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ReportPkLogGet.');
            }
            const localVarPath = `/api/v1/report/{pk}/log/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a report schedule log
         * @param {number} pk The report schedule pk for log
         * @param {number} logId The log pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkLogLogIdGet(pk, logId, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ReportPkLogLogIdGet.');
            }
            // verify required parameter 'logId' is not null or undefined
            if (logId === null || logId === undefined) {
                throw new RequiredError('logId', 'Required parameter logId was null or undefined when calling apiV1ReportPkLogLogIdGet.');
            }
            const localVarPath = `/api/v1/report/{pk}/log/{log_id}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)))
                .replace(`{${"log_id"}}`, encodeURIComponent(String(logId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a report schedule
         * @param {ReportScheduleRestApiPut} body Report Schedule schema
         * @param {number} pk The Report Schedule pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkPut(body, pk, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1ReportPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1ReportPkPut.');
            }
            const localVarPath = `/api/v1/report/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ReportScheduleRestApiPut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a report schedule
         * @param {ReportScheduleRestApiPost} body Report Schedule schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1ReportPost.');
            }
            const localVarPath = `/api/v1/report/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ReportScheduleRestApiPost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportRelatedColumnNameGet(columnName, q, options = {}) {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1ReportRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/report/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ReportSchedulesApiFetchParamCreator = ReportSchedulesApiFetchParamCreator;
/**
 * ReportSchedulesApi - functional programming interface
 * @export
 */
const ReportSchedulesApiFp = function (configuration) {
    return {
        /**
         * Deletes multiple report schedules in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportDelete(q, options) {
            const localVarFetchArgs = (0, exports.ReportSchedulesApiFetchParamCreator)(configuration).apiV1ReportDelete(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of report schedules, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportGet(q, options) {
            const localVarFetchArgs = (0, exports.ReportSchedulesApiFetchParamCreator)(configuration).apiV1ReportGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportInfoGet(q, options) {
            const localVarFetchArgs = (0, exports.ReportSchedulesApiFetchParamCreator)(configuration).apiV1ReportInfoGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a report schedule
         * @param {number} pk The report schedule pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkDelete(pk, options) {
            const localVarFetchArgs = (0, exports.ReportSchedulesApiFetchParamCreator)(configuration).apiV1ReportPkDelete(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a report schedule
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.ReportSchedulesApiFetchParamCreator)(configuration).apiV1ReportPkGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of report schedule logs, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {number} pk The report schedule id for these logs
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkLogGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.ReportSchedulesApiFetchParamCreator)(configuration).apiV1ReportPkLogGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a report schedule log
         * @param {number} pk The report schedule pk for log
         * @param {number} logId The log pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkLogLogIdGet(pk, logId, q, options) {
            const localVarFetchArgs = (0, exports.ReportSchedulesApiFetchParamCreator)(configuration).apiV1ReportPkLogLogIdGet(pk, logId, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a report schedule
         * @param {ReportScheduleRestApiPut} body Report Schedule schema
         * @param {number} pk The Report Schedule pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkPut(body, pk, options) {
            const localVarFetchArgs = (0, exports.ReportSchedulesApiFetchParamCreator)(configuration).apiV1ReportPkPut(body, pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a report schedule
         * @param {ReportScheduleRestApiPost} body Report Schedule schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPost(body, options) {
            const localVarFetchArgs = (0, exports.ReportSchedulesApiFetchParamCreator)(configuration).apiV1ReportPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportRelatedColumnNameGet(columnName, q, options) {
            const localVarFetchArgs = (0, exports.ReportSchedulesApiFetchParamCreator)(configuration).apiV1ReportRelatedColumnNameGet(columnName, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.ReportSchedulesApiFp = ReportSchedulesApiFp;
/**
 * ReportSchedulesApi - factory interface
 * @export
 */
const ReportSchedulesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Deletes multiple report schedules in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportDelete(q, options) {
            return (0, exports.ReportSchedulesApiFp)(configuration).apiV1ReportDelete(q, options)(fetch, basePath);
        },
        /**
         * Get a list of report schedules, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportGet(q, options) {
            return (0, exports.ReportSchedulesApiFp)(configuration).apiV1ReportGet(q, options)(fetch, basePath);
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportInfoGet(q, options) {
            return (0, exports.ReportSchedulesApiFp)(configuration).apiV1ReportInfoGet(q, options)(fetch, basePath);
        },
        /**
         * Delete a report schedule
         * @param {number} pk The report schedule pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkDelete(pk, options) {
            return (0, exports.ReportSchedulesApiFp)(configuration).apiV1ReportPkDelete(pk, options)(fetch, basePath);
        },
        /**
         * Get a report schedule
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkGet(pk, q, options) {
            return (0, exports.ReportSchedulesApiFp)(configuration).apiV1ReportPkGet(pk, q, options)(fetch, basePath);
        },
        /**
         * Get a list of report schedule logs, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
         * @param {number} pk The report schedule id for these logs
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkLogGet(pk, q, options) {
            return (0, exports.ReportSchedulesApiFp)(configuration).apiV1ReportPkLogGet(pk, q, options)(fetch, basePath);
        },
        /**
         * Get a report schedule log
         * @param {number} pk The report schedule pk for log
         * @param {number} logId The log pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkLogLogIdGet(pk, logId, q, options) {
            return (0, exports.ReportSchedulesApiFp)(configuration).apiV1ReportPkLogLogIdGet(pk, logId, q, options)(fetch, basePath);
        },
        /**
         * Update a report schedule
         * @param {ReportScheduleRestApiPut} body Report Schedule schema
         * @param {number} pk The Report Schedule pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPkPut(body, pk, options) {
            return (0, exports.ReportSchedulesApiFp)(configuration).apiV1ReportPkPut(body, pk, options)(fetch, basePath);
        },
        /**
         * Create a report schedule
         * @param {ReportScheduleRestApiPost} body Report Schedule schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportPost(body, options) {
            return (0, exports.ReportSchedulesApiFp)(configuration).apiV1ReportPost(body, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportRelatedColumnNameGet(columnName, q, options) {
            return (0, exports.ReportSchedulesApiFp)(configuration).apiV1ReportRelatedColumnNameGet(columnName, q, options)(fetch, basePath);
        },
    };
};
exports.ReportSchedulesApiFactory = ReportSchedulesApiFactory;
/**
 * ReportSchedulesApi - object-oriented interface
 * @export
 * @class ReportSchedulesApi
 * @extends {BaseAPI}
 */
class ReportSchedulesApi extends BaseAPI {
    /**
     * Deletes multiple report schedules in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSchedulesApi
     */
    apiV1ReportDelete(q, options) {
        return (0, exports.ReportSchedulesApiFp)(this.configuration).apiV1ReportDelete(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of report schedules, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSchedulesApi
     */
    apiV1ReportGet(q, options) {
        return (0, exports.ReportSchedulesApiFp)(this.configuration).apiV1ReportGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get metadata information about this API resource
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSchedulesApi
     */
    apiV1ReportInfoGet(q, options) {
        return (0, exports.ReportSchedulesApiFp)(this.configuration).apiV1ReportInfoGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Delete a report schedule
     * @param {number} pk The report schedule pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSchedulesApi
     */
    apiV1ReportPkDelete(pk, options) {
        return (0, exports.ReportSchedulesApiFp)(this.configuration).apiV1ReportPkDelete(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get a report schedule
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSchedulesApi
     */
    apiV1ReportPkGet(pk, q, options) {
        return (0, exports.ReportSchedulesApiFp)(this.configuration).apiV1ReportPkGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of report schedule logs, use Rison or JSON query parameters for filtering, sorting, pagination and for selecting specific columns and metadata.
     * @param {number} pk The report schedule id for these logs
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSchedulesApi
     */
    apiV1ReportPkLogGet(pk, q, options) {
        return (0, exports.ReportSchedulesApiFp)(this.configuration).apiV1ReportPkLogGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a report schedule log
     * @param {number} pk The report schedule pk for log
     * @param {number} logId The log pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSchedulesApi
     */
    apiV1ReportPkLogLogIdGet(pk, logId, q, options) {
        return (0, exports.ReportSchedulesApiFp)(this.configuration).apiV1ReportPkLogLogIdGet(pk, logId, q, options)(this.fetch, this.basePath);
    }
    /**
     * Update a report schedule
     * @param {ReportScheduleRestApiPut} body Report Schedule schema
     * @param {number} pk The Report Schedule pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSchedulesApi
     */
    apiV1ReportPkPut(body, pk, options) {
        return (0, exports.ReportSchedulesApiFp)(this.configuration).apiV1ReportPkPut(body, pk, options)(this.fetch, this.basePath);
    }
    /**
     * Create a report schedule
     * @param {ReportScheduleRestApiPost} body Report Schedule schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSchedulesApi
     */
    apiV1ReportPost(body, options) {
        return (0, exports.ReportSchedulesApiFp)(this.configuration).apiV1ReportPost(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSchedulesApi
     */
    apiV1ReportRelatedColumnNameGet(columnName, q, options) {
        return (0, exports.ReportSchedulesApiFp)(this.configuration).apiV1ReportRelatedColumnNameGet(columnName, q, options)(this.fetch, this.basePath);
    }
}
exports.ReportSchedulesApi = ReportSchedulesApi;
/**
 * RowLevelSecurityApi - fetch parameter creator
 * @export
 */
const RowLevelSecurityApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Deletes multiple RLS rules in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityDelete(q, options = {}) {
            const localVarPath = `/api/v1/rowlevelsecurity/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of models
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityGet(q, options = {}) {
            const localVarPath = `/api/v1/rowlevelsecurity/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityInfoGet(q, options = {}) {
            const localVarPath = `/api/v1/rowlevelsecurity/_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityPkDelete(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1RowlevelsecurityPkDelete.');
            }
            const localVarPath = `/api/v1/rowlevelsecurity/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an item model
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityPkGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1RowlevelsecurityPkGet.');
            }
            const localVarPath = `/api/v1/rowlevelsecurity/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an RLS Rule
         * @param {RLSRestApiPut} body RLS schema
         * @param {number} pk The Rule pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityPkPut(body, pk, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1RowlevelsecurityPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1RowlevelsecurityPkPut.');
            }
            const localVarPath = `/api/v1/rowlevelsecurity/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("RLSRestApiPut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new RLS Rule
         * @param {RLSRestApiPost} body RLS schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1RowlevelsecurityPost.');
            }
            const localVarPath = `/api/v1/rowlevelsecurity/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("RLSRestApiPost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityRelatedColumnNameGet(columnName, q, options = {}) {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1RowlevelsecurityRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/rowlevelsecurity/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.RowLevelSecurityApiFetchParamCreator = RowLevelSecurityApiFetchParamCreator;
/**
 * RowLevelSecurityApi - functional programming interface
 * @export
 */
const RowLevelSecurityApiFp = function (configuration) {
    return {
        /**
         * Deletes multiple RLS rules in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityDelete(q, options) {
            const localVarFetchArgs = (0, exports.RowLevelSecurityApiFetchParamCreator)(configuration).apiV1RowlevelsecurityDelete(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of models
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityGet(q, options) {
            const localVarFetchArgs = (0, exports.RowLevelSecurityApiFetchParamCreator)(configuration).apiV1RowlevelsecurityGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityInfoGet(q, options) {
            const localVarFetchArgs = (0, exports.RowLevelSecurityApiFetchParamCreator)(configuration).apiV1RowlevelsecurityInfoGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityPkDelete(pk, options) {
            const localVarFetchArgs = (0, exports.RowLevelSecurityApiFetchParamCreator)(configuration).apiV1RowlevelsecurityPkDelete(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get an item model
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityPkGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.RowLevelSecurityApiFetchParamCreator)(configuration).apiV1RowlevelsecurityPkGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an RLS Rule
         * @param {RLSRestApiPut} body RLS schema
         * @param {number} pk The Rule pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityPkPut(body, pk, options) {
            const localVarFetchArgs = (0, exports.RowLevelSecurityApiFetchParamCreator)(configuration).apiV1RowlevelsecurityPkPut(body, pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new RLS Rule
         * @param {RLSRestApiPost} body RLS schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityPost(body, options) {
            const localVarFetchArgs = (0, exports.RowLevelSecurityApiFetchParamCreator)(configuration).apiV1RowlevelsecurityPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityRelatedColumnNameGet(columnName, q, options) {
            const localVarFetchArgs = (0, exports.RowLevelSecurityApiFetchParamCreator)(configuration).apiV1RowlevelsecurityRelatedColumnNameGet(columnName, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.RowLevelSecurityApiFp = RowLevelSecurityApiFp;
/**
 * RowLevelSecurityApi - factory interface
 * @export
 */
const RowLevelSecurityApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Deletes multiple RLS rules in a bulk operation.
         * @param {GetDeleteIdsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityDelete(q, options) {
            return (0, exports.RowLevelSecurityApiFp)(configuration).apiV1RowlevelsecurityDelete(q, options)(fetch, basePath);
        },
        /**
         * Get a list of models
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityGet(q, options) {
            return (0, exports.RowLevelSecurityApiFp)(configuration).apiV1RowlevelsecurityGet(q, options)(fetch, basePath);
        },
        /**
         * Get metadata information about this API resource
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityInfoGet(q, options) {
            return (0, exports.RowLevelSecurityApiFp)(configuration).apiV1RowlevelsecurityInfoGet(q, options)(fetch, basePath);
        },
        /**
         *
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityPkDelete(pk, options) {
            return (0, exports.RowLevelSecurityApiFp)(configuration).apiV1RowlevelsecurityPkDelete(pk, options)(fetch, basePath);
        },
        /**
         * Get an item model
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityPkGet(pk, q, options) {
            return (0, exports.RowLevelSecurityApiFp)(configuration).apiV1RowlevelsecurityPkGet(pk, q, options)(fetch, basePath);
        },
        /**
         * Updates an RLS Rule
         * @param {RLSRestApiPut} body RLS schema
         * @param {number} pk The Rule pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityPkPut(body, pk, options) {
            return (0, exports.RowLevelSecurityApiFp)(configuration).apiV1RowlevelsecurityPkPut(body, pk, options)(fetch, basePath);
        },
        /**
         * Create a new RLS Rule
         * @param {RLSRestApiPost} body RLS schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityPost(body, options) {
            return (0, exports.RowLevelSecurityApiFp)(configuration).apiV1RowlevelsecurityPost(body, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RowlevelsecurityRelatedColumnNameGet(columnName, q, options) {
            return (0, exports.RowLevelSecurityApiFp)(configuration).apiV1RowlevelsecurityRelatedColumnNameGet(columnName, q, options)(fetch, basePath);
        },
    };
};
exports.RowLevelSecurityApiFactory = RowLevelSecurityApiFactory;
/**
 * RowLevelSecurityApi - object-oriented interface
 * @export
 * @class RowLevelSecurityApi
 * @extends {BaseAPI}
 */
class RowLevelSecurityApi extends BaseAPI {
    /**
     * Deletes multiple RLS rules in a bulk operation.
     * @param {GetDeleteIdsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RowLevelSecurityApi
     */
    apiV1RowlevelsecurityDelete(q, options) {
        return (0, exports.RowLevelSecurityApiFp)(this.configuration).apiV1RowlevelsecurityDelete(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of models
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RowLevelSecurityApi
     */
    apiV1RowlevelsecurityGet(q, options) {
        return (0, exports.RowLevelSecurityApiFp)(this.configuration).apiV1RowlevelsecurityGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get metadata information about this API resource
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RowLevelSecurityApi
     */
    apiV1RowlevelsecurityInfoGet(q, options) {
        return (0, exports.RowLevelSecurityApiFp)(this.configuration).apiV1RowlevelsecurityInfoGet(q, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RowLevelSecurityApi
     */
    apiV1RowlevelsecurityPkDelete(pk, options) {
        return (0, exports.RowLevelSecurityApiFp)(this.configuration).apiV1RowlevelsecurityPkDelete(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get an item model
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RowLevelSecurityApi
     */
    apiV1RowlevelsecurityPkGet(pk, q, options) {
        return (0, exports.RowLevelSecurityApiFp)(this.configuration).apiV1RowlevelsecurityPkGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     * Updates an RLS Rule
     * @param {RLSRestApiPut} body RLS schema
     * @param {number} pk The Rule pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RowLevelSecurityApi
     */
    apiV1RowlevelsecurityPkPut(body, pk, options) {
        return (0, exports.RowLevelSecurityApiFp)(this.configuration).apiV1RowlevelsecurityPkPut(body, pk, options)(this.fetch, this.basePath);
    }
    /**
     * Create a new RLS Rule
     * @param {RLSRestApiPost} body RLS schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RowLevelSecurityApi
     */
    apiV1RowlevelsecurityPost(body, options) {
        return (0, exports.RowLevelSecurityApiFp)(this.configuration).apiV1RowlevelsecurityPost(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RowLevelSecurityApi
     */
    apiV1RowlevelsecurityRelatedColumnNameGet(columnName, q, options) {
        return (0, exports.RowLevelSecurityApiFp)(this.configuration).apiV1RowlevelsecurityRelatedColumnNameGet(columnName, q, options)(this.fetch, this.basePath);
    }
}
exports.RowLevelSecurityApi = RowLevelSecurityApi;
/**
 * SQLLabApi - fetch parameter creator
 * @export
 */
const SQLLabApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Estimates the SQL query execution cost
         * @param {EstimateQueryCostSchema} body SQL query and params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabEstimatePost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1SqllabEstimatePost.');
            }
            const localVarPath = `/api/v1/sqllab/estimate/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EstimateQueryCostSchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts the execution of a SQL query
         * @param {ExecutePayloadSchema} body SQL query and params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabExecutePost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1SqllabExecutePost.');
            }
            const localVarPath = `/api/v1/sqllab/execute/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ExecutePayloadSchema" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Exports the SQL query results to a CSV
         * @param {number} clientId The SQL query result identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabExportClientIdGet(clientId, options = {}) {
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId', 'Required parameter clientId was null or undefined when calling apiV1SqllabExportClientIdGet.');
            }
            const localVarPath = `/api/v1/sqllab/export/{client_id}/`
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the result of a SQL query execution
         * @param {SqlLabGetResultsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabResultsGet(q, options = {}) {
            const localVarPath = `/api/v1/sqllab/results/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SQLLabApiFetchParamCreator = SQLLabApiFetchParamCreator;
/**
 * SQLLabApi - functional programming interface
 * @export
 */
const SQLLabApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Estimates the SQL query execution cost
         * @param {EstimateQueryCostSchema} body SQL query and params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabEstimatePost(body, options) {
            const localVarFetchArgs = (0, exports.SQLLabApiFetchParamCreator)(configuration).apiV1SqllabEstimatePost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Starts the execution of a SQL query
         * @param {ExecutePayloadSchema} body SQL query and params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabExecutePost(body, options) {
            const localVarFetchArgs = (0, exports.SQLLabApiFetchParamCreator)(configuration).apiV1SqllabExecutePost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Exports the SQL query results to a CSV
         * @param {number} clientId The SQL query result identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabExportClientIdGet(clientId, options) {
            const localVarFetchArgs = (0, exports.SQLLabApiFetchParamCreator)(configuration).apiV1SqllabExportClientIdGet(clientId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Gets the result of a SQL query execution
         * @param {SqlLabGetResultsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabResultsGet(q, options) {
            const localVarFetchArgs = (0, exports.SQLLabApiFetchParamCreator)(configuration).apiV1SqllabResultsGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.SQLLabApiFp = SQLLabApiFp;
/**
 * SQLLabApi - factory interface
 * @export
 */
const SQLLabApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Estimates the SQL query execution cost
         * @param {EstimateQueryCostSchema} body SQL query and params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabEstimatePost(body, options) {
            return (0, exports.SQLLabApiFp)(configuration).apiV1SqllabEstimatePost(body, options)(fetch, basePath);
        },
        /**
         * Starts the execution of a SQL query
         * @param {ExecutePayloadSchema} body SQL query and params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabExecutePost(body, options) {
            return (0, exports.SQLLabApiFp)(configuration).apiV1SqllabExecutePost(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Exports the SQL query results to a CSV
         * @param {number} clientId The SQL query result identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabExportClientIdGet(clientId, options) {
            return (0, exports.SQLLabApiFp)(configuration).apiV1SqllabExportClientIdGet(clientId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Gets the result of a SQL query execution
         * @param {SqlLabGetResultsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SqllabResultsGet(q, options) {
            return (0, exports.SQLLabApiFp)(configuration).apiV1SqllabResultsGet(q, options)(fetch, basePath);
        },
    };
};
exports.SQLLabApiFactory = SQLLabApiFactory;
/**
 * SQLLabApi - object-oriented interface
 * @export
 * @class SQLLabApi
 * @extends {BaseAPI}
 */
class SQLLabApi extends BaseAPI {
    /**
     *
     * @summary Estimates the SQL query execution cost
     * @param {EstimateQueryCostSchema} body SQL query and params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SQLLabApi
     */
    apiV1SqllabEstimatePost(body, options) {
        return (0, exports.SQLLabApiFp)(this.configuration).apiV1SqllabEstimatePost(body, options)(this.fetch, this.basePath);
    }
    /**
     * Starts the execution of a SQL query
     * @param {ExecutePayloadSchema} body SQL query and params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SQLLabApi
     */
    apiV1SqllabExecutePost(body, options) {
        return (0, exports.SQLLabApiFp)(this.configuration).apiV1SqllabExecutePost(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Exports the SQL query results to a CSV
     * @param {number} clientId The SQL query result identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SQLLabApi
     */
    apiV1SqllabExportClientIdGet(clientId, options) {
        return (0, exports.SQLLabApiFp)(this.configuration).apiV1SqllabExportClientIdGet(clientId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Gets the result of a SQL query execution
     * @param {SqlLabGetResultsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SQLLabApi
     */
    apiV1SqllabResultsGet(q, options) {
        return (0, exports.SQLLabApiFp)(this.configuration).apiV1SqllabResultsGet(q, options)(this.fetch, this.basePath);
    }
}
exports.SQLLabApi = SQLLabApi;
/**
 * SecurityApi - fetch parameter creator
 * @export
 */
const SecurityApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Fetch the CSRF token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecurityCsrfTokenGet(options = {}) {
            const localVarPath = `/api/v1/security/csrf_token/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a guest token
         * @param {GuestTokenCreate} body Parameters for the guest token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecurityGuestTokenPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1SecurityGuestTokenPost.');
            }
            const localVarPath = `/api/v1/security/guest_token/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GuestTokenCreate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authenticate and get a JWT access and refresh token
         * @param {SecurityLoginBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecurityLoginPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1SecurityLoginPost.');
            }
            const localVarPath = `/api/v1/security/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("SecurityLoginBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the refresh token to get a new JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecurityRefreshPost(options = {}) {
            const localVarPath = `/api/v1/security/refresh`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_refresh required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SecurityApiFetchParamCreator = SecurityApiFetchParamCreator;
/**
 * SecurityApi - functional programming interface
 * @export
 */
const SecurityApiFp = function (configuration) {
    return {
        /**
         * Fetch the CSRF token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecurityCsrfTokenGet(options) {
            const localVarFetchArgs = (0, exports.SecurityApiFetchParamCreator)(configuration).apiV1SecurityCsrfTokenGet(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Fetches a guest token
         * @param {GuestTokenCreate} body Parameters for the guest token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecurityGuestTokenPost(body, options) {
            const localVarFetchArgs = (0, exports.SecurityApiFetchParamCreator)(configuration).apiV1SecurityGuestTokenPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Authenticate and get a JWT access and refresh token
         * @param {SecurityLoginBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecurityLoginPost(body, options) {
            const localVarFetchArgs = (0, exports.SecurityApiFetchParamCreator)(configuration).apiV1SecurityLoginPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Use the refresh token to get a new JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecurityRefreshPost(options) {
            const localVarFetchArgs = (0, exports.SecurityApiFetchParamCreator)(configuration).apiV1SecurityRefreshPost(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.SecurityApiFp = SecurityApiFp;
/**
 * SecurityApi - factory interface
 * @export
 */
const SecurityApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Fetch the CSRF token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecurityCsrfTokenGet(options) {
            return (0, exports.SecurityApiFp)(configuration).apiV1SecurityCsrfTokenGet(options)(fetch, basePath);
        },
        /**
         * Fetches a guest token
         * @param {GuestTokenCreate} body Parameters for the guest token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecurityGuestTokenPost(body, options) {
            return (0, exports.SecurityApiFp)(configuration).apiV1SecurityGuestTokenPost(body, options)(fetch, basePath);
        },
        /**
         * Authenticate and get a JWT access and refresh token
         * @param {SecurityLoginBody} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecurityLoginPost(body, options) {
            return (0, exports.SecurityApiFp)(configuration).apiV1SecurityLoginPost(body, options)(fetch, basePath);
        },
        /**
         * Use the refresh token to get a new JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecurityRefreshPost(options) {
            return (0, exports.SecurityApiFp)(configuration).apiV1SecurityRefreshPost(options)(fetch, basePath);
        },
    };
};
exports.SecurityApiFactory = SecurityApiFactory;
/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
class SecurityApi extends BaseAPI {
    /**
     * Fetch the CSRF token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    apiV1SecurityCsrfTokenGet(options) {
        return (0, exports.SecurityApiFp)(this.configuration).apiV1SecurityCsrfTokenGet(options)(this.fetch, this.basePath);
    }
    /**
     * Fetches a guest token
     * @param {GuestTokenCreate} body Parameters for the guest token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    apiV1SecurityGuestTokenPost(body, options) {
        return (0, exports.SecurityApiFp)(this.configuration).apiV1SecurityGuestTokenPost(body, options)(this.fetch, this.basePath);
    }
    /**
     * Authenticate and get a JWT access and refresh token
     * @param {SecurityLoginBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    apiV1SecurityLoginPost(body, options) {
        return (0, exports.SecurityApiFp)(this.configuration).apiV1SecurityLoginPost(body, options)(this.fetch, this.basePath);
    }
    /**
     * Use the refresh token to get a new JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    apiV1SecurityRefreshPost(options) {
        return (0, exports.SecurityApiFp)(this.configuration).apiV1SecurityRefreshPost(options)(this.fetch, this.basePath);
    }
}
exports.SecurityApi = SecurityApi;
/**
 * TagsApi - fetch parameter creator
 * @export
 */
const TagsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Deletes multiple Tags. This will remove all tagged objects with this tag
         * @param {DeleteTagsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagDelete(q, options = {}) {
            const localVarPath = `/api/v1/tag/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of tags, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagGet(q, options = {}) {
            const localVarPath = `/api/v1/tag/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all objects associated with a Tag.
         * @param {number} tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagGetObjectsGet(tagId, options = {}) {
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId', 'Required parameter tagId was null or undefined when calling apiV1TagGetObjectsGet.');
            }
            const localVarPath = `/api/v1/tag/get_objects/`
                .replace(`{${"tag_id"}}`, encodeURIComponent(String(tagId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Several metadata information about tag API endpoints.
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagInfoGet(q, options = {}) {
            const localVarPath = `/api/v1/tag/_info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add tags to an object..
         * @param {ObjectTypeObjectIdBody} body Tag schema
         * @param {number} objectType
         * @param {number} objectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagObjectTypeObjectIdPost(body, objectType, objectId, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1TagObjectTypeObjectIdPost.');
            }
            // verify required parameter 'objectType' is not null or undefined
            if (objectType === null || objectType === undefined) {
                throw new RequiredError('objectType', 'Required parameter objectType was null or undefined when calling apiV1TagObjectTypeObjectIdPost.');
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError('objectId', 'Required parameter objectId was null or undefined when calling apiV1TagObjectTypeObjectIdPost.');
            }
            const localVarPath = `/api/v1/tag/{object_type}/{object_id}/`
                .replace(`{${"object_type"}}`, encodeURIComponent(String(objectType)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ObjectTypeObjectIdBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Tagged Object.
         * @param {string} tag
         * @param {number} objectType
         * @param {number} objectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagObjectTypeObjectIdTagDelete(tag, objectType, objectId, options = {}) {
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag', 'Required parameter tag was null or undefined when calling apiV1TagObjectTypeObjectIdTagDelete.');
            }
            // verify required parameter 'objectType' is not null or undefined
            if (objectType === null || objectType === undefined) {
                throw new RequiredError('objectType', 'Required parameter objectType was null or undefined when calling apiV1TagObjectTypeObjectIdTagDelete.');
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError('objectId', 'Required parameter objectId was null or undefined when calling apiV1TagObjectTypeObjectIdTagDelete.');
            }
            const localVarPath = `/api/v1/tag/{object_type}/{object_id}/{tag}/`
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)))
                .replace(`{${"object_type"}}`, encodeURIComponent(String(objectType)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPkDelete(pk, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1TagPkDelete.');
            }
            const localVarPath = `/api/v1/tag/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a tag detail information.
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPkGet(pk, q, options = {}) {
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1TagPkGet.');
            }
            const localVarPath = `/api/v1/tag/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {TagRestApiPut} body Model schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPkPut(body, pk, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1TagPkPut.');
            }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling apiV1TagPkPut.');
            }
            const localVarPath = `/api/v1/tag/{pk}`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("TagRestApiPut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {TagRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV1TagPost.');
            }
            const localVarPath = `/api/v1/tag/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("TagRestApiPost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagRelatedColumnNameGet(columnName, q, options = {}) {
            // verify required parameter 'columnName' is not null or undefined
            if (columnName === null || columnName === undefined) {
                throw new RequiredError('columnName', 'Required parameter columnName was null or undefined when calling apiV1TagRelatedColumnNameGet.');
            }
            const localVarPath = `/api/v1/tag/related/{column_name}`
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.TagsApiFetchParamCreator = TagsApiFetchParamCreator;
/**
 * TagsApi - functional programming interface
 * @export
 */
const TagsApiFp = function (configuration) {
    return {
        /**
         * Deletes multiple Tags. This will remove all tagged objects with this tag
         * @param {DeleteTagsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagDelete(q, options) {
            const localVarFetchArgs = (0, exports.TagsApiFetchParamCreator)(configuration).apiV1TagDelete(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of tags, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagGet(q, options) {
            const localVarFetchArgs = (0, exports.TagsApiFetchParamCreator)(configuration).apiV1TagGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Gets all objects associated with a Tag.
         * @param {number} tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagGetObjectsGet(tagId, options) {
            const localVarFetchArgs = (0, exports.TagsApiFetchParamCreator)(configuration).apiV1TagGetObjectsGet(tagId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Several metadata information about tag API endpoints.
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagInfoGet(q, options) {
            const localVarFetchArgs = (0, exports.TagsApiFetchParamCreator)(configuration).apiV1TagInfoGet(q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Add tags to an object..
         * @param {ObjectTypeObjectIdBody} body Tag schema
         * @param {number} objectType
         * @param {number} objectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagObjectTypeObjectIdPost(body, objectType, objectId, options) {
            const localVarFetchArgs = (0, exports.TagsApiFetchParamCreator)(configuration).apiV1TagObjectTypeObjectIdPost(body, objectType, objectId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Tagged Object.
         * @param {string} tag
         * @param {number} objectType
         * @param {number} objectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagObjectTypeObjectIdTagDelete(tag, objectType, objectId, options) {
            const localVarFetchArgs = (0, exports.TagsApiFetchParamCreator)(configuration).apiV1TagObjectTypeObjectIdTagDelete(tag, objectType, objectId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPkDelete(pk, options) {
            const localVarFetchArgs = (0, exports.TagsApiFetchParamCreator)(configuration).apiV1TagPkDelete(pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a tag detail information.
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPkGet(pk, q, options) {
            const localVarFetchArgs = (0, exports.TagsApiFetchParamCreator)(configuration).apiV1TagPkGet(pk, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {TagRestApiPut} body Model schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPkPut(body, pk, options) {
            const localVarFetchArgs = (0, exports.TagsApiFetchParamCreator)(configuration).apiV1TagPkPut(body, pk, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {TagRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPost(body, options) {
            const localVarFetchArgs = (0, exports.TagsApiFetchParamCreator)(configuration).apiV1TagPost(body, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagRelatedColumnNameGet(columnName, q, options) {
            const localVarFetchArgs = (0, exports.TagsApiFetchParamCreator)(configuration).apiV1TagRelatedColumnNameGet(columnName, q, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.TagsApiFp = TagsApiFp;
/**
 * TagsApi - factory interface
 * @export
 */
const TagsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Deletes multiple Tags. This will remove all tagged objects with this tag
         * @param {DeleteTagsSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagDelete(q, options) {
            return (0, exports.TagsApiFp)(configuration).apiV1TagDelete(q, options)(fetch, basePath);
        },
        /**
         * Get a list of tags, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
         * @param {GetListSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagGet(q, options) {
            return (0, exports.TagsApiFp)(configuration).apiV1TagGet(q, options)(fetch, basePath);
        },
        /**
         * Gets all objects associated with a Tag.
         * @param {number} tagId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagGetObjectsGet(tagId, options) {
            return (0, exports.TagsApiFp)(configuration).apiV1TagGetObjectsGet(tagId, options)(fetch, basePath);
        },
        /**
         * Several metadata information about tag API endpoints.
         * @param {GetInfoSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagInfoGet(q, options) {
            return (0, exports.TagsApiFp)(configuration).apiV1TagInfoGet(q, options)(fetch, basePath);
        },
        /**
         * Add tags to an object..
         * @param {ObjectTypeObjectIdBody} body Tag schema
         * @param {number} objectType
         * @param {number} objectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagObjectTypeObjectIdPost(body, objectType, objectId, options) {
            return (0, exports.TagsApiFp)(configuration).apiV1TagObjectTypeObjectIdPost(body, objectType, objectId, options)(fetch, basePath);
        },
        /**
         * Deletes a Tagged Object.
         * @param {string} tag
         * @param {number} objectType
         * @param {number} objectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagObjectTypeObjectIdTagDelete(tag, objectType, objectId, options) {
            return (0, exports.TagsApiFp)(configuration).apiV1TagObjectTypeObjectIdTagDelete(tag, objectType, objectId, options)(fetch, basePath);
        },
        /**
         *
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPkDelete(pk, options) {
            return (0, exports.TagsApiFp)(configuration).apiV1TagPkDelete(pk, options)(fetch, basePath);
        },
        /**
         * Get a tag detail information.
         * @param {number} pk
         * @param {GetItemSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPkGet(pk, q, options) {
            return (0, exports.TagsApiFp)(configuration).apiV1TagPkGet(pk, q, options)(fetch, basePath);
        },
        /**
         *
         * @param {TagRestApiPut} body Model schema
         * @param {number} pk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPkPut(body, pk, options) {
            return (0, exports.TagsApiFp)(configuration).apiV1TagPkPut(body, pk, options)(fetch, basePath);
        },
        /**
         *
         * @param {TagRestApiPost} body Model schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagPost(body, options) {
            return (0, exports.TagsApiFp)(configuration).apiV1TagPost(body, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} columnName
         * @param {GetRelatedSchema} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagRelatedColumnNameGet(columnName, q, options) {
            return (0, exports.TagsApiFp)(configuration).apiV1TagRelatedColumnNameGet(columnName, q, options)(fetch, basePath);
        },
    };
};
exports.TagsApiFactory = TagsApiFactory;
/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
class TagsApi extends BaseAPI {
    /**
     * Deletes multiple Tags. This will remove all tagged objects with this tag
     * @param {DeleteTagsSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    apiV1TagDelete(q, options) {
        return (0, exports.TagsApiFp)(this.configuration).apiV1TagDelete(q, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of tags, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
     * @param {GetListSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    apiV1TagGet(q, options) {
        return (0, exports.TagsApiFp)(this.configuration).apiV1TagGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Gets all objects associated with a Tag.
     * @param {number} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    apiV1TagGetObjectsGet(tagId, options) {
        return (0, exports.TagsApiFp)(this.configuration).apiV1TagGetObjectsGet(tagId, options)(this.fetch, this.basePath);
    }
    /**
     * Several metadata information about tag API endpoints.
     * @param {GetInfoSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    apiV1TagInfoGet(q, options) {
        return (0, exports.TagsApiFp)(this.configuration).apiV1TagInfoGet(q, options)(this.fetch, this.basePath);
    }
    /**
     * Add tags to an object..
     * @param {ObjectTypeObjectIdBody} body Tag schema
     * @param {number} objectType
     * @param {number} objectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    apiV1TagObjectTypeObjectIdPost(body, objectType, objectId, options) {
        return (0, exports.TagsApiFp)(this.configuration).apiV1TagObjectTypeObjectIdPost(body, objectType, objectId, options)(this.fetch, this.basePath);
    }
    /**
     * Deletes a Tagged Object.
     * @param {string} tag
     * @param {number} objectType
     * @param {number} objectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    apiV1TagObjectTypeObjectIdTagDelete(tag, objectType, objectId, options) {
        return (0, exports.TagsApiFp)(this.configuration).apiV1TagObjectTypeObjectIdTagDelete(tag, objectType, objectId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    apiV1TagPkDelete(pk, options) {
        return (0, exports.TagsApiFp)(this.configuration).apiV1TagPkDelete(pk, options)(this.fetch, this.basePath);
    }
    /**
     * Get a tag detail information.
     * @param {number} pk
     * @param {GetItemSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    apiV1TagPkGet(pk, q, options) {
        return (0, exports.TagsApiFp)(this.configuration).apiV1TagPkGet(pk, q, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {TagRestApiPut} body Model schema
     * @param {number} pk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    apiV1TagPkPut(body, pk, options) {
        return (0, exports.TagsApiFp)(this.configuration).apiV1TagPkPut(body, pk, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {TagRestApiPost} body Model schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    apiV1TagPost(body, options) {
        return (0, exports.TagsApiFp)(this.configuration).apiV1TagPost(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} columnName
     * @param {GetRelatedSchema} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    apiV1TagRelatedColumnNameGet(columnName, q, options) {
        return (0, exports.TagsApiFp)(this.configuration).apiV1TagRelatedColumnNameGet(columnName, q, options)(this.fetch, this.basePath);
    }
}
exports.TagsApi = TagsApi;
